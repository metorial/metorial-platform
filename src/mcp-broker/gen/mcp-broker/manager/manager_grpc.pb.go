// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: manager.proto

package manager

import (
	context "context"
	mcp "github.com/metorial/metorial/mcp-broker/gen/mcp-broker/mcp"
	workerBroker "github.com/metorial/metorial/mcp-broker/gen/mcp-broker/workerBroker"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	McpManager_CreateSession_FullMethodName     = "/broker.manager.McpManager/CreateSession"
	McpManager_SendMcpMessage_FullMethodName    = "/broker.manager.McpManager/SendMcpMessage"
	McpManager_StreamMcpMessages_FullMethodName = "/broker.manager.McpManager/StreamMcpMessages"
	McpManager_GetServerInfo_FullMethodName     = "/broker.manager.McpManager/GetServerInfo"
	McpManager_ListManagers_FullMethodName      = "/broker.manager.McpManager/ListManagers"
	McpManager_ListWorkers_FullMethodName       = "/broker.manager.McpManager/ListWorkers"
)

// McpManagerClient is the client API for McpManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McpManagerClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	SendMcpMessage(ctx context.Context, in *SendMcpMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendMcpMessageResponse], error)
	StreamMcpMessages(ctx context.Context, in *StreamMcpMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMcpMessagesResponse], error)
	GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*mcp.McpParticipant, error)
	ListManagers(ctx context.Context, in *workerBroker.ListManagersRequest, opts ...grpc.CallOption) (*workerBroker.ListManagersResponse, error)
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error)
}

type mcpManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMcpManagerClient(cc grpc.ClientConnInterface) McpManagerClient {
	return &mcpManagerClient{cc}
}

func (c *mcpManagerClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, McpManager_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) SendMcpMessage(ctx context.Context, in *SendMcpMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SendMcpMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &McpManager_ServiceDesc.Streams[0], McpManager_SendMcpMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendMcpMessageRequest, SendMcpMessageResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpManager_SendMcpMessageClient = grpc.ServerStreamingClient[SendMcpMessageResponse]

func (c *mcpManagerClient) StreamMcpMessages(ctx context.Context, in *StreamMcpMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamMcpMessagesResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &McpManager_ServiceDesc.Streams[1], McpManager_StreamMcpMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMcpMessagesRequest, StreamMcpMessagesResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpManager_StreamMcpMessagesClient = grpc.ServerStreamingClient[StreamMcpMessagesResponse]

func (c *mcpManagerClient) GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*mcp.McpParticipant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(mcp.McpParticipant)
	err := c.cc.Invoke(ctx, McpManager_GetServerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListManagers(ctx context.Context, in *workerBroker.ListManagersRequest, opts ...grpc.CallOption) (*workerBroker.ListManagersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(workerBroker.ListManagersResponse)
	err := c.cc.Invoke(ctx, McpManager_ListManagers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, McpManager_ListWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McpManagerServer is the server API for McpManager service.
// All implementations must embed UnimplementedMcpManagerServer
// for forward compatibility.
type McpManagerServer interface {
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	SendMcpMessage(*SendMcpMessageRequest, grpc.ServerStreamingServer[SendMcpMessageResponse]) error
	StreamMcpMessages(*StreamMcpMessagesRequest, grpc.ServerStreamingServer[StreamMcpMessagesResponse]) error
	GetServerInfo(context.Context, *GetServerInfoRequest) (*mcp.McpParticipant, error)
	ListManagers(context.Context, *workerBroker.ListManagersRequest) (*workerBroker.ListManagersResponse, error)
	ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error)
	mustEmbedUnimplementedMcpManagerServer()
}

// UnimplementedMcpManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMcpManagerServer struct{}

func (UnimplementedMcpManagerServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedMcpManagerServer) SendMcpMessage(*SendMcpMessageRequest, grpc.ServerStreamingServer[SendMcpMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendMcpMessage not implemented")
}
func (UnimplementedMcpManagerServer) StreamMcpMessages(*StreamMcpMessagesRequest, grpc.ServerStreamingServer[StreamMcpMessagesResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMcpMessages not implemented")
}
func (UnimplementedMcpManagerServer) GetServerInfo(context.Context, *GetServerInfoRequest) (*mcp.McpParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedMcpManagerServer) ListManagers(context.Context, *workerBroker.ListManagersRequest) (*workerBroker.ListManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagers not implemented")
}
func (UnimplementedMcpManagerServer) ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (UnimplementedMcpManagerServer) mustEmbedUnimplementedMcpManagerServer() {}
func (UnimplementedMcpManagerServer) testEmbeddedByValue()                    {}

// UnsafeMcpManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McpManagerServer will
// result in compilation errors.
type UnsafeMcpManagerServer interface {
	mustEmbedUnimplementedMcpManagerServer()
}

func RegisterMcpManagerServer(s grpc.ServiceRegistrar, srv McpManagerServer) {
	// If the following call pancis, it indicates UnimplementedMcpManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&McpManager_ServiceDesc, srv)
}

func _McpManager_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_SendMcpMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendMcpMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(McpManagerServer).SendMcpMessage(m, &grpc.GenericServerStream[SendMcpMessageRequest, SendMcpMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpManager_SendMcpMessageServer = grpc.ServerStreamingServer[SendMcpMessageResponse]

func _McpManager_StreamMcpMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMcpMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(McpManagerServer).StreamMcpMessages(m, &grpc.GenericServerStream[StreamMcpMessagesRequest, StreamMcpMessagesResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpManager_StreamMcpMessagesServer = grpc.ServerStreamingServer[StreamMcpMessagesResponse]

func _McpManager_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).GetServerInfo(ctx, req.(*GetServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workerBroker.ListManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListManagers(ctx, req.(*workerBroker.ListManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// McpManager_ServiceDesc is the grpc.ServiceDesc for McpManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McpManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.manager.McpManager",
	HandlerType: (*McpManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _McpManager_CreateSession_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _McpManager_GetServerInfo_Handler,
		},
		{
			MethodName: "ListManagers",
			Handler:    _McpManager_ListManagers_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _McpManager_ListWorkers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMcpMessage",
			Handler:       _McpManager_SendMcpMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMcpMessages",
			Handler:       _McpManager_StreamMcpMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manager.proto",
}
