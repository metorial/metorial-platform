// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: manager.proto

package manager

import (
	mcp "github.com/metorial/metorial/mcp-broker/gen/mcp-broker/mcp"
	runner "github.com/metorial/metorial/mcp-broker/gen/mcp-broker/runner"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSessionRequest_SessionType int32

const (
	CreateSessionRequest_runner CreateSessionRequest_SessionType = 0
)

// Enum value maps for CreateSessionRequest_SessionType.
var (
	CreateSessionRequest_SessionType_name = map[int32]string{
		0: "runner",
	}
	CreateSessionRequest_SessionType_value = map[string]int32{
		"runner": 0,
	}
)

func (x CreateSessionRequest_SessionType) Enum() *CreateSessionRequest_SessionType {
	p := new(CreateSessionRequest_SessionType)
	*p = x
	return p
}

func (x CreateSessionRequest_SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateSessionRequest_SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[0].Descriptor()
}

func (CreateSessionRequest_SessionType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[0]
}

func (x CreateSessionRequest_SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateSessionRequest_SessionType.Descriptor instead.
func (CreateSessionRequest_SessionType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0, 0}
}

type Launcher_LauncherType int32

const (
	Launcher_deno Launcher_LauncherType = 0
)

// Enum value maps for Launcher_LauncherType.
var (
	Launcher_LauncherType_name = map[int32]string{
		0: "deno",
	}
	Launcher_LauncherType_value = map[string]int32{
		"deno": 0,
	}
)

func (x Launcher_LauncherType) Enum() *Launcher_LauncherType {
	p := new(Launcher_LauncherType)
	*p = x
	return p
}

func (x Launcher_LauncherType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Launcher_LauncherType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[1].Descriptor()
}

func (Launcher_LauncherType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[1]
}

func (x Launcher_LauncherType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Launcher_LauncherType.Descriptor instead.
func (Launcher_LauncherType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1, 0}
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	SessionId     string                           `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type          CreateSessionRequest_SessionType `protobuf:"varint,2,opt,name=type,proto3,enum=broker.manager.CreateSessionRequest_SessionType" json:"type,omitempty"`
	Config        *SessionConfig                   `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	McpClient     *mcp.McpParticipant              `protobuf:"bytes,4,opt,name=mcp_client,json=mcpClient,proto3" json:"mcp_client,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionRequest) GetType() CreateSessionRequest_SessionType {
	if x != nil {
		return x.Type
	}
	return CreateSessionRequest_runner
}

func (x *CreateSessionRequest) GetConfig() *SessionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateSessionRequest) GetMcpClient() *mcp.McpParticipant {
	if x != nil {
		return x.McpClient
	}
	return nil
}

type Launcher struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LauncherType  Launcher_LauncherType  `protobuf:"varint,1,opt,name=launcher_type,json=launcherType,proto3,enum=broker.manager.Launcher_LauncherType" json:"launcher_type,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Launcher) Reset() {
	*x = Launcher{}
	mi := &file_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Launcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Launcher) ProtoMessage() {}

func (x *Launcher) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Launcher.ProtoReflect.Descriptor instead.
func (*Launcher) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1}
}

func (x *Launcher) GetLauncherType() Launcher_LauncherType {
	if x != nil {
		return x.LauncherType
	}
	return Launcher_deno
}

func (x *Launcher) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type RunConfigWithLauncher struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Container     *runner.RunConfigContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Launcher      *Launcher                  `protobuf:"bytes,2,opt,name=launcher,proto3" json:"launcher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfigWithLauncher) Reset() {
	*x = RunConfigWithLauncher{}
	mi := &file_manager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfigWithLauncher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfigWithLauncher) ProtoMessage() {}

func (x *RunConfigWithLauncher) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfigWithLauncher.ProtoReflect.Descriptor instead.
func (*RunConfigWithLauncher) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{2}
}

func (x *RunConfigWithLauncher) GetContainer() *runner.RunConfigContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *RunConfigWithLauncher) GetLauncher() *Launcher {
	if x != nil {
		return x.Launcher
	}
	return nil
}

type SessionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ConfigType:
	//
	//	*SessionConfig_RunConfigWithLauncher
	//	*SessionConfig_RunConfigWithContainerArguments
	ConfigType    isSessionConfig_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionConfig) Reset() {
	*x = SessionConfig{}
	mi := &file_manager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionConfig) ProtoMessage() {}

func (x *SessionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionConfig.ProtoReflect.Descriptor instead.
func (*SessionConfig) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{3}
}

func (x *SessionConfig) GetConfigType() isSessionConfig_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *SessionConfig) GetRunConfigWithLauncher() *RunConfigWithLauncher {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_RunConfigWithLauncher); ok {
			return x.RunConfigWithLauncher
		}
	}
	return nil
}

func (x *SessionConfig) GetRunConfigWithContainerArguments() *runner.RunConfig {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_RunConfigWithContainerArguments); ok {
			return x.RunConfigWithContainerArguments
		}
	}
	return nil
}

type isSessionConfig_ConfigType interface {
	isSessionConfig_ConfigType()
}

type SessionConfig_RunConfigWithLauncher struct {
	RunConfigWithLauncher *RunConfigWithLauncher `protobuf:"bytes,1,opt,name=run_config_with_launcher,json=runConfigWithLauncher,proto3,oneof"`
}

type SessionConfig_RunConfigWithContainerArguments struct {
	RunConfigWithContainerArguments *runner.RunConfig `protobuf:"bytes,2,opt,name=run_config_with_container_arguments,json=runConfigWithContainerArguments,proto3,oneof"`
}

func (*SessionConfig_RunConfigWithLauncher) isSessionConfig_ConfigType() {}

func (*SessionConfig_RunConfigWithContainerArguments) isSessionConfig_ConfigType() {}

type CreateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_manager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{4}
}

type SendMcpMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	McpMessages   []*mcp.McpMessageRaw   `protobuf:"bytes,2,rep,name=mcp_messages,json=mcpMessages,proto3" json:"mcp_messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMcpMessageRequest) Reset() {
	*x = SendMcpMessageRequest{}
	mi := &file_manager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMcpMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMcpMessageRequest) ProtoMessage() {}

func (x *SendMcpMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMcpMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMcpMessageRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{5}
}

func (x *SendMcpMessageRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendMcpMessageRequest) GetMcpMessages() []*mcp.McpMessageRaw {
	if x != nil {
		return x.McpMessages
	}
	return nil
}

type SendMcpMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMcpMessageResponse) Reset() {
	*x = SendMcpMessageResponse{}
	mi := &file_manager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMcpMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMcpMessageResponse) ProtoMessage() {}

func (x *SendMcpMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMcpMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMcpMessageResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{6}
}

type StreamMcpMessagesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMcpMessagesRequest) Reset() {
	*x = StreamMcpMessagesRequest{}
	mi := &file_manager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMcpMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMcpMessagesRequest) ProtoMessage() {}

func (x *StreamMcpMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMcpMessagesRequest.ProtoReflect.Descriptor instead.
func (*StreamMcpMessagesRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{7}
}

type StreamMcpMessagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMcpMessagesResponse) Reset() {
	*x = StreamMcpMessagesResponse{}
	mi := &file_manager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMcpMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMcpMessagesResponse) ProtoMessage() {}

func (x *StreamMcpMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMcpMessagesResponse.ProtoReflect.Descriptor instead.
func (*StreamMcpMessagesResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{8}
}

var File_manager_proto protoreflect.FileDescriptor

const file_manager_proto_rawDesc = "" +
	"\n" +
	"\rmanager.proto\x12\x0ebroker.manager\x1a\frunner.proto\x1a\tmcp.proto\"\x88\x02\n" +
	"\x14CreateSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12D\n" +
	"\x04type\x18\x02 \x01(\x0e20.broker.manager.CreateSessionRequest.SessionTypeR\x04type\x125\n" +
	"\x06config\x18\x03 \x01(\v2\x1d.broker.manager.SessionConfigR\x06config\x129\n" +
	"\n" +
	"mcp_client\x18\x04 \x01(\v2\x1a.broker.mcp.McpParticipantR\tmcpClient\"\x19\n" +
	"\vSessionType\x12\n" +
	"\n" +
	"\x06runner\x10\x00\"\x84\x01\n" +
	"\bLauncher\x12J\n" +
	"\rlauncher_type\x18\x01 \x01(\x0e2%.broker.manager.Launcher.LauncherTypeR\flauncherType\x12\x12\n" +
	"\x04code\x18\x02 \x01(\tR\x04code\"\x18\n" +
	"\fLauncherType\x12\b\n" +
	"\x04deno\x10\x00\"\x8e\x01\n" +
	"\x15RunConfigWithLauncher\x12?\n" +
	"\tcontainer\x18\x01 \x01(\v2!.broker.runner.RunConfigContainerR\tcontainer\x124\n" +
	"\blauncher\x18\x02 \x01(\v2\x18.broker.manager.LauncherR\blauncher\"\xea\x01\n" +
	"\rSessionConfig\x12`\n" +
	"\x18run_config_with_launcher\x18\x01 \x01(\v2%.broker.manager.RunConfigWithLauncherH\x00R\x15runConfigWithLauncher\x12h\n" +
	"#run_config_with_container_arguments\x18\x02 \x01(\v2\x18.broker.runner.RunConfigH\x00R\x1frunConfigWithContainerArgumentsB\r\n" +
	"\vconfig_type\"\x17\n" +
	"\x15CreateSessionResponse\"t\n" +
	"\x15SendMcpMessageRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12<\n" +
	"\fmcp_messages\x18\x02 \x03(\v2\x19.broker.mcp.McpMessageRawR\vmcpMessages\"\x18\n" +
	"\x16SendMcpMessageResponse\"\x1a\n" +
	"\x18StreamMcpMessagesRequest\"\x1b\n" +
	"\x19StreamMcpMessagesResponse2\xb9\x02\n" +
	"\n" +
	"McpManager\x12\\\n" +
	"\rCreateSession\x12$.broker.manager.CreateSessionRequest\x1a%.broker.manager.CreateSessionResponse\x12a\n" +
	"\x0eSendMcpMessage\x12%.broker.manager.SendMcpMessageRequest\x1a&.broker.manager.SendMcpMessageResponse0\x01\x12j\n" +
	"\x11StreamMcpMessages\x12(.broker.manager.StreamMcpMessagesRequest\x1a).broker.manager.StreamMcpMessagesResponse0\x01BHZFgithub.com/metorial/metorial/mcp-broker/gen/mcp-broker/manager;managerb\x06proto3"

var (
	file_manager_proto_rawDescOnce sync.Once
	file_manager_proto_rawDescData []byte
)

func file_manager_proto_rawDescGZIP() []byte {
	file_manager_proto_rawDescOnce.Do(func() {
		file_manager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_manager_proto_rawDesc), len(file_manager_proto_rawDesc)))
	})
	return file_manager_proto_rawDescData
}

var file_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_manager_proto_goTypes = []any{
	(CreateSessionRequest_SessionType)(0), // 0: broker.manager.CreateSessionRequest.SessionType
	(Launcher_LauncherType)(0),            // 1: broker.manager.Launcher.LauncherType
	(*CreateSessionRequest)(nil),          // 2: broker.manager.CreateSessionRequest
	(*Launcher)(nil),                      // 3: broker.manager.Launcher
	(*RunConfigWithLauncher)(nil),         // 4: broker.manager.RunConfigWithLauncher
	(*SessionConfig)(nil),                 // 5: broker.manager.SessionConfig
	(*CreateSessionResponse)(nil),         // 6: broker.manager.CreateSessionResponse
	(*SendMcpMessageRequest)(nil),         // 7: broker.manager.SendMcpMessageRequest
	(*SendMcpMessageResponse)(nil),        // 8: broker.manager.SendMcpMessageResponse
	(*StreamMcpMessagesRequest)(nil),      // 9: broker.manager.StreamMcpMessagesRequest
	(*StreamMcpMessagesResponse)(nil),     // 10: broker.manager.StreamMcpMessagesResponse
	(*mcp.McpParticipant)(nil),            // 11: broker.mcp.McpParticipant
	(*runner.RunConfigContainer)(nil),     // 12: broker.runner.RunConfigContainer
	(*runner.RunConfig)(nil),              // 13: broker.runner.RunConfig
	(*mcp.McpMessageRaw)(nil),             // 14: broker.mcp.McpMessageRaw
}
var file_manager_proto_depIdxs = []int32{
	0,  // 0: broker.manager.CreateSessionRequest.type:type_name -> broker.manager.CreateSessionRequest.SessionType
	5,  // 1: broker.manager.CreateSessionRequest.config:type_name -> broker.manager.SessionConfig
	11, // 2: broker.manager.CreateSessionRequest.mcp_client:type_name -> broker.mcp.McpParticipant
	1,  // 3: broker.manager.Launcher.launcher_type:type_name -> broker.manager.Launcher.LauncherType
	12, // 4: broker.manager.RunConfigWithLauncher.container:type_name -> broker.runner.RunConfigContainer
	3,  // 5: broker.manager.RunConfigWithLauncher.launcher:type_name -> broker.manager.Launcher
	4,  // 6: broker.manager.SessionConfig.run_config_with_launcher:type_name -> broker.manager.RunConfigWithLauncher
	13, // 7: broker.manager.SessionConfig.run_config_with_container_arguments:type_name -> broker.runner.RunConfig
	14, // 8: broker.manager.SendMcpMessageRequest.mcp_messages:type_name -> broker.mcp.McpMessageRaw
	2,  // 9: broker.manager.McpManager.CreateSession:input_type -> broker.manager.CreateSessionRequest
	7,  // 10: broker.manager.McpManager.SendMcpMessage:input_type -> broker.manager.SendMcpMessageRequest
	9,  // 11: broker.manager.McpManager.StreamMcpMessages:input_type -> broker.manager.StreamMcpMessagesRequest
	6,  // 12: broker.manager.McpManager.CreateSession:output_type -> broker.manager.CreateSessionResponse
	8,  // 13: broker.manager.McpManager.SendMcpMessage:output_type -> broker.manager.SendMcpMessageResponse
	10, // 14: broker.manager.McpManager.StreamMcpMessages:output_type -> broker.manager.StreamMcpMessagesResponse
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_manager_proto_init() }
func file_manager_proto_init() {
	if File_manager_proto != nil {
		return
	}
	file_manager_proto_msgTypes[3].OneofWrappers = []any{
		(*SessionConfig_RunConfigWithLauncher)(nil),
		(*SessionConfig_RunConfigWithContainerArguments)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_manager_proto_rawDesc), len(file_manager_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_manager_proto_goTypes,
		DependencyIndexes: file_manager_proto_depIdxs,
		EnumInfos:         file_manager_proto_enumTypes,
		MessageInfos:      file_manager_proto_msgTypes,
	}.Build()
	File_manager_proto = out.File
	file_manager_proto_goTypes = nil
	file_manager_proto_depIdxs = nil
}
