// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: runner.proto

package runner

import (
	context "context"
	common "github.com/metorial/metorial/mcp-broker/gen/mcp-broker/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	McpRunner_GetRunnerInfo_FullMethodName        = "/broker.runner.McpRunner/GetRunnerInfo"
	McpRunner_StreamRunnerHealth_FullMethodName   = "/broker.runner.McpRunner/StreamRunnerHealth"
	McpRunner_ListActiveRuns_FullMethodName       = "/broker.runner.McpRunner/ListActiveRuns"
	McpRunner_ListDockerImages_FullMethodName     = "/broker.runner.McpRunner/ListDockerImages"
	McpRunner_ListDockerContainers_FullMethodName = "/broker.runner.McpRunner/ListDockerContainers"
	McpRunner_StreamMcpRun_FullMethodName         = "/broker.runner.McpRunner/StreamMcpRun"
)

// McpRunnerClient is the client API for McpRunner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McpRunnerClient interface {
	GetRunnerInfo(ctx context.Context, in *RunnerInfoRequest, opts ...grpc.CallOption) (*RunnerInfoResponse, error)
	StreamRunnerHealth(ctx context.Context, in *RunnerHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunnerHealthResponse], error)
	ListActiveRuns(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ActiveRunsResponse, error)
	ListDockerImages(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*DockerImagesResponse, error)
	ListDockerContainers(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*DockerContainersResponse, error)
	StreamMcpRun(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RunRequest, RunResponse], error)
}

type mcpRunnerClient struct {
	cc grpc.ClientConnInterface
}

func NewMcpRunnerClient(cc grpc.ClientConnInterface) McpRunnerClient {
	return &mcpRunnerClient{cc}
}

func (c *mcpRunnerClient) GetRunnerInfo(ctx context.Context, in *RunnerInfoRequest, opts ...grpc.CallOption) (*RunnerInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunnerInfoResponse)
	err := c.cc.Invoke(ctx, McpRunner_GetRunnerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpRunnerClient) StreamRunnerHealth(ctx context.Context, in *RunnerHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RunnerHealthResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &McpRunner_ServiceDesc.Streams[0], McpRunner_StreamRunnerHealth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunnerHealthRequest, RunnerHealthResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpRunner_StreamRunnerHealthClient = grpc.ServerStreamingClient[RunnerHealthResponse]

func (c *mcpRunnerClient) ListActiveRuns(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*ActiveRunsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActiveRunsResponse)
	err := c.cc.Invoke(ctx, McpRunner_ListActiveRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpRunnerClient) ListDockerImages(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*DockerImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DockerImagesResponse)
	err := c.cc.Invoke(ctx, McpRunner_ListDockerImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpRunnerClient) ListDockerContainers(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*DockerContainersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DockerContainersResponse)
	err := c.cc.Invoke(ctx, McpRunner_ListDockerContainers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpRunnerClient) StreamMcpRun(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RunRequest, RunResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &McpRunner_ServiceDesc.Streams[1], McpRunner_StreamMcpRun_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunRequest, RunResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpRunner_StreamMcpRunClient = grpc.BidiStreamingClient[RunRequest, RunResponse]

// McpRunnerServer is the server API for McpRunner service.
// All implementations must embed UnimplementedMcpRunnerServer
// for forward compatibility.
type McpRunnerServer interface {
	GetRunnerInfo(context.Context, *RunnerInfoRequest) (*RunnerInfoResponse, error)
	StreamRunnerHealth(*RunnerHealthRequest, grpc.ServerStreamingServer[RunnerHealthResponse]) error
	ListActiveRuns(context.Context, *common.Empty) (*ActiveRunsResponse, error)
	ListDockerImages(context.Context, *common.Empty) (*DockerImagesResponse, error)
	ListDockerContainers(context.Context, *common.Empty) (*DockerContainersResponse, error)
	StreamMcpRun(grpc.BidiStreamingServer[RunRequest, RunResponse]) error
	mustEmbedUnimplementedMcpRunnerServer()
}

// UnimplementedMcpRunnerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMcpRunnerServer struct{}

func (UnimplementedMcpRunnerServer) GetRunnerInfo(context.Context, *RunnerInfoRequest) (*RunnerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRunnerInfo not implemented")
}
func (UnimplementedMcpRunnerServer) StreamRunnerHealth(*RunnerHealthRequest, grpc.ServerStreamingServer[RunnerHealthResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamRunnerHealth not implemented")
}
func (UnimplementedMcpRunnerServer) ListActiveRuns(context.Context, *common.Empty) (*ActiveRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveRuns not implemented")
}
func (UnimplementedMcpRunnerServer) ListDockerImages(context.Context, *common.Empty) (*DockerImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDockerImages not implemented")
}
func (UnimplementedMcpRunnerServer) ListDockerContainers(context.Context, *common.Empty) (*DockerContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDockerContainers not implemented")
}
func (UnimplementedMcpRunnerServer) StreamMcpRun(grpc.BidiStreamingServer[RunRequest, RunResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMcpRun not implemented")
}
func (UnimplementedMcpRunnerServer) mustEmbedUnimplementedMcpRunnerServer() {}
func (UnimplementedMcpRunnerServer) testEmbeddedByValue()                   {}

// UnsafeMcpRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McpRunnerServer will
// result in compilation errors.
type UnsafeMcpRunnerServer interface {
	mustEmbedUnimplementedMcpRunnerServer()
}

func RegisterMcpRunnerServer(s grpc.ServiceRegistrar, srv McpRunnerServer) {
	// If the following call pancis, it indicates UnimplementedMcpRunnerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&McpRunner_ServiceDesc, srv)
}

func _McpRunner_GetRunnerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunnerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpRunnerServer).GetRunnerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpRunner_GetRunnerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpRunnerServer).GetRunnerInfo(ctx, req.(*RunnerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpRunner_StreamRunnerHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunnerHealthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(McpRunnerServer).StreamRunnerHealth(m, &grpc.GenericServerStream[RunnerHealthRequest, RunnerHealthResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpRunner_StreamRunnerHealthServer = grpc.ServerStreamingServer[RunnerHealthResponse]

func _McpRunner_ListActiveRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpRunnerServer).ListActiveRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpRunner_ListActiveRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpRunnerServer).ListActiveRuns(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpRunner_ListDockerImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpRunnerServer).ListDockerImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpRunner_ListDockerImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpRunnerServer).ListDockerImages(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpRunner_ListDockerContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpRunnerServer).ListDockerContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpRunner_ListDockerContainers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpRunnerServer).ListDockerContainers(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpRunner_StreamMcpRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(McpRunnerServer).StreamMcpRun(&grpc.GenericServerStream[RunRequest, RunResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpRunner_StreamMcpRunServer = grpc.BidiStreamingServer[RunRequest, RunResponse]

// McpRunner_ServiceDesc is the grpc.ServiceDesc for McpRunner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McpRunner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.runner.McpRunner",
	HandlerType: (*McpRunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRunnerInfo",
			Handler:    _McpRunner_GetRunnerInfo_Handler,
		},
		{
			MethodName: "ListActiveRuns",
			Handler:    _McpRunner_ListActiveRuns_Handler,
		},
		{
			MethodName: "ListDockerImages",
			Handler:    _McpRunner_ListDockerImages_Handler,
		},
		{
			MethodName: "ListDockerContainers",
			Handler:    _McpRunner_ListDockerContainers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRunnerHealth",
			Handler:       _McpRunner_StreamRunnerHealth_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMcpRun",
			Handler:       _McpRunner_StreamMcpRun_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "runner.proto",
}
