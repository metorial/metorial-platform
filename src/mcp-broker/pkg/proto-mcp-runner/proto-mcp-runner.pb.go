// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: proto-mcp-runner.proto

package proto_mcp_runner_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunnerStatus int32

const (
	RunnerStatus_HEALTHY   RunnerStatus = 0
	RunnerStatus_UNHEALTHY RunnerStatus = 1
)

// Enum value maps for RunnerStatus.
var (
	RunnerStatus_name = map[int32]string{
		0: "HEALTHY",
		1: "UNHEALTHY",
	}
	RunnerStatus_value = map[string]int32{
		"HEALTHY":   0,
		"UNHEALTHY": 1,
	}
)

func (x RunnerStatus) Enum() *RunnerStatus {
	p := new(RunnerStatus)
	*p = x
	return p
}

func (x RunnerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunnerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mcp_runner_proto_enumTypes[0].Descriptor()
}

func (RunnerStatus) Type() protoreflect.EnumType {
	return &file_proto_mcp_runner_proto_enumTypes[0]
}

func (x RunnerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunnerStatus.Descriptor instead.
func (RunnerStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{0}
}

type RunnerAcceptingJobs int32

const (
	RunnerAcceptingJobs_ACCEPTING     RunnerAcceptingJobs = 0
	RunnerAcceptingJobs_NOT_ACCEPTING RunnerAcceptingJobs = 1
)

// Enum value maps for RunnerAcceptingJobs.
var (
	RunnerAcceptingJobs_name = map[int32]string{
		0: "ACCEPTING",
		1: "NOT_ACCEPTING",
	}
	RunnerAcceptingJobs_value = map[string]int32{
		"ACCEPTING":     0,
		"NOT_ACCEPTING": 1,
	}
)

func (x RunnerAcceptingJobs) Enum() *RunnerAcceptingJobs {
	p := new(RunnerAcceptingJobs)
	*p = x
	return p
}

func (x RunnerAcceptingJobs) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunnerAcceptingJobs) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mcp_runner_proto_enumTypes[1].Descriptor()
}

func (RunnerAcceptingJobs) Type() protoreflect.EnumType {
	return &file_proto_mcp_runner_proto_enumTypes[1]
}

func (x RunnerAcceptingJobs) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunnerAcceptingJobs.Descriptor instead.
func (RunnerAcceptingJobs) EnumDescriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{1}
}

type McpRunErrorCode int32

const (
	McpRunErrorCode_MCP_RUN_FAILED_TO_START     McpRunErrorCode = 0
	McpRunErrorCode_MCP_RUN_FAILED_TO_STOP      McpRunErrorCode = 1
	McpRunErrorCode_MCP_RUN_INVALID_MCP_MESSAGE McpRunErrorCode = 2
)

// Enum value maps for McpRunErrorCode.
var (
	McpRunErrorCode_name = map[int32]string{
		0: "MCP_RUN_FAILED_TO_START",
		1: "MCP_RUN_FAILED_TO_STOP",
		2: "MCP_RUN_INVALID_MCP_MESSAGE",
	}
	McpRunErrorCode_value = map[string]int32{
		"MCP_RUN_FAILED_TO_START":     0,
		"MCP_RUN_FAILED_TO_STOP":      1,
		"MCP_RUN_INVALID_MCP_MESSAGE": 2,
	}
)

func (x McpRunErrorCode) Enum() *McpRunErrorCode {
	p := new(McpRunErrorCode)
	*p = x
	return p
}

func (x McpRunErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (McpRunErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mcp_runner_proto_enumTypes[2].Descriptor()
}

func (McpRunErrorCode) Type() protoreflect.EnumType {
	return &file_proto_mcp_runner_proto_enumTypes[2]
}

func (x McpRunErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use McpRunErrorCode.Descriptor instead.
func (McpRunErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{2}
}

type McpOutputType int32

const (
	McpOutputType_MCP_JOB_OUTPUT_TYPE_STDOUT McpOutputType = 0
	McpOutputType_MCP_JOB_OUTPUT_TYPE_STDERR McpOutputType = 1
)

// Enum value maps for McpOutputType.
var (
	McpOutputType_name = map[int32]string{
		0: "MCP_JOB_OUTPUT_TYPE_STDOUT",
		1: "MCP_JOB_OUTPUT_TYPE_STDERR",
	}
	McpOutputType_value = map[string]int32{
		"MCP_JOB_OUTPUT_TYPE_STDOUT": 0,
		"MCP_JOB_OUTPUT_TYPE_STDERR": 1,
	}
)

func (x McpOutputType) Enum() *McpOutputType {
	p := new(McpOutputType)
	*p = x
	return p
}

func (x McpOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (McpOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_mcp_runner_proto_enumTypes[3].Descriptor()
}

func (McpOutputType) Type() protoreflect.EnumType {
	return &file_proto_mcp_runner_proto_enumTypes[3]
}

func (x McpOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use McpOutputType.Descriptor instead.
func (McpOutputType) EnumDescriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{3}
}

type RunnerInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnerInfoRequest) Reset() {
	*x = RunnerInfoRequest{}
	mi := &file_proto_mcp_runner_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerInfoRequest) ProtoMessage() {}

func (x *RunnerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerInfoRequest.ProtoReflect.Descriptor instead.
func (*RunnerInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{0}
}

type RunnerInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunnerId      string                 `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	StartTime     int64                  `protobuf:"varint,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	AcceptingRuns RunnerAcceptingJobs    `protobuf:"varint,3,opt,name=accepting_runs,json=acceptingRuns,proto3,enum=proto.RunnerAcceptingJobs" json:"accepting_runs,omitempty"`
	Status        RunnerStatus           `protobuf:"varint,4,opt,name=status,proto3,enum=proto.RunnerStatus" json:"status,omitempty"`
	ActiveRuns    uint32                 `protobuf:"varint,5,opt,name=active_runs,json=activeRuns,proto3" json:"active_runs,omitempty"`
	TotalRuns     uint64                 `protobuf:"varint,6,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnerInfoResponse) Reset() {
	*x = RunnerInfoResponse{}
	mi := &file_proto_mcp_runner_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerInfoResponse) ProtoMessage() {}

func (x *RunnerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerInfoResponse.ProtoReflect.Descriptor instead.
func (*RunnerInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{1}
}

func (x *RunnerInfoResponse) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *RunnerInfoResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RunnerInfoResponse) GetAcceptingRuns() RunnerAcceptingJobs {
	if x != nil {
		return x.AcceptingRuns
	}
	return RunnerAcceptingJobs_ACCEPTING
}

func (x *RunnerInfoResponse) GetStatus() RunnerStatus {
	if x != nil {
		return x.Status
	}
	return RunnerStatus_HEALTHY
}

func (x *RunnerInfoResponse) GetActiveRuns() uint32 {
	if x != nil {
		return x.ActiveRuns
	}
	return 0
}

func (x *RunnerInfoResponse) GetTotalRuns() uint64 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

type RunnerHealthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnerHealthRequest) Reset() {
	*x = RunnerHealthRequest{}
	mi := &file_proto_mcp_runner_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerHealthRequest) ProtoMessage() {}

func (x *RunnerHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerHealthRequest.ProtoReflect.Descriptor instead.
func (*RunnerHealthRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{2}
}

type RunnerHealthResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunnerId      string                 `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	Status        RunnerStatus           `protobuf:"varint,2,opt,name=status,proto3,enum=proto.RunnerStatus" json:"status,omitempty"`
	AcceptingRuns RunnerAcceptingJobs    `protobuf:"varint,3,opt,name=accepting_runs,json=acceptingRuns,proto3,enum=proto.RunnerAcceptingJobs" json:"accepting_runs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnerHealthResponse) Reset() {
	*x = RunnerHealthResponse{}
	mi := &file_proto_mcp_runner_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerHealthResponse) ProtoMessage() {}

func (x *RunnerHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerHealthResponse.ProtoReflect.Descriptor instead.
func (*RunnerHealthResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{3}
}

func (x *RunnerHealthResponse) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *RunnerHealthResponse) GetStatus() RunnerStatus {
	if x != nil {
		return x.Status
	}
	return RunnerStatus_HEALTHY
}

func (x *RunnerHealthResponse) GetAcceptingRuns() RunnerAcceptingJobs {
	if x != nil {
		return x.AcceptingRuns
	}
	return RunnerAcceptingJobs_ACCEPTING
}

type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_proto_mcp_runner_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{4}
}

type ActiveRunsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Runs          []*RunInfo             `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActiveRunsResponse) Reset() {
	*x = ActiveRunsResponse{}
	mi := &file_proto_mcp_runner_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveRunsResponse) ProtoMessage() {}

func (x *ActiveRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveRunsResponse.ProtoReflect.Descriptor instead.
func (*ActiveRunsResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{5}
}

func (x *ActiveRunsResponse) GetRuns() []*RunInfo {
	if x != nil {
		return x.Runs
	}
	return nil
}

type RunInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	DockerImage   string                 `protobuf:"bytes,2,opt,name=docker_image,json=dockerImage,proto3" json:"docker_image,omitempty"`
	MaxMemory     string                 `protobuf:"bytes,6,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"` // e.g., "512m" or "1g"
	MaxCpu        string                 `protobuf:"bytes,7,opt,name=max_cpu,json=maxCpu,proto3" json:"max_cpu,omitempty"`          // e.g., "1"
	StartTime     int64                  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunInfo) Reset() {
	*x = RunInfo{}
	mi := &file_proto_mcp_runner_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInfo) ProtoMessage() {}

func (x *RunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInfo.ProtoReflect.Descriptor instead.
func (*RunInfo) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{6}
}

func (x *RunInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunInfo) GetDockerImage() string {
	if x != nil {
		return x.DockerImage
	}
	return ""
}

func (x *RunInfo) GetMaxMemory() string {
	if x != nil {
		return x.MaxMemory
	}
	return ""
}

func (x *RunInfo) GetMaxCpu() string {
	if x != nil {
		return x.MaxCpu
	}
	return ""
}

func (x *RunInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RunInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type DockerImagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Images        []*DockerImageInfo     `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerImagesResponse) Reset() {
	*x = DockerImagesResponse{}
	mi := &file_proto_mcp_runner_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerImagesResponse) ProtoMessage() {}

func (x *DockerImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerImagesResponse.ProtoReflect.Descriptor instead.
func (*DockerImagesResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{7}
}

func (x *DockerImagesResponse) GetImages() []*DockerImageInfo {
	if x != nil {
		return x.Images
	}
	return nil
}

type DockerImageInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	ImageId       string                 `protobuf:"bytes,3,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	LastUsed      int64                  `protobuf:"varint,4,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"` // Unix timestamp in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerImageInfo) Reset() {
	*x = DockerImageInfo{}
	mi := &file_proto_mcp_runner_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerImageInfo) ProtoMessage() {}

func (x *DockerImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerImageInfo.ProtoReflect.Descriptor instead.
func (*DockerImageInfo) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{8}
}

func (x *DockerImageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DockerImageInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DockerImageInfo) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *DockerImageInfo) GetLastUsed() int64 {
	if x != nil {
		return x.LastUsed
	}
	return 0
}

type DockerContainersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Containers    []*DockerContainerInfo `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerContainersResponse) Reset() {
	*x = DockerContainersResponse{}
	mi := &file_proto_mcp_runner_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerContainersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerContainersResponse) ProtoMessage() {}

func (x *DockerContainersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerContainersResponse.ProtoReflect.Descriptor instead.
func (*DockerContainersResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{9}
}

func (x *DockerContainersResponse) GetContainers() []*DockerContainerInfo {
	if x != nil {
		return x.Containers
	}
	return nil
}

type DockerContainerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ImageName     string                 `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ExitCode      int32                  `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Running       bool                   `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerContainerInfo) Reset() {
	*x = DockerContainerInfo{}
	mi := &file_proto_mcp_runner_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerContainerInfo) ProtoMessage() {}

func (x *DockerContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerContainerInfo.ProtoReflect.Descriptor instead.
func (*DockerContainerInfo) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{10}
}

func (x *DockerContainerInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *DockerContainerInfo) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *DockerContainerInfo) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *DockerContainerInfo) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

type RunConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DockerImage   string                 `protobuf:"bytes,1,opt,name=docker_image,json=dockerImage,proto3" json:"docker_image,omitempty"`
	Command       string                 `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	EnvVars       map[string]string      `protobuf:"bytes,3,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Args          []string               `protobuf:"bytes,4,rep,name=args,proto3" json:"args,omitempty"`
	MaxMemory     string                 `protobuf:"bytes,5,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"` // e.g., "512m" or "1g"
	MaxCpu        string                 `protobuf:"bytes,6,opt,name=max_cpu,json=maxCpu,proto3" json:"max_cpu,omitempty"`          // e.g., "1"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfig) Reset() {
	*x = RunConfig{}
	mi := &file_proto_mcp_runner_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfig) ProtoMessage() {}

func (x *RunConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfig.ProtoReflect.Descriptor instead.
func (*RunConfig) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{11}
}

func (x *RunConfig) GetDockerImage() string {
	if x != nil {
		return x.DockerImage
	}
	return ""
}

func (x *RunConfig) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunConfig) GetEnvVars() map[string]string {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *RunConfig) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RunConfig) GetMaxMemory() string {
	if x != nil {
		return x.MaxMemory
	}
	return ""
}

func (x *RunConfig) GetMaxCpu() string {
	if x != nil {
		return x.MaxCpu
	}
	return ""
}

type McpRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to JobType:
	//
	//	*McpRunRequest_McpInit
	//	*McpRunRequest_McpMessage
	//	*McpRunRequest_McpClose
	JobType       isMcpRunRequest_JobType `protobuf_oneof:"job_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunRequest) Reset() {
	*x = McpRunRequest{}
	mi := &file_proto_mcp_runner_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunRequest) ProtoMessage() {}

func (x *McpRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunRequest.ProtoReflect.Descriptor instead.
func (*McpRunRequest) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{12}
}

func (x *McpRunRequest) GetJobType() isMcpRunRequest_JobType {
	if x != nil {
		return x.JobType
	}
	return nil
}

func (x *McpRunRequest) GetMcpInit() *McpRunRequestInit {
	if x != nil {
		if x, ok := x.JobType.(*McpRunRequest_McpInit); ok {
			return x.McpInit
		}
	}
	return nil
}

func (x *McpRunRequest) GetMcpMessage() *McpRunRequestMcpMessage {
	if x != nil {
		if x, ok := x.JobType.(*McpRunRequest_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *McpRunRequest) GetMcpClose() *McpRunRequestClose {
	if x != nil {
		if x, ok := x.JobType.(*McpRunRequest_McpClose); ok {
			return x.McpClose
		}
	}
	return nil
}

type isMcpRunRequest_JobType interface {
	isMcpRunRequest_JobType()
}

type McpRunRequest_McpInit struct {
	McpInit *McpRunRequestInit `protobuf:"bytes,1,opt,name=mcp_init,json=mcpInit,proto3,oneof"`
}

type McpRunRequest_McpMessage struct {
	McpMessage *McpRunRequestMcpMessage `protobuf:"bytes,2,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type McpRunRequest_McpClose struct {
	McpClose *McpRunRequestClose `protobuf:"bytes,3,opt,name=mcp_close,json=mcpClose,proto3,oneof"`
}

func (*McpRunRequest_McpInit) isMcpRunRequest_JobType() {}

func (*McpRunRequest_McpMessage) isMcpRunRequest_JobType() {}

func (*McpRunRequest_McpClose) isMcpRunRequest_JobType() {}

type McpRunResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to JobType:
	//
	//	*McpRunResponse_McpMessage
	//	*McpRunResponse_McpInit
	//	*McpRunResponse_McpOutput
	//	*McpRunResponse_McpError
	//	*McpRunResponse_McpClose
	JobType       isMcpRunResponse_JobType `protobuf_oneof:"job_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunResponse) Reset() {
	*x = McpRunResponse{}
	mi := &file_proto_mcp_runner_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunResponse) ProtoMessage() {}

func (x *McpRunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunResponse.ProtoReflect.Descriptor instead.
func (*McpRunResponse) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{13}
}

func (x *McpRunResponse) GetJobType() isMcpRunResponse_JobType {
	if x != nil {
		return x.JobType
	}
	return nil
}

func (x *McpRunResponse) GetMcpMessage() *McpRunResponseMcpMessage {
	if x != nil {
		if x, ok := x.JobType.(*McpRunResponse_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *McpRunResponse) GetMcpInit() *McpRunResponseInit {
	if x != nil {
		if x, ok := x.JobType.(*McpRunResponse_McpInit); ok {
			return x.McpInit
		}
	}
	return nil
}

func (x *McpRunResponse) GetMcpOutput() *McpRunResponseOutput {
	if x != nil {
		if x, ok := x.JobType.(*McpRunResponse_McpOutput); ok {
			return x.McpOutput
		}
	}
	return nil
}

func (x *McpRunResponse) GetMcpError() *McpRunResponseError {
	if x != nil {
		if x, ok := x.JobType.(*McpRunResponse_McpError); ok {
			return x.McpError
		}
	}
	return nil
}

func (x *McpRunResponse) GetMcpClose() *McpRunResponseClose {
	if x != nil {
		if x, ok := x.JobType.(*McpRunResponse_McpClose); ok {
			return x.McpClose
		}
	}
	return nil
}

type isMcpRunResponse_JobType interface {
	isMcpRunResponse_JobType()
}

type McpRunResponse_McpMessage struct {
	McpMessage *McpRunResponseMcpMessage `protobuf:"bytes,1,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type McpRunResponse_McpInit struct {
	McpInit *McpRunResponseInit `protobuf:"bytes,2,opt,name=mcp_init,json=mcpInit,proto3,oneof"`
}

type McpRunResponse_McpOutput struct {
	McpOutput *McpRunResponseOutput `protobuf:"bytes,3,opt,name=mcp_output,json=mcpOutput,proto3,oneof"`
}

type McpRunResponse_McpError struct {
	McpError *McpRunResponseError `protobuf:"bytes,4,opt,name=mcp_error,json=mcpError,proto3,oneof"`
}

type McpRunResponse_McpClose struct {
	McpClose *McpRunResponseClose `protobuf:"bytes,5,opt,name=mcp_close,json=mcpClose,proto3,oneof"`
}

func (*McpRunResponse_McpMessage) isMcpRunResponse_JobType() {}

func (*McpRunResponse_McpInit) isMcpRunResponse_JobType() {}

func (*McpRunResponse_McpOutput) isMcpRunResponse_JobType() {}

func (*McpRunResponse_McpError) isMcpRunResponse_JobType() {}

func (*McpRunResponse_McpClose) isMcpRunResponse_JobType() {}

type McpRunRequestInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunConfig     *RunConfig             `protobuf:"bytes,1,opt,name=run_config,json=runConfig,proto3" json:"run_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunRequestInit) Reset() {
	*x = McpRunRequestInit{}
	mi := &file_proto_mcp_runner_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunRequestInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunRequestInit) ProtoMessage() {}

func (x *McpRunRequestInit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunRequestInit.ProtoReflect.Descriptor instead.
func (*McpRunRequestInit) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{14}
}

func (x *McpRunRequestInit) GetRunConfig() *RunConfig {
	if x != nil {
		return x.RunConfig
	}
	return nil
}

type McpRunResponseInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"` // Unique identifier for the run
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunResponseInit) Reset() {
	*x = McpRunResponseInit{}
	mi := &file_proto_mcp_runner_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunResponseInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunResponseInit) ProtoMessage() {}

func (x *McpRunResponseInit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunResponseInit.ProtoReflect.Descriptor instead.
func (*McpRunResponseInit) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{15}
}

func (x *McpRunResponseInit) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

type McpRunRequestMcpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunRequestMcpMessage) Reset() {
	*x = McpRunRequestMcpMessage{}
	mi := &file_proto_mcp_runner_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunRequestMcpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunRequestMcpMessage) ProtoMessage() {}

func (x *McpRunRequestMcpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunRequestMcpMessage.ProtoReflect.Descriptor instead.
func (*McpRunRequestMcpMessage) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{16}
}

func (x *McpRunRequestMcpMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type McpRunResponseMcpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunResponseMcpMessage) Reset() {
	*x = McpRunResponseMcpMessage{}
	mi := &file_proto_mcp_runner_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunResponseMcpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunResponseMcpMessage) ProtoMessage() {}

func (x *McpRunResponseMcpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunResponseMcpMessage.ProtoReflect.Descriptor instead.
func (*McpRunResponseMcpMessage) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{17}
}

func (x *McpRunResponseMcpMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type McpRunResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorMessage  string                 `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorCode     McpRunErrorCode        `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=proto.McpRunErrorCode" json:"error_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunResponseError) Reset() {
	*x = McpRunResponseError{}
	mi := &file_proto_mcp_runner_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunResponseError) ProtoMessage() {}

func (x *McpRunResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunResponseError.ProtoReflect.Descriptor instead.
func (*McpRunResponseError) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{18}
}

func (x *McpRunResponseError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *McpRunResponseError) GetErrorCode() McpRunErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return McpRunErrorCode_MCP_RUN_FAILED_TO_START
}

type McpRunRequestClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunRequestClose) Reset() {
	*x = McpRunRequestClose{}
	mi := &file_proto_mcp_runner_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunRequestClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunRequestClose) ProtoMessage() {}

func (x *McpRunRequestClose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunRequestClose.ProtoReflect.Descriptor instead.
func (*McpRunRequestClose) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{19}
}

type McpRunResponseClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunResponseClose) Reset() {
	*x = McpRunResponseClose{}
	mi := &file_proto_mcp_runner_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunResponseClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunResponseClose) ProtoMessage() {}

func (x *McpRunResponseClose) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunResponseClose.ProtoReflect.Descriptor instead.
func (*McpRunResponseClose) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{20}
}

type McpRunResponseOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OutputType    McpOutputType          `protobuf:"varint,1,opt,name=output_type,json=outputType,proto3,enum=proto.McpOutputType" json:"output_type,omitempty"`
	Lines         []string               `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpRunResponseOutput) Reset() {
	*x = McpRunResponseOutput{}
	mi := &file_proto_mcp_runner_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpRunResponseOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpRunResponseOutput) ProtoMessage() {}

func (x *McpRunResponseOutput) ProtoReflect() protoreflect.Message {
	mi := &file_proto_mcp_runner_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpRunResponseOutput.ProtoReflect.Descriptor instead.
func (*McpRunResponseOutput) Descriptor() ([]byte, []int) {
	return file_proto_mcp_runner_proto_rawDescGZIP(), []int{21}
}

func (x *McpRunResponseOutput) GetOutputType() McpOutputType {
	if x != nil {
		return x.OutputType
	}
	return McpOutputType_MCP_JOB_OUTPUT_TYPE_STDOUT
}

func (x *McpRunResponseOutput) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

var File_proto_mcp_runner_proto protoreflect.FileDescriptor

const file_proto_mcp_runner_proto_rawDesc = "" +
	"\n" +
	"\x16proto-mcp-runner.proto\x12\x05proto\"\x13\n" +
	"\x11RunnerInfoRequest\"\x80\x02\n" +
	"\x12RunnerInfoResponse\x12\x1b\n" +
	"\trunner_id\x18\x01 \x01(\tR\brunnerId\x12\x1d\n" +
	"\n" +
	"start_time\x18\x02 \x01(\x03R\tstartTime\x12A\n" +
	"\x0eaccepting_runs\x18\x03 \x01(\x0e2\x1a.proto.RunnerAcceptingJobsR\racceptingRuns\x12+\n" +
	"\x06status\x18\x04 \x01(\x0e2\x13.proto.RunnerStatusR\x06status\x12\x1f\n" +
	"\vactive_runs\x18\x05 \x01(\rR\n" +
	"activeRuns\x12\x1d\n" +
	"\n" +
	"total_runs\x18\x06 \x01(\x04R\ttotalRuns\"\x15\n" +
	"\x13RunnerHealthRequest\"\xa3\x01\n" +
	"\x14RunnerHealthResponse\x12\x1b\n" +
	"\trunner_id\x18\x01 \x01(\tR\brunnerId\x12+\n" +
	"\x06status\x18\x02 \x01(\x0e2\x13.proto.RunnerStatusR\x06status\x12A\n" +
	"\x0eaccepting_runs\x18\x03 \x01(\x0e2\x1a.proto.RunnerAcceptingJobsR\racceptingRuns\"\a\n" +
	"\x05Empty\"8\n" +
	"\x12ActiveRunsResponse\x12\"\n" +
	"\x04runs\x18\x01 \x03(\v2\x0e.proto.RunInfoR\x04runs\"\xb5\x01\n" +
	"\aRunInfo\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12!\n" +
	"\fdocker_image\x18\x02 \x01(\tR\vdockerImage\x12\x1d\n" +
	"\n" +
	"max_memory\x18\x06 \x01(\tR\tmaxMemory\x12\x17\n" +
	"\amax_cpu\x18\a \x01(\tR\x06maxCpu\x12\x1d\n" +
	"\n" +
	"start_time\x18\x03 \x01(\x03R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x04 \x01(\x03R\aendTime\"F\n" +
	"\x14DockerImagesResponse\x12.\n" +
	"\x06images\x18\x01 \x03(\v2\x16.proto.DockerImageInfoR\x06images\"o\n" +
	"\x0fDockerImageInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03tag\x18\x02 \x01(\tR\x03tag\x12\x19\n" +
	"\bimage_id\x18\x03 \x01(\tR\aimageId\x12\x1b\n" +
	"\tlast_used\x18\x04 \x01(\x03R\blastUsed\"V\n" +
	"\x18DockerContainersResponse\x12:\n" +
	"\n" +
	"containers\x18\x01 \x03(\v2\x1a.proto.DockerContainerInfoR\n" +
	"containers\"\x8e\x01\n" +
	"\x13DockerContainerInfo\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1d\n" +
	"\n" +
	"image_name\x18\x02 \x01(\tR\timageName\x12\x1b\n" +
	"\texit_code\x18\x03 \x01(\x05R\bexitCode\x12\x18\n" +
	"\arunning\x18\x04 \x01(\bR\arunning\"\x8a\x02\n" +
	"\tRunConfig\x12!\n" +
	"\fdocker_image\x18\x01 \x01(\tR\vdockerImage\x12\x18\n" +
	"\acommand\x18\x02 \x01(\tR\acommand\x128\n" +
	"\benv_vars\x18\x03 \x03(\v2\x1d.proto.RunConfig.EnvVarsEntryR\aenvVars\x12\x12\n" +
	"\x04args\x18\x04 \x03(\tR\x04args\x12\x1d\n" +
	"\n" +
	"max_memory\x18\x05 \x01(\tR\tmaxMemory\x12\x17\n" +
	"\amax_cpu\x18\x06 \x01(\tR\x06maxCpu\x1a:\n" +
	"\fEnvVarsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x01\n" +
	"\rMcpRunRequest\x125\n" +
	"\bmcp_init\x18\x01 \x01(\v2\x18.proto.McpRunRequestInitH\x00R\amcpInit\x12A\n" +
	"\vmcp_message\x18\x02 \x01(\v2\x1e.proto.McpRunRequestMcpMessageH\x00R\n" +
	"mcpMessage\x128\n" +
	"\tmcp_close\x18\x03 \x01(\v2\x19.proto.McpRunRequestCloseH\x00R\bmcpCloseB\n" +
	"\n" +
	"\bjob_type\"\xcc\x02\n" +
	"\x0eMcpRunResponse\x12B\n" +
	"\vmcp_message\x18\x01 \x01(\v2\x1f.proto.McpRunResponseMcpMessageH\x00R\n" +
	"mcpMessage\x126\n" +
	"\bmcp_init\x18\x02 \x01(\v2\x19.proto.McpRunResponseInitH\x00R\amcpInit\x12<\n" +
	"\n" +
	"mcp_output\x18\x03 \x01(\v2\x1b.proto.McpRunResponseOutputH\x00R\tmcpOutput\x129\n" +
	"\tmcp_error\x18\x04 \x01(\v2\x1a.proto.McpRunResponseErrorH\x00R\bmcpError\x129\n" +
	"\tmcp_close\x18\x05 \x01(\v2\x1a.proto.McpRunResponseCloseH\x00R\bmcpCloseB\n" +
	"\n" +
	"\bjob_type\"D\n" +
	"\x11McpRunRequestInit\x12/\n" +
	"\n" +
	"run_config\x18\x01 \x01(\v2\x10.proto.RunConfigR\trunConfig\"+\n" +
	"\x12McpRunResponseInit\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\"3\n" +
	"\x17McpRunRequestMcpMessage\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"4\n" +
	"\x18McpRunResponseMcpMessage\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"q\n" +
	"\x13McpRunResponseError\x12#\n" +
	"\rerror_message\x18\x01 \x01(\tR\ferrorMessage\x125\n" +
	"\n" +
	"error_code\x18\x02 \x01(\x0e2\x16.proto.McpRunErrorCodeR\terrorCode\"\x14\n" +
	"\x12McpRunRequestClose\"\x15\n" +
	"\x13McpRunResponseClose\"c\n" +
	"\x14McpRunResponseOutput\x125\n" +
	"\voutput_type\x18\x01 \x01(\x0e2\x14.proto.McpOutputTypeR\n" +
	"outputType\x12\x14\n" +
	"\x05lines\x18\x02 \x03(\tR\x05lines**\n" +
	"\fRunnerStatus\x12\v\n" +
	"\aHEALTHY\x10\x00\x12\r\n" +
	"\tUNHEALTHY\x10\x01*7\n" +
	"\x13RunnerAcceptingJobs\x12\r\n" +
	"\tACCEPTING\x10\x00\x12\x11\n" +
	"\rNOT_ACCEPTING\x10\x01*k\n" +
	"\x0fMcpRunErrorCode\x12\x1b\n" +
	"\x17MCP_RUN_FAILED_TO_START\x10\x00\x12\x1a\n" +
	"\x16MCP_RUN_FAILED_TO_STOP\x10\x01\x12\x1f\n" +
	"\x1bMCP_RUN_INVALID_MCP_MESSAGE\x10\x02*O\n" +
	"\rMcpOutputType\x12\x1e\n" +
	"\x1aMCP_JOB_OUTPUT_TYPE_STDOUT\x10\x00\x12\x1e\n" +
	"\x1aMCP_JOB_OUTPUT_TYPE_STDERR\x10\x012\xa4\x03\n" +
	"\tMcpRunner\x12D\n" +
	"\rGetRunnerInfo\x12\x18.proto.RunnerInfoRequest\x1a\x19.proto.RunnerInfoResponse\x12O\n" +
	"\x12StreamRunnerHealth\x12\x1a.proto.RunnerHealthRequest\x1a\x1b.proto.RunnerHealthResponse0\x01\x129\n" +
	"\x0eListActiveRuns\x12\f.proto.Empty\x1a\x19.proto.ActiveRunsResponse\x12=\n" +
	"\x10ListDockerImages\x12\f.proto.Empty\x1a\x1b.proto.DockerImagesResponse\x12E\n" +
	"\x14ListDockerContainers\x12\f.proto.Empty\x1a\x1f.proto.DockerContainersResponse\x12?\n" +
	"\fStreamMcpRun\x12\x14.proto.McpRunRequest\x1a\x15.proto.McpRunResponse(\x010\x01B\x18Z\x16proto-mcp-runner.protob\x06proto3"

var (
	file_proto_mcp_runner_proto_rawDescOnce sync.Once
	file_proto_mcp_runner_proto_rawDescData []byte
)

func file_proto_mcp_runner_proto_rawDescGZIP() []byte {
	file_proto_mcp_runner_proto_rawDescOnce.Do(func() {
		file_proto_mcp_runner_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_mcp_runner_proto_rawDesc), len(file_proto_mcp_runner_proto_rawDesc)))
	})
	return file_proto_mcp_runner_proto_rawDescData
}

var file_proto_mcp_runner_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_mcp_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_proto_mcp_runner_proto_goTypes = []any{
	(RunnerStatus)(0),                // 0: proto.RunnerStatus
	(RunnerAcceptingJobs)(0),         // 1: proto.RunnerAcceptingJobs
	(McpRunErrorCode)(0),             // 2: proto.McpRunErrorCode
	(McpOutputType)(0),               // 3: proto.McpOutputType
	(*RunnerInfoRequest)(nil),        // 4: proto.RunnerInfoRequest
	(*RunnerInfoResponse)(nil),       // 5: proto.RunnerInfoResponse
	(*RunnerHealthRequest)(nil),      // 6: proto.RunnerHealthRequest
	(*RunnerHealthResponse)(nil),     // 7: proto.RunnerHealthResponse
	(*Empty)(nil),                    // 8: proto.Empty
	(*ActiveRunsResponse)(nil),       // 9: proto.ActiveRunsResponse
	(*RunInfo)(nil),                  // 10: proto.RunInfo
	(*DockerImagesResponse)(nil),     // 11: proto.DockerImagesResponse
	(*DockerImageInfo)(nil),          // 12: proto.DockerImageInfo
	(*DockerContainersResponse)(nil), // 13: proto.DockerContainersResponse
	(*DockerContainerInfo)(nil),      // 14: proto.DockerContainerInfo
	(*RunConfig)(nil),                // 15: proto.RunConfig
	(*McpRunRequest)(nil),            // 16: proto.McpRunRequest
	(*McpRunResponse)(nil),           // 17: proto.McpRunResponse
	(*McpRunRequestInit)(nil),        // 18: proto.McpRunRequestInit
	(*McpRunResponseInit)(nil),       // 19: proto.McpRunResponseInit
	(*McpRunRequestMcpMessage)(nil),  // 20: proto.McpRunRequestMcpMessage
	(*McpRunResponseMcpMessage)(nil), // 21: proto.McpRunResponseMcpMessage
	(*McpRunResponseError)(nil),      // 22: proto.McpRunResponseError
	(*McpRunRequestClose)(nil),       // 23: proto.McpRunRequestClose
	(*McpRunResponseClose)(nil),      // 24: proto.McpRunResponseClose
	(*McpRunResponseOutput)(nil),     // 25: proto.McpRunResponseOutput
	nil,                              // 26: proto.RunConfig.EnvVarsEntry
}
var file_proto_mcp_runner_proto_depIdxs = []int32{
	1,  // 0: proto.RunnerInfoResponse.accepting_runs:type_name -> proto.RunnerAcceptingJobs
	0,  // 1: proto.RunnerInfoResponse.status:type_name -> proto.RunnerStatus
	0,  // 2: proto.RunnerHealthResponse.status:type_name -> proto.RunnerStatus
	1,  // 3: proto.RunnerHealthResponse.accepting_runs:type_name -> proto.RunnerAcceptingJobs
	10, // 4: proto.ActiveRunsResponse.runs:type_name -> proto.RunInfo
	12, // 5: proto.DockerImagesResponse.images:type_name -> proto.DockerImageInfo
	14, // 6: proto.DockerContainersResponse.containers:type_name -> proto.DockerContainerInfo
	26, // 7: proto.RunConfig.env_vars:type_name -> proto.RunConfig.EnvVarsEntry
	18, // 8: proto.McpRunRequest.mcp_init:type_name -> proto.McpRunRequestInit
	20, // 9: proto.McpRunRequest.mcp_message:type_name -> proto.McpRunRequestMcpMessage
	23, // 10: proto.McpRunRequest.mcp_close:type_name -> proto.McpRunRequestClose
	21, // 11: proto.McpRunResponse.mcp_message:type_name -> proto.McpRunResponseMcpMessage
	19, // 12: proto.McpRunResponse.mcp_init:type_name -> proto.McpRunResponseInit
	25, // 13: proto.McpRunResponse.mcp_output:type_name -> proto.McpRunResponseOutput
	22, // 14: proto.McpRunResponse.mcp_error:type_name -> proto.McpRunResponseError
	24, // 15: proto.McpRunResponse.mcp_close:type_name -> proto.McpRunResponseClose
	15, // 16: proto.McpRunRequestInit.run_config:type_name -> proto.RunConfig
	2,  // 17: proto.McpRunResponseError.error_code:type_name -> proto.McpRunErrorCode
	3,  // 18: proto.McpRunResponseOutput.output_type:type_name -> proto.McpOutputType
	4,  // 19: proto.McpRunner.GetRunnerInfo:input_type -> proto.RunnerInfoRequest
	6,  // 20: proto.McpRunner.StreamRunnerHealth:input_type -> proto.RunnerHealthRequest
	8,  // 21: proto.McpRunner.ListActiveRuns:input_type -> proto.Empty
	8,  // 22: proto.McpRunner.ListDockerImages:input_type -> proto.Empty
	8,  // 23: proto.McpRunner.ListDockerContainers:input_type -> proto.Empty
	16, // 24: proto.McpRunner.StreamMcpRun:input_type -> proto.McpRunRequest
	5,  // 25: proto.McpRunner.GetRunnerInfo:output_type -> proto.RunnerInfoResponse
	7,  // 26: proto.McpRunner.StreamRunnerHealth:output_type -> proto.RunnerHealthResponse
	9,  // 27: proto.McpRunner.ListActiveRuns:output_type -> proto.ActiveRunsResponse
	11, // 28: proto.McpRunner.ListDockerImages:output_type -> proto.DockerImagesResponse
	13, // 29: proto.McpRunner.ListDockerContainers:output_type -> proto.DockerContainersResponse
	17, // 30: proto.McpRunner.StreamMcpRun:output_type -> proto.McpRunResponse
	25, // [25:31] is the sub-list for method output_type
	19, // [19:25] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_proto_mcp_runner_proto_init() }
func file_proto_mcp_runner_proto_init() {
	if File_proto_mcp_runner_proto != nil {
		return
	}
	file_proto_mcp_runner_proto_msgTypes[12].OneofWrappers = []any{
		(*McpRunRequest_McpInit)(nil),
		(*McpRunRequest_McpMessage)(nil),
		(*McpRunRequest_McpClose)(nil),
	}
	file_proto_mcp_runner_proto_msgTypes[13].OneofWrappers = []any{
		(*McpRunResponse_McpMessage)(nil),
		(*McpRunResponse_McpInit)(nil),
		(*McpRunResponse_McpOutput)(nil),
		(*McpRunResponse_McpError)(nil),
		(*McpRunResponse_McpClose)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_mcp_runner_proto_rawDesc), len(file_proto_mcp_runner_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_mcp_runner_proto_goTypes,
		DependencyIndexes: file_proto_mcp_runner_proto_depIdxs,
		EnumInfos:         file_proto_mcp_runner_proto_enumTypes,
		MessageInfos:      file_proto_mcp_runner_proto_msgTypes,
	}.Build()
	File_proto_mcp_runner_proto = out.File
	file_proto_mcp_runner_proto_goTypes = nil
	file_proto_mcp_runner_proto_depIdxs = nil
}
