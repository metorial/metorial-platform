// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto-mcp-manager.proto

package proto_mcp_manager_proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	McpManagerForWorker_ListManagers_FullMethodName   = "/proto.McpManagerForWorker/ListManagers"
	McpManagerForWorker_RegisterWorker_FullMethodName = "/proto.McpManagerForWorker/RegisterWorker"
)

// McpManagerForWorkerClient is the client API for McpManagerForWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McpManagerForWorkerClient interface {
	ListManagers(ctx context.Context, in *ListManagersRequest, opts ...grpc.CallOption) (*ListManagersResponse, error)
	RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error)
}

type mcpManagerForWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewMcpManagerForWorkerClient(cc grpc.ClientConnInterface) McpManagerForWorkerClient {
	return &mcpManagerForWorkerClient{cc}
}

func (c *mcpManagerForWorkerClient) ListManagers(ctx context.Context, in *ListManagersRequest, opts ...grpc.CallOption) (*ListManagersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListManagersResponse)
	err := c.cc.Invoke(ctx, McpManagerForWorker_ListManagers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerForWorkerClient) RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWorkerResponse)
	err := c.cc.Invoke(ctx, McpManagerForWorker_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McpManagerForWorkerServer is the server API for McpManagerForWorker service.
// All implementations must embed UnimplementedMcpManagerForWorkerServer
// for forward compatibility.
type McpManagerForWorkerServer interface {
	ListManagers(context.Context, *ListManagersRequest) (*ListManagersResponse, error)
	RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error)
	mustEmbedUnimplementedMcpManagerForWorkerServer()
}

// UnimplementedMcpManagerForWorkerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMcpManagerForWorkerServer struct{}

func (UnimplementedMcpManagerForWorkerServer) ListManagers(context.Context, *ListManagersRequest) (*ListManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagers not implemented")
}
func (UnimplementedMcpManagerForWorkerServer) RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedMcpManagerForWorkerServer) mustEmbedUnimplementedMcpManagerForWorkerServer() {}
func (UnimplementedMcpManagerForWorkerServer) testEmbeddedByValue()                             {}

// UnsafeMcpManagerForWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McpManagerForWorkerServer will
// result in compilation errors.
type UnsafeMcpManagerForWorkerServer interface {
	mustEmbedUnimplementedMcpManagerForWorkerServer()
}

func RegisterMcpManagerForWorkerServer(s grpc.ServiceRegistrar, srv McpManagerForWorkerServer) {
	// If the following call pancis, it indicates UnimplementedMcpManagerForWorkerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&McpManagerForWorker_ServiceDesc, srv)
}

func _McpManagerForWorker_ListManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerForWorkerServer).ListManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManagerForWorker_ListManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerForWorkerServer).ListManagers(ctx, req.(*ListManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManagerForWorker_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerForWorkerServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManagerForWorker_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerForWorkerServer).RegisterWorker(ctx, req.(*RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// McpManagerForWorker_ServiceDesc is the grpc.ServiceDesc for McpManagerForWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McpManagerForWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.McpManagerForWorker",
	HandlerType: (*McpManagerForWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListManagers",
			Handler:    _McpManagerForWorker_ListManagers_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _McpManagerForWorker_RegisterWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto-mcp-manager.proto",
}

// McpManagerClient is the client API for McpManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McpManagerClient interface {
}

type mcpManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMcpManagerClient(cc grpc.ClientConnInterface) McpManagerClient {
	return &mcpManagerClient{cc}
}

// McpManagerServer is the server API for McpManager service.
// All implementations must embed UnimplementedMcpManagerServer
// for forward compatibility.
type McpManagerServer interface {
	mustEmbedUnimplementedMcpManagerServer()
}

// UnimplementedMcpManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMcpManagerServer struct{}

func (UnimplementedMcpManagerServer) mustEmbedUnimplementedMcpManagerServer() {}
func (UnimplementedMcpManagerServer) testEmbeddedByValue()                    {}

// UnsafeMcpManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McpManagerServer will
// result in compilation errors.
type UnsafeMcpManagerServer interface {
	mustEmbedUnimplementedMcpManagerServer()
}

func RegisterMcpManagerServer(s grpc.ServiceRegistrar, srv McpManagerServer) {
	// If the following call pancis, it indicates UnimplementedMcpManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&McpManager_ServiceDesc, srv)
}

// McpManager_ServiceDesc is the grpc.ServiceDesc for McpManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McpManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.McpManager",
	HandlerType: (*McpManagerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "proto-mcp-manager.proto",
}
