// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: rpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CodeBucket_CreateBucket_FullMethodName        = "/rpc.rpc.CodeBucket/CreateBucket"
	CodeBucket_CloneBucket_FullMethodName         = "/rpc.rpc.CodeBucket/CloneBucket"
	CodeBucket_GetBucketToken_FullMethodName      = "/rpc.rpc.CodeBucket/GetBucketToken"
	CodeBucket_GetBucketFile_FullMethodName       = "/rpc.rpc.CodeBucket/GetBucketFile"
	CodeBucket_GetBucketFiles_FullMethodName      = "/rpc.rpc.CodeBucket/GetBucketFiles"
	CodeBucket_GetBucketFilesAsZip_FullMethodName = "/rpc.rpc.CodeBucket/GetBucketFilesAsZip"
)

// CodeBucketClient is the client API for CodeBucket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodeBucketClient interface {
	CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error)
	CloneBucket(ctx context.Context, in *CloneBucketRequest, opts ...grpc.CallOption) (*CloneBucketResponse, error)
	GetBucketToken(ctx context.Context, in *GetBucketTokenRequest, opts ...grpc.CallOption) (*GetBucketTokenResponse, error)
	GetBucketFile(ctx context.Context, in *GetBucketFileRequest, opts ...grpc.CallOption) (*GetBucketFileResponse, error)
	GetBucketFiles(ctx context.Context, in *GetBucketFilesRequest, opts ...grpc.CallOption) (*GetBucketFilesResponse, error)
	GetBucketFilesAsZip(ctx context.Context, in *GetBucketFilesAsZipRequest, opts ...grpc.CallOption) (*GetBucketFilesAsZipResponse, error)
}

type codeBucketClient struct {
	cc grpc.ClientConnInterface
}

func NewCodeBucketClient(cc grpc.ClientConnInterface) CodeBucketClient {
	return &codeBucketClient{cc}
}

func (c *codeBucketClient) CreateBucket(ctx context.Context, in *CreateBucketRequest, opts ...grpc.CallOption) (*CreateBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateBucketResponse)
	err := c.cc.Invoke(ctx, CodeBucket_CreateBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeBucketClient) CloneBucket(ctx context.Context, in *CloneBucketRequest, opts ...grpc.CallOption) (*CloneBucketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloneBucketResponse)
	err := c.cc.Invoke(ctx, CodeBucket_CloneBucket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeBucketClient) GetBucketToken(ctx context.Context, in *GetBucketTokenRequest, opts ...grpc.CallOption) (*GetBucketTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBucketTokenResponse)
	err := c.cc.Invoke(ctx, CodeBucket_GetBucketToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeBucketClient) GetBucketFile(ctx context.Context, in *GetBucketFileRequest, opts ...grpc.CallOption) (*GetBucketFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBucketFileResponse)
	err := c.cc.Invoke(ctx, CodeBucket_GetBucketFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeBucketClient) GetBucketFiles(ctx context.Context, in *GetBucketFilesRequest, opts ...grpc.CallOption) (*GetBucketFilesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBucketFilesResponse)
	err := c.cc.Invoke(ctx, CodeBucket_GetBucketFiles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codeBucketClient) GetBucketFilesAsZip(ctx context.Context, in *GetBucketFilesAsZipRequest, opts ...grpc.CallOption) (*GetBucketFilesAsZipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBucketFilesAsZipResponse)
	err := c.cc.Invoke(ctx, CodeBucket_GetBucketFilesAsZip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodeBucketServer is the server API for CodeBucket service.
// All implementations must embed UnimplementedCodeBucketServer
// for forward compatibility.
type CodeBucketServer interface {
	CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error)
	CloneBucket(context.Context, *CloneBucketRequest) (*CloneBucketResponse, error)
	GetBucketToken(context.Context, *GetBucketTokenRequest) (*GetBucketTokenResponse, error)
	GetBucketFile(context.Context, *GetBucketFileRequest) (*GetBucketFileResponse, error)
	GetBucketFiles(context.Context, *GetBucketFilesRequest) (*GetBucketFilesResponse, error)
	GetBucketFilesAsZip(context.Context, *GetBucketFilesAsZipRequest) (*GetBucketFilesAsZipResponse, error)
	mustEmbedUnimplementedCodeBucketServer()
}

// UnimplementedCodeBucketServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodeBucketServer struct{}

func (UnimplementedCodeBucketServer) CreateBucket(context.Context, *CreateBucketRequest) (*CreateBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBucket not implemented")
}
func (UnimplementedCodeBucketServer) CloneBucket(context.Context, *CloneBucketRequest) (*CloneBucketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneBucket not implemented")
}
func (UnimplementedCodeBucketServer) GetBucketToken(context.Context, *GetBucketTokenRequest) (*GetBucketTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketToken not implemented")
}
func (UnimplementedCodeBucketServer) GetBucketFile(context.Context, *GetBucketFileRequest) (*GetBucketFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketFile not implemented")
}
func (UnimplementedCodeBucketServer) GetBucketFiles(context.Context, *GetBucketFilesRequest) (*GetBucketFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketFiles not implemented")
}
func (UnimplementedCodeBucketServer) GetBucketFilesAsZip(context.Context, *GetBucketFilesAsZipRequest) (*GetBucketFilesAsZipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketFilesAsZip not implemented")
}
func (UnimplementedCodeBucketServer) mustEmbedUnimplementedCodeBucketServer() {}
func (UnimplementedCodeBucketServer) testEmbeddedByValue()                    {}

// UnsafeCodeBucketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodeBucketServer will
// result in compilation errors.
type UnsafeCodeBucketServer interface {
	mustEmbedUnimplementedCodeBucketServer()
}

func RegisterCodeBucketServer(s grpc.ServiceRegistrar, srv CodeBucketServer) {
	// If the following call pancis, it indicates UnimplementedCodeBucketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CodeBucket_ServiceDesc, srv)
}

func _CodeBucket_CreateBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeBucketServer).CreateBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeBucket_CreateBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeBucketServer).CreateBucket(ctx, req.(*CreateBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeBucket_CloneBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneBucketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeBucketServer).CloneBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeBucket_CloneBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeBucketServer).CloneBucket(ctx, req.(*CloneBucketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeBucket_GetBucketToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeBucketServer).GetBucketToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeBucket_GetBucketToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeBucketServer).GetBucketToken(ctx, req.(*GetBucketTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeBucket_GetBucketFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeBucketServer).GetBucketFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeBucket_GetBucketFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeBucketServer).GetBucketFile(ctx, req.(*GetBucketFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeBucket_GetBucketFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeBucketServer).GetBucketFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeBucket_GetBucketFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeBucketServer).GetBucketFiles(ctx, req.(*GetBucketFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodeBucket_GetBucketFilesAsZip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBucketFilesAsZipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodeBucketServer).GetBucketFilesAsZip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodeBucket_GetBucketFilesAsZip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodeBucketServer).GetBucketFilesAsZip(ctx, req.(*GetBucketFilesAsZipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CodeBucket_ServiceDesc is the grpc.ServiceDesc for CodeBucket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodeBucket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.rpc.CodeBucket",
	HandlerType: (*CodeBucketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBucket",
			Handler:    _CodeBucket_CreateBucket_Handler,
		},
		{
			MethodName: "CloneBucket",
			Handler:    _CodeBucket_CloneBucket_Handler,
		},
		{
			MethodName: "GetBucketToken",
			Handler:    _CodeBucket_GetBucketToken_Handler,
		},
		{
			MethodName: "GetBucketFile",
			Handler:    _CodeBucket_GetBucketFile_Handler,
		},
		{
			MethodName: "GetBucketFiles",
			Handler:    _CodeBucket_GetBucketFiles_Handler,
		},
		{
			MethodName: "GetBucketFilesAsZip",
			Handler:    _CodeBucket_GetBucketFilesAsZip_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
