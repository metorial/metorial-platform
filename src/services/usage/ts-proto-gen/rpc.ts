// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: rpc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";

export const protobufPackage = "rpc.rpc";

export enum OwnerType {
  owner_type_unspecified = 0,
  owner_type_instance = 1,
  owner_type_organization = 2,
  UNRECOGNIZED = -1,
}

export function ownerTypeFromJSON(object: any): OwnerType {
  switch (object) {
    case 0:
    case "owner_type_unspecified":
      return OwnerType.owner_type_unspecified;
    case 1:
    case "owner_type_instance":
      return OwnerType.owner_type_instance;
    case 2:
    case "owner_type_organization":
      return OwnerType.owner_type_organization;
    case -1:
    case "UNRECOGNIZED":
    default:
      return OwnerType.UNRECOGNIZED;
  }
}

export function ownerTypeToJSON(object: OwnerType): string {
  switch (object) {
    case OwnerType.owner_type_unspecified:
      return "owner_type_unspecified";
    case OwnerType.owner_type_instance:
      return "owner_type_instance";
    case OwnerType.owner_type_organization:
      return "owner_type_organization";
    case OwnerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum IntervalUnit {
  interval_unit_unspecified = 0,
  interval_unit_minute = 1,
  interval_unit_hour = 2,
  interval_unit_day = 3,
  UNRECOGNIZED = -1,
}

export function intervalUnitFromJSON(object: any): IntervalUnit {
  switch (object) {
    case 0:
    case "interval_unit_unspecified":
      return IntervalUnit.interval_unit_unspecified;
    case 1:
    case "interval_unit_minute":
      return IntervalUnit.interval_unit_minute;
    case 2:
    case "interval_unit_hour":
      return IntervalUnit.interval_unit_hour;
    case 3:
    case "interval_unit_day":
      return IntervalUnit.interval_unit_day;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IntervalUnit.UNRECOGNIZED;
  }
}

export function intervalUnitToJSON(object: IntervalUnit): string {
  switch (object) {
    case IntervalUnit.interval_unit_unspecified:
      return "interval_unit_unspecified";
    case IntervalUnit.interval_unit_minute:
      return "interval_unit_minute";
    case IntervalUnit.interval_unit_hour:
      return "interval_unit_hour";
    case IntervalUnit.interval_unit_day:
      return "interval_unit_day";
    case IntervalUnit.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Owner {
  id: string;
  type: OwnerType;
}

export interface Entity {
  id: string;
  type: string;
}

export interface Interval {
  unit: IntervalUnit;
  count: number;
}

export interface IngestUsageRecord {
  owner: Owner | undefined;
  entity: Entity | undefined;
  eventType: string;
  count: Long;
}

export interface IngestUsageRecordRequest {
  records: IngestUsageRecord[];
  ts: Long;
}

export interface IngestUsageRecordResponse {
}

export interface GetUsageTimelineRequest {
  owners: Owner[];
  entityIds: string[];
  entityTypes: string[];
  eventTypes: string[];
  from: Long;
  to: Long;
  interval: Interval | undefined;
}

export interface TimelineEntry {
  ts: Long;
  count: Long;
}

export interface TimelineSeries {
  entityId: string;
  entityType: string;
  ownerId: string;
  entries: TimelineEntry[];
}

export interface TimelineEvent {
  eventType: string;
  series: TimelineSeries[];
}

export interface GetUsageTimelineResponse {
  events: TimelineEvent[];
}

function createBaseOwner(): Owner {
  return { id: "", type: 0 };
}

export const Owner: MessageFns<Owner> = {
  encode(message: Owner, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Owner {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOwner();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Owner {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? ownerTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: Owner): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = ownerTypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<Owner>): Owner {
    return Owner.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Owner>): Owner {
    const message = createBaseOwner();
    message.id = object.id ?? "";
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseEntity(): Entity {
  return { id: "", type: "" };
}

export const Entity: MessageFns<Entity> = {
  encode(message: Entity, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== "") {
      writer.uint32(18).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Entity {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEntity();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Entity {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: Entity): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create(base?: DeepPartial<Entity>): Entity {
    return Entity.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Entity>): Entity {
    const message = createBaseEntity();
    message.id = object.id ?? "";
    message.type = object.type ?? "";
    return message;
  },
};

function createBaseInterval(): Interval {
  return { unit: 0, count: 0 };
}

export const Interval: MessageFns<Interval> = {
  encode(message: Interval, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unit !== 0) {
      writer.uint32(8).int32(message.unit);
    }
    if (message.count !== 0) {
      writer.uint32(16).int32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Interval {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInterval();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.unit = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Interval {
    return {
      unit: isSet(object.unit) ? intervalUnitFromJSON(object.unit) : 0,
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: Interval): unknown {
    const obj: any = {};
    if (message.unit !== 0) {
      obj.unit = intervalUnitToJSON(message.unit);
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create(base?: DeepPartial<Interval>): Interval {
    return Interval.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Interval>): Interval {
    const message = createBaseInterval();
    message.unit = object.unit ?? 0;
    message.count = object.count ?? 0;
    return message;
  },
};

function createBaseIngestUsageRecord(): IngestUsageRecord {
  return { owner: undefined, entity: undefined, eventType: "", count: Long.ZERO };
}

export const IngestUsageRecord: MessageFns<IngestUsageRecord> = {
  encode(message: IngestUsageRecord, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.owner !== undefined) {
      Owner.encode(message.owner, writer.uint32(10).fork()).join();
    }
    if (message.entity !== undefined) {
      Entity.encode(message.entity, writer.uint32(18).fork()).join();
    }
    if (message.eventType !== "") {
      writer.uint32(26).string(message.eventType);
    }
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.count.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestUsageRecord {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestUsageRecord();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owner = Owner.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.entity = Entity.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestUsageRecord {
    return {
      owner: isSet(object.owner) ? Owner.fromJSON(object.owner) : undefined,
      entity: isSet(object.entity) ? Entity.fromJSON(object.entity) : undefined,
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
    };
  },

  toJSON(message: IngestUsageRecord): unknown {
    const obj: any = {};
    if (message.owner !== undefined) {
      obj.owner = Owner.toJSON(message.owner);
    }
    if (message.entity !== undefined) {
      obj.entity = Entity.toJSON(message.entity);
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<IngestUsageRecord>): IngestUsageRecord {
    return IngestUsageRecord.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IngestUsageRecord>): IngestUsageRecord {
    const message = createBaseIngestUsageRecord();
    message.owner = (object.owner !== undefined && object.owner !== null) ? Owner.fromPartial(object.owner) : undefined;
    message.entity = (object.entity !== undefined && object.entity !== null)
      ? Entity.fromPartial(object.entity)
      : undefined;
    message.eventType = object.eventType ?? "";
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    return message;
  },
};

function createBaseIngestUsageRecordRequest(): IngestUsageRecordRequest {
  return { records: [], ts: Long.ZERO };
}

export const IngestUsageRecordRequest: MessageFns<IngestUsageRecordRequest> = {
  encode(message: IngestUsageRecordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.records) {
      IngestUsageRecord.encode(v!, writer.uint32(10).fork()).join();
    }
    if (!message.ts.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.ts.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestUsageRecordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestUsageRecordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.records.push(IngestUsageRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ts = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IngestUsageRecordRequest {
    return {
      records: globalThis.Array.isArray(object?.records)
        ? object.records.map((e: any) => IngestUsageRecord.fromJSON(e))
        : [],
      ts: isSet(object.ts) ? Long.fromValue(object.ts) : Long.ZERO,
    };
  },

  toJSON(message: IngestUsageRecordRequest): unknown {
    const obj: any = {};
    if (message.records?.length) {
      obj.records = message.records.map((e) => IngestUsageRecord.toJSON(e));
    }
    if (!message.ts.equals(Long.ZERO)) {
      obj.ts = (message.ts || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<IngestUsageRecordRequest>): IngestUsageRecordRequest {
    return IngestUsageRecordRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IngestUsageRecordRequest>): IngestUsageRecordRequest {
    const message = createBaseIngestUsageRecordRequest();
    message.records = object.records?.map((e) => IngestUsageRecord.fromPartial(e)) || [];
    message.ts = (object.ts !== undefined && object.ts !== null) ? Long.fromValue(object.ts) : Long.ZERO;
    return message;
  },
};

function createBaseIngestUsageRecordResponse(): IngestUsageRecordResponse {
  return {};
}

export const IngestUsageRecordResponse: MessageFns<IngestUsageRecordResponse> = {
  encode(_: IngestUsageRecordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IngestUsageRecordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIngestUsageRecordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): IngestUsageRecordResponse {
    return {};
  },

  toJSON(_: IngestUsageRecordResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<IngestUsageRecordResponse>): IngestUsageRecordResponse {
    return IngestUsageRecordResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<IngestUsageRecordResponse>): IngestUsageRecordResponse {
    const message = createBaseIngestUsageRecordResponse();
    return message;
  },
};

function createBaseGetUsageTimelineRequest(): GetUsageTimelineRequest {
  return {
    owners: [],
    entityIds: [],
    entityTypes: [],
    eventTypes: [],
    from: Long.ZERO,
    to: Long.ZERO,
    interval: undefined,
  };
}

export const GetUsageTimelineRequest: MessageFns<GetUsageTimelineRequest> = {
  encode(message: GetUsageTimelineRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.owners) {
      Owner.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.entityIds) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.entityTypes) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.eventTypes) {
      writer.uint32(58).string(v!);
    }
    if (!message.from.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.from.toString());
    }
    if (!message.to.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.to.toString());
    }
    if (message.interval !== undefined) {
      Interval.encode(message.interval, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsageTimelineRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsageTimelineRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.owners.push(Owner.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.entityIds.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.entityTypes.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.eventTypes.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.from = Long.fromString(reader.int64().toString());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.to = Long.fromString(reader.int64().toString());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.interval = Interval.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsageTimelineRequest {
    return {
      owners: globalThis.Array.isArray(object?.owners) ? object.owners.map((e: any) => Owner.fromJSON(e)) : [],
      entityIds: globalThis.Array.isArray(object?.entityIds)
        ? object.entityIds.map((e: any) => globalThis.String(e))
        : [],
      entityTypes: globalThis.Array.isArray(object?.entityTypes)
        ? object.entityTypes.map((e: any) => globalThis.String(e))
        : [],
      eventTypes: globalThis.Array.isArray(object?.eventTypes)
        ? object.eventTypes.map((e: any) => globalThis.String(e))
        : [],
      from: isSet(object.from) ? Long.fromValue(object.from) : Long.ZERO,
      to: isSet(object.to) ? Long.fromValue(object.to) : Long.ZERO,
      interval: isSet(object.interval) ? Interval.fromJSON(object.interval) : undefined,
    };
  },

  toJSON(message: GetUsageTimelineRequest): unknown {
    const obj: any = {};
    if (message.owners?.length) {
      obj.owners = message.owners.map((e) => Owner.toJSON(e));
    }
    if (message.entityIds?.length) {
      obj.entityIds = message.entityIds;
    }
    if (message.entityTypes?.length) {
      obj.entityTypes = message.entityTypes;
    }
    if (message.eventTypes?.length) {
      obj.eventTypes = message.eventTypes;
    }
    if (!message.from.equals(Long.ZERO)) {
      obj.from = (message.from || Long.ZERO).toString();
    }
    if (!message.to.equals(Long.ZERO)) {
      obj.to = (message.to || Long.ZERO).toString();
    }
    if (message.interval !== undefined) {
      obj.interval = Interval.toJSON(message.interval);
    }
    return obj;
  },

  create(base?: DeepPartial<GetUsageTimelineRequest>): GetUsageTimelineRequest {
    return GetUsageTimelineRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUsageTimelineRequest>): GetUsageTimelineRequest {
    const message = createBaseGetUsageTimelineRequest();
    message.owners = object.owners?.map((e) => Owner.fromPartial(e)) || [];
    message.entityIds = object.entityIds?.map((e) => e) || [];
    message.entityTypes = object.entityTypes?.map((e) => e) || [];
    message.eventTypes = object.eventTypes?.map((e) => e) || [];
    message.from = (object.from !== undefined && object.from !== null) ? Long.fromValue(object.from) : Long.ZERO;
    message.to = (object.to !== undefined && object.to !== null) ? Long.fromValue(object.to) : Long.ZERO;
    message.interval = (object.interval !== undefined && object.interval !== null)
      ? Interval.fromPartial(object.interval)
      : undefined;
    return message;
  },
};

function createBaseTimelineEntry(): TimelineEntry {
  return { ts: Long.ZERO, count: Long.ZERO };
}

export const TimelineEntry: MessageFns<TimelineEntry> = {
  encode(message: TimelineEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (!message.ts.equals(Long.ZERO)) {
      writer.uint32(8).int64(message.ts.toString());
    }
    if (!message.count.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.count.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimelineEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimelineEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ts = Long.fromString(reader.int64().toString());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimelineEntry {
    return {
      ts: isSet(object.ts) ? Long.fromValue(object.ts) : Long.ZERO,
      count: isSet(object.count) ? Long.fromValue(object.count) : Long.ZERO,
    };
  },

  toJSON(message: TimelineEntry): unknown {
    const obj: any = {};
    if (!message.ts.equals(Long.ZERO)) {
      obj.ts = (message.ts || Long.ZERO).toString();
    }
    if (!message.count.equals(Long.ZERO)) {
      obj.count = (message.count || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<TimelineEntry>): TimelineEntry {
    return TimelineEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimelineEntry>): TimelineEntry {
    const message = createBaseTimelineEntry();
    message.ts = (object.ts !== undefined && object.ts !== null) ? Long.fromValue(object.ts) : Long.ZERO;
    message.count = (object.count !== undefined && object.count !== null) ? Long.fromValue(object.count) : Long.ZERO;
    return message;
  },
};

function createBaseTimelineSeries(): TimelineSeries {
  return { entityId: "", entityType: "", ownerId: "", entries: [] };
}

export const TimelineSeries: MessageFns<TimelineSeries> = {
  encode(message: TimelineSeries, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entityId !== "") {
      writer.uint32(10).string(message.entityId);
    }
    if (message.entityType !== "") {
      writer.uint32(18).string(message.entityType);
    }
    if (message.ownerId !== "") {
      writer.uint32(26).string(message.ownerId);
    }
    for (const v of message.entries) {
      TimelineEntry.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimelineSeries {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimelineSeries();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entityId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.entityType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.entries.push(TimelineEntry.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimelineSeries {
    return {
      entityId: isSet(object.entityId) ? globalThis.String(object.entityId) : "",
      entityType: isSet(object.entityType) ? globalThis.String(object.entityType) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      entries: globalThis.Array.isArray(object?.entries)
        ? object.entries.map((e: any) => TimelineEntry.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TimelineSeries): unknown {
    const obj: any = {};
    if (message.entityId !== "") {
      obj.entityId = message.entityId;
    }
    if (message.entityType !== "") {
      obj.entityType = message.entityType;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.entries?.length) {
      obj.entries = message.entries.map((e) => TimelineEntry.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TimelineSeries>): TimelineSeries {
    return TimelineSeries.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimelineSeries>): TimelineSeries {
    const message = createBaseTimelineSeries();
    message.entityId = object.entityId ?? "";
    message.entityType = object.entityType ?? "";
    message.ownerId = object.ownerId ?? "";
    message.entries = object.entries?.map((e) => TimelineEntry.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTimelineEvent(): TimelineEvent {
  return { eventType: "", series: [] };
}

export const TimelineEvent: MessageFns<TimelineEvent> = {
  encode(message: TimelineEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventType !== "") {
      writer.uint32(10).string(message.eventType);
    }
    for (const v of message.series) {
      TimelineSeries.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimelineEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimelineEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.series.push(TimelineSeries.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimelineEvent {
    return {
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      series: globalThis.Array.isArray(object?.series) ? object.series.map((e: any) => TimelineSeries.fromJSON(e)) : [],
    };
  },

  toJSON(message: TimelineEvent): unknown {
    const obj: any = {};
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.series?.length) {
      obj.series = message.series.map((e) => TimelineSeries.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TimelineEvent>): TimelineEvent {
    return TimelineEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimelineEvent>): TimelineEvent {
    const message = createBaseTimelineEvent();
    message.eventType = object.eventType ?? "";
    message.series = object.series?.map((e) => TimelineSeries.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetUsageTimelineResponse(): GetUsageTimelineResponse {
  return { events: [] };
}

export const GetUsageTimelineResponse: MessageFns<GetUsageTimelineResponse> = {
  encode(message: GetUsageTimelineResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      TimelineEvent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUsageTimelineResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUsageTimelineResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(TimelineEvent.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUsageTimelineResponse {
    return {
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => TimelineEvent.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetUsageTimelineResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => TimelineEvent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<GetUsageTimelineResponse>): GetUsageTimelineResponse {
    return GetUsageTimelineResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetUsageTimelineResponse>): GetUsageTimelineResponse {
    const message = createBaseGetUsageTimelineResponse();
    message.events = object.events?.map((e) => TimelineEvent.fromPartial(e)) || [];
    return message;
  },
};

export type UsageServiceService = typeof UsageServiceService;
export const UsageServiceService = {
  ingestUsageRecord: {
    path: "/rpc.rpc.UsageService/IngestUsageRecord",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: IngestUsageRecordRequest): Buffer =>
      Buffer.from(IngestUsageRecordRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): IngestUsageRecordRequest => IngestUsageRecordRequest.decode(value),
    responseSerialize: (value: IngestUsageRecordResponse): Buffer =>
      Buffer.from(IngestUsageRecordResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): IngestUsageRecordResponse => IngestUsageRecordResponse.decode(value),
  },
  getUsageTimeline: {
    path: "/rpc.rpc.UsageService/GetUsageTimeline",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUsageTimelineRequest): Buffer =>
      Buffer.from(GetUsageTimelineRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetUsageTimelineRequest => GetUsageTimelineRequest.decode(value),
    responseSerialize: (value: GetUsageTimelineResponse): Buffer =>
      Buffer.from(GetUsageTimelineResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetUsageTimelineResponse => GetUsageTimelineResponse.decode(value),
  },
} as const;

export interface UsageServiceServer extends UntypedServiceImplementation {
  ingestUsageRecord: handleUnaryCall<IngestUsageRecordRequest, IngestUsageRecordResponse>;
  getUsageTimeline: handleUnaryCall<GetUsageTimelineRequest, GetUsageTimelineResponse>;
}

export interface UsageServiceClient extends Client {
  ingestUsageRecord(
    request: IngestUsageRecordRequest,
    callback: (error: ServiceError | null, response: IngestUsageRecordResponse) => void,
  ): ClientUnaryCall;
  ingestUsageRecord(
    request: IngestUsageRecordRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: IngestUsageRecordResponse) => void,
  ): ClientUnaryCall;
  ingestUsageRecord(
    request: IngestUsageRecordRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: IngestUsageRecordResponse) => void,
  ): ClientUnaryCall;
  getUsageTimeline(
    request: GetUsageTimelineRequest,
    callback: (error: ServiceError | null, response: GetUsageTimelineResponse) => void,
  ): ClientUnaryCall;
  getUsageTimeline(
    request: GetUsageTimelineRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetUsageTimelineResponse) => void,
  ): ClientUnaryCall;
  getUsageTimeline(
    request: GetUsageTimelineRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetUsageTimelineResponse) => void,
  ): ClientUnaryCall;
}

export const UsageServiceClient = makeGenericClientConstructor(
  UsageServiceService,
  "rpc.rpc.UsageService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UsageServiceClient;
  service: typeof UsageServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
