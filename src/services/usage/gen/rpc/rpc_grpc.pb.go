// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: rpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UsageService_IngestUsageRecord_FullMethodName = "/rpc.rpc.UsageService/IngestUsageRecord"
	UsageService_GetUsageTimeline_FullMethodName  = "/rpc.rpc.UsageService/GetUsageTimeline"
)

// UsageServiceClient is the client API for UsageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsageServiceClient interface {
	IngestUsageRecord(ctx context.Context, in *IngestUsageRecordRequest, opts ...grpc.CallOption) (*IngestUsageRecordResponse, error)
	GetUsageTimeline(ctx context.Context, in *GetUsageTimelineRequest, opts ...grpc.CallOption) (*GetUsageTimelineResponse, error)
}

type usageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsageServiceClient(cc grpc.ClientConnInterface) UsageServiceClient {
	return &usageServiceClient{cc}
}

func (c *usageServiceClient) IngestUsageRecord(ctx context.Context, in *IngestUsageRecordRequest, opts ...grpc.CallOption) (*IngestUsageRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IngestUsageRecordResponse)
	err := c.cc.Invoke(ctx, UsageService_IngestUsageRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usageServiceClient) GetUsageTimeline(ctx context.Context, in *GetUsageTimelineRequest, opts ...grpc.CallOption) (*GetUsageTimelineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsageTimelineResponse)
	err := c.cc.Invoke(ctx, UsageService_GetUsageTimeline_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsageServiceServer is the server API for UsageService service.
// All implementations must embed UnimplementedUsageServiceServer
// for forward compatibility.
type UsageServiceServer interface {
	IngestUsageRecord(context.Context, *IngestUsageRecordRequest) (*IngestUsageRecordResponse, error)
	GetUsageTimeline(context.Context, *GetUsageTimelineRequest) (*GetUsageTimelineResponse, error)
	mustEmbedUnimplementedUsageServiceServer()
}

// UnimplementedUsageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsageServiceServer struct{}

func (UnimplementedUsageServiceServer) IngestUsageRecord(context.Context, *IngestUsageRecordRequest) (*IngestUsageRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IngestUsageRecord not implemented")
}
func (UnimplementedUsageServiceServer) GetUsageTimeline(context.Context, *GetUsageTimelineRequest) (*GetUsageTimelineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsageTimeline not implemented")
}
func (UnimplementedUsageServiceServer) mustEmbedUnimplementedUsageServiceServer() {}
func (UnimplementedUsageServiceServer) testEmbeddedByValue()                      {}

// UnsafeUsageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsageServiceServer will
// result in compilation errors.
type UnsafeUsageServiceServer interface {
	mustEmbedUnimplementedUsageServiceServer()
}

func RegisterUsageServiceServer(s grpc.ServiceRegistrar, srv UsageServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsageService_ServiceDesc, srv)
}

func _UsageService_IngestUsageRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngestUsageRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).IngestUsageRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_IngestUsageRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).IngestUsageRecord(ctx, req.(*IngestUsageRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsageService_GetUsageTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsageTimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsageServiceServer).GetUsageTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsageService_GetUsageTimeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsageServiceServer).GetUsageTimeline(ctx, req.(*GetUsageTimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsageService_ServiceDesc is the grpc.ServiceDesc for UsageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.rpc.UsageService",
	HandlerType: (*UsageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IngestUsageRecord",
			Handler:    _UsageService_IngestUsageRecord_Handler,
		},
		{
			MethodName: "GetUsageTimeline",
			Handler:    _UsageService_GetUsageTimeline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
