// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: rpc.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";

export const protobufPackage = "rpc.rpc";

export interface SendToListenersRequest {
  payload: string;
  id: string;
  listenerIdentifier: string;
}

export interface SendToListenersResponse {
  success: boolean;
  response: string;
  timestamp: Long;
  error: string;
}

export interface GetListenerTokenRequest {
  listenerIdentifier: string;
  expiresInSeconds: Long;
}

export interface GetListenerTokenResponse {
  token: string;
}

function createBaseSendToListenersRequest(): SendToListenersRequest {
  return { payload: "", id: "", listenerIdentifier: "" };
}

export const SendToListenersRequest: MessageFns<SendToListenersRequest> = {
  encode(message: SendToListenersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== "") {
      writer.uint32(10).string(message.payload);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.listenerIdentifier !== "") {
      writer.uint32(26).string(message.listenerIdentifier);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendToListenersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendToListenersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.listenerIdentifier = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendToListenersRequest {
    return {
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      listenerIdentifier: isSet(object.listenerIdentifier) ? globalThis.String(object.listenerIdentifier) : "",
    };
  },

  toJSON(message: SendToListenersRequest): unknown {
    const obj: any = {};
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.listenerIdentifier !== "") {
      obj.listenerIdentifier = message.listenerIdentifier;
    }
    return obj;
  },

  create(base?: DeepPartial<SendToListenersRequest>): SendToListenersRequest {
    return SendToListenersRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendToListenersRequest>): SendToListenersRequest {
    const message = createBaseSendToListenersRequest();
    message.payload = object.payload ?? "";
    message.id = object.id ?? "";
    message.listenerIdentifier = object.listenerIdentifier ?? "";
    return message;
  },
};

function createBaseSendToListenersResponse(): SendToListenersResponse {
  return { success: false, response: "", timestamp: Long.ZERO, error: "" };
}

export const SendToListenersResponse: MessageFns<SendToListenersResponse> = {
  encode(message: SendToListenersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.response !== "") {
      writer.uint32(18).string(message.response);
    }
    if (!message.timestamp.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.timestamp.toString());
    }
    if (message.error !== "") {
      writer.uint32(34).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendToListenersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendToListenersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.response = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = Long.fromString(reader.int64().toString());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendToListenersResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      response: isSet(object.response) ? globalThis.String(object.response) : "",
      timestamp: isSet(object.timestamp) ? Long.fromValue(object.timestamp) : Long.ZERO,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: SendToListenersResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.response !== "") {
      obj.response = message.response;
    }
    if (!message.timestamp.equals(Long.ZERO)) {
      obj.timestamp = (message.timestamp || Long.ZERO).toString();
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create(base?: DeepPartial<SendToListenersResponse>): SendToListenersResponse {
    return SendToListenersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendToListenersResponse>): SendToListenersResponse {
    const message = createBaseSendToListenersResponse();
    message.success = object.success ?? false;
    message.response = object.response ?? "";
    message.timestamp = (object.timestamp !== undefined && object.timestamp !== null)
      ? Long.fromValue(object.timestamp)
      : Long.ZERO;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseGetListenerTokenRequest(): GetListenerTokenRequest {
  return { listenerIdentifier: "", expiresInSeconds: Long.ZERO };
}

export const GetListenerTokenRequest: MessageFns<GetListenerTokenRequest> = {
  encode(message: GetListenerTokenRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.listenerIdentifier !== "") {
      writer.uint32(10).string(message.listenerIdentifier);
    }
    if (!message.expiresInSeconds.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.expiresInSeconds.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetListenerTokenRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetListenerTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.listenerIdentifier = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.expiresInSeconds = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetListenerTokenRequest {
    return {
      listenerIdentifier: isSet(object.listenerIdentifier) ? globalThis.String(object.listenerIdentifier) : "",
      expiresInSeconds: isSet(object.expiresInSeconds) ? Long.fromValue(object.expiresInSeconds) : Long.ZERO,
    };
  },

  toJSON(message: GetListenerTokenRequest): unknown {
    const obj: any = {};
    if (message.listenerIdentifier !== "") {
      obj.listenerIdentifier = message.listenerIdentifier;
    }
    if (!message.expiresInSeconds.equals(Long.ZERO)) {
      obj.expiresInSeconds = (message.expiresInSeconds || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<GetListenerTokenRequest>): GetListenerTokenRequest {
    return GetListenerTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetListenerTokenRequest>): GetListenerTokenRequest {
    const message = createBaseGetListenerTokenRequest();
    message.listenerIdentifier = object.listenerIdentifier ?? "";
    message.expiresInSeconds = (object.expiresInSeconds !== undefined && object.expiresInSeconds !== null)
      ? Long.fromValue(object.expiresInSeconds)
      : Long.ZERO;
    return message;
  },
};

function createBaseGetListenerTokenResponse(): GetListenerTokenResponse {
  return { token: "" };
}

export const GetListenerTokenResponse: MessageFns<GetListenerTokenResponse> = {
  encode(message: GetListenerTokenResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetListenerTokenResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetListenerTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetListenerTokenResponse {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: GetListenerTokenResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<GetListenerTokenResponse>): GetListenerTokenResponse {
    return GetListenerTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetListenerTokenResponse>): GetListenerTokenResponse {
    const message = createBaseGetListenerTokenResponse();
    message.token = object.token ?? "";
    return message;
  },
};

export type ListenerConnectorService = typeof ListenerConnectorService;
export const ListenerConnectorService = {
  sendToListeners: {
    path: "/rpc.rpc.ListenerConnector/SendToListeners",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SendToListenersRequest): Buffer =>
      Buffer.from(SendToListenersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SendToListenersRequest => SendToListenersRequest.decode(value),
    responseSerialize: (value: SendToListenersResponse): Buffer =>
      Buffer.from(SendToListenersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SendToListenersResponse => SendToListenersResponse.decode(value),
  },
  getListenerToken: {
    path: "/rpc.rpc.ListenerConnector/GetListenerToken",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetListenerTokenRequest): Buffer =>
      Buffer.from(GetListenerTokenRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetListenerTokenRequest => GetListenerTokenRequest.decode(value),
    responseSerialize: (value: GetListenerTokenResponse): Buffer =>
      Buffer.from(GetListenerTokenResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetListenerTokenResponse => GetListenerTokenResponse.decode(value),
  },
} as const;

export interface ListenerConnectorServer extends UntypedServiceImplementation {
  sendToListeners: handleUnaryCall<SendToListenersRequest, SendToListenersResponse>;
  getListenerToken: handleUnaryCall<GetListenerTokenRequest, GetListenerTokenResponse>;
}

export interface ListenerConnectorClient extends Client {
  sendToListeners(
    request: SendToListenersRequest,
    callback: (error: ServiceError | null, response: SendToListenersResponse) => void,
  ): ClientUnaryCall;
  sendToListeners(
    request: SendToListenersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SendToListenersResponse) => void,
  ): ClientUnaryCall;
  sendToListeners(
    request: SendToListenersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SendToListenersResponse) => void,
  ): ClientUnaryCall;
  getListenerToken(
    request: GetListenerTokenRequest,
    callback: (error: ServiceError | null, response: GetListenerTokenResponse) => void,
  ): ClientUnaryCall;
  getListenerToken(
    request: GetListenerTokenRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetListenerTokenResponse) => void,
  ): ClientUnaryCall;
  getListenerToken(
    request: GetListenerTokenRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetListenerTokenResponse) => void,
  ): ClientUnaryCall;
}

export const ListenerConnectorClient = makeGenericClientConstructor(
  ListenerConnectorService,
  "rpc.rpc.ListenerConnector",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): ListenerConnectorClient;
  service: typeof ListenerConnectorService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
