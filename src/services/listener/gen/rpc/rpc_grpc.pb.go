// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: rpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ListenerConnector_SendToListeners_FullMethodName  = "/rpc.rpc.ListenerConnector/SendToListeners"
	ListenerConnector_GetListenerToken_FullMethodName = "/rpc.rpc.ListenerConnector/GetListenerToken"
)

// ListenerConnectorClient is the client API for ListenerConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListenerConnectorClient interface {
	SendToListeners(ctx context.Context, in *SendToListenersRequest, opts ...grpc.CallOption) (*SendToListenersResponse, error)
	GetListenerToken(ctx context.Context, in *GetListenerTokenRequest, opts ...grpc.CallOption) (*GetListenerTokenResponse, error)
}

type listenerConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewListenerConnectorClient(cc grpc.ClientConnInterface) ListenerConnectorClient {
	return &listenerConnectorClient{cc}
}

func (c *listenerConnectorClient) SendToListeners(ctx context.Context, in *SendToListenersRequest, opts ...grpc.CallOption) (*SendToListenersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendToListenersResponse)
	err := c.cc.Invoke(ctx, ListenerConnector_SendToListeners_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listenerConnectorClient) GetListenerToken(ctx context.Context, in *GetListenerTokenRequest, opts ...grpc.CallOption) (*GetListenerTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetListenerTokenResponse)
	err := c.cc.Invoke(ctx, ListenerConnector_GetListenerToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListenerConnectorServer is the server API for ListenerConnector service.
// All implementations must embed UnimplementedListenerConnectorServer
// for forward compatibility.
type ListenerConnectorServer interface {
	SendToListeners(context.Context, *SendToListenersRequest) (*SendToListenersResponse, error)
	GetListenerToken(context.Context, *GetListenerTokenRequest) (*GetListenerTokenResponse, error)
	mustEmbedUnimplementedListenerConnectorServer()
}

// UnimplementedListenerConnectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListenerConnectorServer struct{}

func (UnimplementedListenerConnectorServer) SendToListeners(context.Context, *SendToListenersRequest) (*SendToListenersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToListeners not implemented")
}
func (UnimplementedListenerConnectorServer) GetListenerToken(context.Context, *GetListenerTokenRequest) (*GetListenerTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetListenerToken not implemented")
}
func (UnimplementedListenerConnectorServer) mustEmbedUnimplementedListenerConnectorServer() {}
func (UnimplementedListenerConnectorServer) testEmbeddedByValue()                           {}

// UnsafeListenerConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListenerConnectorServer will
// result in compilation errors.
type UnsafeListenerConnectorServer interface {
	mustEmbedUnimplementedListenerConnectorServer()
}

func RegisterListenerConnectorServer(s grpc.ServiceRegistrar, srv ListenerConnectorServer) {
	// If the following call pancis, it indicates UnimplementedListenerConnectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListenerConnector_ServiceDesc, srv)
}

func _ListenerConnector_SendToListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToListenersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerConnectorServer).SendToListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListenerConnector_SendToListeners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerConnectorServer).SendToListeners(ctx, req.(*SendToListenersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListenerConnector_GetListenerToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListenerTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListenerConnectorServer).GetListenerToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListenerConnector_GetListenerToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListenerConnectorServer).GetListenerToken(ctx, req.(*GetListenerTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListenerConnector_ServiceDesc is the grpc.ServiceDesc for ListenerConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListenerConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.rpc.ListenerConnector",
	HandlerType: (*ListenerConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendToListeners",
			Handler:    _ListenerConnector_SendToListeners_Handler,
		},
		{
			MethodName: "GetListenerToken",
			Handler:    _ListenerConnector_GetListenerToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
