// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: hook.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";

export const protobufPackage = "hook.hook";

export enum ListPaginationOrder {
  list_cursor_order_asc = 0,
  list_cursor_order_desc = 1,
  UNRECOGNIZED = -1,
}

export function listPaginationOrderFromJSON(object: any): ListPaginationOrder {
  switch (object) {
    case 0:
    case "list_cursor_order_asc":
      return ListPaginationOrder.list_cursor_order_asc;
    case 1:
    case "list_cursor_order_desc":
      return ListPaginationOrder.list_cursor_order_desc;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ListPaginationOrder.UNRECOGNIZED;
  }
}

export function listPaginationOrderToJSON(object: ListPaginationOrder): string {
  switch (object) {
    case ListPaginationOrder.list_cursor_order_asc:
      return "list_cursor_order_asc";
    case ListPaginationOrder.list_cursor_order_desc:
      return "list_cursor_order_desc";
    case ListPaginationOrder.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum RetryType {
  linear = 0,
  exponential = 1,
  UNRECOGNIZED = -1,
}

export function retryTypeFromJSON(object: any): RetryType {
  switch (object) {
    case 0:
    case "linear":
      return RetryType.linear;
    case 1:
    case "exponential":
      return RetryType.exponential;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RetryType.UNRECOGNIZED;
  }
}

export function retryTypeToJSON(object: RetryType): string {
  switch (object) {
    case RetryType.linear:
      return "linear";
    case RetryType.exponential:
      return "exponential";
    case RetryType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum IntentStatus {
  pending = 0,
  success = 1,
  error_retry = 2,
  error_failed = 3,
  UNRECOGNIZED = -1,
}

export function intentStatusFromJSON(object: any): IntentStatus {
  switch (object) {
    case 0:
    case "pending":
      return IntentStatus.pending;
    case 1:
    case "success":
      return IntentStatus.success;
    case 2:
    case "error_retry":
      return IntentStatus.error_retry;
    case 3:
    case "error_failed":
      return IntentStatus.error_failed;
    case -1:
    case "UNRECOGNIZED":
    default:
      return IntentStatus.UNRECOGNIZED;
  }
}

export function intentStatusToJSON(object: IntentStatus): string {
  switch (object) {
    case IntentStatus.pending:
      return "pending";
    case IntentStatus.success:
      return "success";
    case IntentStatus.error_retry:
      return "error_retry";
    case IntentStatus.error_failed:
      return "error_failed";
    case IntentStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ListPagination {
  afterId: string;
  beforeId: string;
  limit: number;
  order: ListPaginationOrder;
}

export interface RetryConfig {
  type: RetryType;
  delay: number;
  maxAttempts: number;
}

export interface EventDestination {
  id: string;
  instanceId: string;
  url: string;
  method: string;
  events: string[];
  retryConfig: RetryConfig | undefined;
  createdAt: Long;
  updatedAt: Long;
}

export interface Event {
  id: string;
  instanceId: string;
  eventType: string;
  payload: string;
  createdAt: Long;
}

export interface EventDeliveryIntent {
  id: string;
  eventId: string;
  destinationId: string;
  status: IntentStatus;
  createdAt: Long;
  updatedAt: Long;
  nextAttemptAt: Long;
  attemptCount: number;
}

export interface EventDeliveryAttempt {
  id: string;
  intentId: string;
  attemptNumber: number;
  executedAt: Long;
  responseStatus: number;
  responseBody: string;
  responseHeaders: { [key: string]: string };
  success: boolean;
  errorMessage: string;
}

export interface EventDeliveryAttempt_ResponseHeadersEntry {
  key: string;
  value: string;
}

/** Request/Response messages */
export interface CreateEventDestinationRequest {
  instanceId: string;
  url: string;
  method: string;
  events: string[];
  retryConfig: RetryConfig | undefined;
}

export interface CreateEventDestinationResponse {
  destination: EventDestination | undefined;
}

export interface GetEventDestinationRequest {
  destinationId: string;
}

export interface GetEventDestinationResponse {
  destination: EventDestination | undefined;
}

export interface ListEventDestinationsRequest {
  instanceId: string;
  pagination: ListPagination | undefined;
}

export interface ListEventDestinationsResponse {
  destinations: EventDestination[];
}

export interface UpdateEventDestinationRequest {
  destinationId: string;
  url: string;
  method: string;
  events: string[];
  retryConfig: RetryConfig | undefined;
}

export interface UpdateEventDestinationResponse {
  destination: EventDestination | undefined;
}

export interface DeleteEventDestinationRequest {
  destinationId: string;
}

export interface DeleteEventDestinationResponse {
}

export interface PingEventDestinationRequest {
  destinationId: string;
}

export interface PingEventDestinationResponse {
  success: boolean;
  /** Optional message for success or failure */
  message: string;
}

export interface CreateEventRequest {
  instanceId: string;
  eventType: string;
  payload: string;
}

export interface CreateEventResponse {
  event: Event | undefined;
  intents: EventDeliveryIntent[];
}

export interface GetEventRequest {
  id: string;
}

export interface GetEventResponse {
  event: Event | undefined;
}

export interface ListEventsRequest {
  instanceId: string;
  eventType: string;
  pagination: ListPagination | undefined;
}

export interface ListEventsResponse {
  events: Event[];
}

export interface GetEventDeliveryIntentRequest {
  id: string;
}

export interface GetEventDeliveryIntentResponse {
  intent: EventDeliveryIntent | undefined;
}

export interface ListEventDeliveryIntentsRequest {
  eventId: string;
  destinationId: string;
  status: IntentStatus;
  pagination: ListPagination | undefined;
}

export interface ListEventDeliveryIntentsResponse {
  intents: EventDeliveryIntent[];
}

export interface GetEventDeliveryAttemptRequest {
  id: string;
}

export interface GetEventDeliveryAttemptResponse {
  attempt: EventDeliveryAttempt | undefined;
}

export interface ListEventDeliveryAttemptsRequest {
  intentId: string;
  pagination: ListPagination | undefined;
}

export interface ListEventDeliveryAttemptsResponse {
  attempts: EventDeliveryAttempt[];
}

function createBaseListPagination(): ListPagination {
  return { afterId: "", beforeId: "", limit: 0, order: 0 };
}

export const ListPagination: MessageFns<ListPagination> = {
  encode(message: ListPagination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.afterId !== "") {
      writer.uint32(10).string(message.afterId);
    }
    if (message.beforeId !== "") {
      writer.uint32(18).string(message.beforeId);
    }
    if (message.limit !== 0) {
      writer.uint32(24).int32(message.limit);
    }
    if (message.order !== 0) {
      writer.uint32(32).int32(message.order);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListPagination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListPagination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.afterId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.beforeId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.order = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListPagination {
    return {
      afterId: isSet(object.afterId) ? globalThis.String(object.afterId) : "",
      beforeId: isSet(object.beforeId) ? globalThis.String(object.beforeId) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
      order: isSet(object.order) ? listPaginationOrderFromJSON(object.order) : 0,
    };
  },

  toJSON(message: ListPagination): unknown {
    const obj: any = {};
    if (message.afterId !== "") {
      obj.afterId = message.afterId;
    }
    if (message.beforeId !== "") {
      obj.beforeId = message.beforeId;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    if (message.order !== 0) {
      obj.order = listPaginationOrderToJSON(message.order);
    }
    return obj;
  },

  create(base?: DeepPartial<ListPagination>): ListPagination {
    return ListPagination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListPagination>): ListPagination {
    const message = createBaseListPagination();
    message.afterId = object.afterId ?? "";
    message.beforeId = object.beforeId ?? "";
    message.limit = object.limit ?? 0;
    message.order = object.order ?? 0;
    return message;
  },
};

function createBaseRetryConfig(): RetryConfig {
  return { type: 0, delay: 0, maxAttempts: 0 };
}

export const RetryConfig: MessageFns<RetryConfig> = {
  encode(message: RetryConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.delay !== 0) {
      writer.uint32(16).uint32(message.delay);
    }
    if (message.maxAttempts !== 0) {
      writer.uint32(24).uint32(message.maxAttempts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RetryConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRetryConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.delay = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxAttempts = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RetryConfig {
    return {
      type: isSet(object.type) ? retryTypeFromJSON(object.type) : 0,
      delay: isSet(object.delay) ? globalThis.Number(object.delay) : 0,
      maxAttempts: isSet(object.maxAttempts) ? globalThis.Number(object.maxAttempts) : 0,
    };
  },

  toJSON(message: RetryConfig): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = retryTypeToJSON(message.type);
    }
    if (message.delay !== 0) {
      obj.delay = Math.round(message.delay);
    }
    if (message.maxAttempts !== 0) {
      obj.maxAttempts = Math.round(message.maxAttempts);
    }
    return obj;
  },

  create(base?: DeepPartial<RetryConfig>): RetryConfig {
    return RetryConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RetryConfig>): RetryConfig {
    const message = createBaseRetryConfig();
    message.type = object.type ?? 0;
    message.delay = object.delay ?? 0;
    message.maxAttempts = object.maxAttempts ?? 0;
    return message;
  },
};

function createBaseEventDestination(): EventDestination {
  return {
    id: "",
    instanceId: "",
    url: "",
    method: "",
    events: [],
    retryConfig: undefined,
    createdAt: Long.ZERO,
    updatedAt: Long.ZERO,
  };
}

export const EventDestination: MessageFns<EventDestination> = {
  encode(message: EventDestination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.url !== "") {
      writer.uint32(26).string(message.url);
    }
    if (message.method !== "") {
      writer.uint32(34).string(message.method);
    }
    for (const v of message.events) {
      writer.uint32(42).string(v!);
    }
    if (message.retryConfig !== undefined) {
      RetryConfig.encode(message.retryConfig, writer.uint32(50).fork()).join();
    }
    if (!message.createdAt.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.createdAt.toString());
    }
    if (!message.updatedAt.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.updatedAt.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventDestination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDestination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.events.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.retryConfig = RetryConfig.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.createdAt = Long.fromString(reader.int64().toString());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.updatedAt = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventDestination {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => globalThis.String(e)) : [],
      retryConfig: isSet(object.retryConfig) ? RetryConfig.fromJSON(object.retryConfig) : undefined,
      createdAt: isSet(object.createdAt) ? Long.fromValue(object.createdAt) : Long.ZERO,
      updatedAt: isSet(object.updatedAt) ? Long.fromValue(object.updatedAt) : Long.ZERO,
    };
  },

  toJSON(message: EventDestination): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.events?.length) {
      obj.events = message.events;
    }
    if (message.retryConfig !== undefined) {
      obj.retryConfig = RetryConfig.toJSON(message.retryConfig);
    }
    if (!message.createdAt.equals(Long.ZERO)) {
      obj.createdAt = (message.createdAt || Long.ZERO).toString();
    }
    if (!message.updatedAt.equals(Long.ZERO)) {
      obj.updatedAt = (message.updatedAt || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<EventDestination>): EventDestination {
    return EventDestination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventDestination>): EventDestination {
    const message = createBaseEventDestination();
    message.id = object.id ?? "";
    message.instanceId = object.instanceId ?? "";
    message.url = object.url ?? "";
    message.method = object.method ?? "";
    message.events = object.events?.map((e) => e) || [];
    message.retryConfig = (object.retryConfig !== undefined && object.retryConfig !== null)
      ? RetryConfig.fromPartial(object.retryConfig)
      : undefined;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Long.fromValue(object.createdAt)
      : Long.ZERO;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Long.fromValue(object.updatedAt)
      : Long.ZERO;
    return message;
  },
};

function createBaseEvent(): Event {
  return { id: "", instanceId: "", eventType: "", payload: "", createdAt: Long.ZERO };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.instanceId !== "") {
      writer.uint32(18).string(message.instanceId);
    }
    if (message.eventType !== "") {
      writer.uint32(26).string(message.eventType);
    }
    if (message.payload !== "") {
      writer.uint32(34).string(message.payload);
    }
    if (!message.createdAt.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.createdAt.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.createdAt = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
      createdAt: isSet(object.createdAt) ? Long.fromValue(object.createdAt) : Long.ZERO,
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    if (!message.createdAt.equals(Long.ZERO)) {
      obj.createdAt = (message.createdAt || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<Event>): Event {
    return Event.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event>): Event {
    const message = createBaseEvent();
    message.id = object.id ?? "";
    message.instanceId = object.instanceId ?? "";
    message.eventType = object.eventType ?? "";
    message.payload = object.payload ?? "";
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Long.fromValue(object.createdAt)
      : Long.ZERO;
    return message;
  },
};

function createBaseEventDeliveryIntent(): EventDeliveryIntent {
  return {
    id: "",
    eventId: "",
    destinationId: "",
    status: 0,
    createdAt: Long.ZERO,
    updatedAt: Long.ZERO,
    nextAttemptAt: Long.ZERO,
    attemptCount: 0,
  };
}

export const EventDeliveryIntent: MessageFns<EventDeliveryIntent> = {
  encode(message: EventDeliveryIntent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.eventId !== "") {
      writer.uint32(18).string(message.eventId);
    }
    if (message.destinationId !== "") {
      writer.uint32(26).string(message.destinationId);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (!message.createdAt.equals(Long.ZERO)) {
      writer.uint32(40).int64(message.createdAt.toString());
    }
    if (!message.updatedAt.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.updatedAt.toString());
    }
    if (!message.nextAttemptAt.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.nextAttemptAt.toString());
    }
    if (message.attemptCount !== 0) {
      writer.uint32(64).uint32(message.attemptCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventDeliveryIntent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDeliveryIntent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.createdAt = Long.fromString(reader.int64().toString());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.updatedAt = Long.fromString(reader.int64().toString());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.nextAttemptAt = Long.fromString(reader.int64().toString());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.attemptCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventDeliveryIntent {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "",
      status: isSet(object.status) ? intentStatusFromJSON(object.status) : 0,
      createdAt: isSet(object.createdAt) ? Long.fromValue(object.createdAt) : Long.ZERO,
      updatedAt: isSet(object.updatedAt) ? Long.fromValue(object.updatedAt) : Long.ZERO,
      nextAttemptAt: isSet(object.nextAttemptAt) ? Long.fromValue(object.nextAttemptAt) : Long.ZERO,
      attemptCount: isSet(object.attemptCount) ? globalThis.Number(object.attemptCount) : 0,
    };
  },

  toJSON(message: EventDeliveryIntent): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    if (message.status !== 0) {
      obj.status = intentStatusToJSON(message.status);
    }
    if (!message.createdAt.equals(Long.ZERO)) {
      obj.createdAt = (message.createdAt || Long.ZERO).toString();
    }
    if (!message.updatedAt.equals(Long.ZERO)) {
      obj.updatedAt = (message.updatedAt || Long.ZERO).toString();
    }
    if (!message.nextAttemptAt.equals(Long.ZERO)) {
      obj.nextAttemptAt = (message.nextAttemptAt || Long.ZERO).toString();
    }
    if (message.attemptCount !== 0) {
      obj.attemptCount = Math.round(message.attemptCount);
    }
    return obj;
  },

  create(base?: DeepPartial<EventDeliveryIntent>): EventDeliveryIntent {
    return EventDeliveryIntent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventDeliveryIntent>): EventDeliveryIntent {
    const message = createBaseEventDeliveryIntent();
    message.id = object.id ?? "";
    message.eventId = object.eventId ?? "";
    message.destinationId = object.destinationId ?? "";
    message.status = object.status ?? 0;
    message.createdAt = (object.createdAt !== undefined && object.createdAt !== null)
      ? Long.fromValue(object.createdAt)
      : Long.ZERO;
    message.updatedAt = (object.updatedAt !== undefined && object.updatedAt !== null)
      ? Long.fromValue(object.updatedAt)
      : Long.ZERO;
    message.nextAttemptAt = (object.nextAttemptAt !== undefined && object.nextAttemptAt !== null)
      ? Long.fromValue(object.nextAttemptAt)
      : Long.ZERO;
    message.attemptCount = object.attemptCount ?? 0;
    return message;
  },
};

function createBaseEventDeliveryAttempt(): EventDeliveryAttempt {
  return {
    id: "",
    intentId: "",
    attemptNumber: 0,
    executedAt: Long.ZERO,
    responseStatus: 0,
    responseBody: "",
    responseHeaders: {},
    success: false,
    errorMessage: "",
  };
}

export const EventDeliveryAttempt: MessageFns<EventDeliveryAttempt> = {
  encode(message: EventDeliveryAttempt, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.intentId !== "") {
      writer.uint32(18).string(message.intentId);
    }
    if (message.attemptNumber !== 0) {
      writer.uint32(24).uint32(message.attemptNumber);
    }
    if (!message.executedAt.equals(Long.ZERO)) {
      writer.uint32(32).int64(message.executedAt.toString());
    }
    if (message.responseStatus !== 0) {
      writer.uint32(40).int32(message.responseStatus);
    }
    if (message.responseBody !== "") {
      writer.uint32(50).string(message.responseBody);
    }
    Object.entries(message.responseHeaders).forEach(([key, value]) => {
      EventDeliveryAttempt_ResponseHeadersEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.success !== false) {
      writer.uint32(64).bool(message.success);
    }
    if (message.errorMessage !== "") {
      writer.uint32(74).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventDeliveryAttempt {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDeliveryAttempt();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.intentId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.attemptNumber = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.executedAt = Long.fromString(reader.int64().toString());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.responseStatus = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.responseBody = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = EventDeliveryAttempt_ResponseHeadersEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.responseHeaders[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventDeliveryAttempt {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      intentId: isSet(object.intentId) ? globalThis.String(object.intentId) : "",
      attemptNumber: isSet(object.attemptNumber) ? globalThis.Number(object.attemptNumber) : 0,
      executedAt: isSet(object.executedAt) ? Long.fromValue(object.executedAt) : Long.ZERO,
      responseStatus: isSet(object.responseStatus) ? globalThis.Number(object.responseStatus) : 0,
      responseBody: isSet(object.responseBody) ? globalThis.String(object.responseBody) : "",
      responseHeaders: isObject(object.responseHeaders)
        ? Object.entries(object.responseHeaders).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
    };
  },

  toJSON(message: EventDeliveryAttempt): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.intentId !== "") {
      obj.intentId = message.intentId;
    }
    if (message.attemptNumber !== 0) {
      obj.attemptNumber = Math.round(message.attemptNumber);
    }
    if (!message.executedAt.equals(Long.ZERO)) {
      obj.executedAt = (message.executedAt || Long.ZERO).toString();
    }
    if (message.responseStatus !== 0) {
      obj.responseStatus = Math.round(message.responseStatus);
    }
    if (message.responseBody !== "") {
      obj.responseBody = message.responseBody;
    }
    if (message.responseHeaders) {
      const entries = Object.entries(message.responseHeaders);
      if (entries.length > 0) {
        obj.responseHeaders = {};
        entries.forEach(([k, v]) => {
          obj.responseHeaders[k] = v;
        });
      }
    }
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<EventDeliveryAttempt>): EventDeliveryAttempt {
    return EventDeliveryAttempt.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventDeliveryAttempt>): EventDeliveryAttempt {
    const message = createBaseEventDeliveryAttempt();
    message.id = object.id ?? "";
    message.intentId = object.intentId ?? "";
    message.attemptNumber = object.attemptNumber ?? 0;
    message.executedAt = (object.executedAt !== undefined && object.executedAt !== null)
      ? Long.fromValue(object.executedAt)
      : Long.ZERO;
    message.responseStatus = object.responseStatus ?? 0;
    message.responseBody = object.responseBody ?? "";
    message.responseHeaders = Object.entries(object.responseHeaders ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.success = object.success ?? false;
    message.errorMessage = object.errorMessage ?? "";
    return message;
  },
};

function createBaseEventDeliveryAttempt_ResponseHeadersEntry(): EventDeliveryAttempt_ResponseHeadersEntry {
  return { key: "", value: "" };
}

export const EventDeliveryAttempt_ResponseHeadersEntry: MessageFns<EventDeliveryAttempt_ResponseHeadersEntry> = {
  encode(message: EventDeliveryAttempt_ResponseHeadersEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventDeliveryAttempt_ResponseHeadersEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventDeliveryAttempt_ResponseHeadersEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventDeliveryAttempt_ResponseHeadersEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: EventDeliveryAttempt_ResponseHeadersEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<EventDeliveryAttempt_ResponseHeadersEntry>): EventDeliveryAttempt_ResponseHeadersEntry {
    return EventDeliveryAttempt_ResponseHeadersEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<EventDeliveryAttempt_ResponseHeadersEntry>,
  ): EventDeliveryAttempt_ResponseHeadersEntry {
    const message = createBaseEventDeliveryAttempt_ResponseHeadersEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseCreateEventDestinationRequest(): CreateEventDestinationRequest {
  return { instanceId: "", url: "", method: "", events: [], retryConfig: undefined };
}

export const CreateEventDestinationRequest: MessageFns<CreateEventDestinationRequest> = {
  encode(message: CreateEventDestinationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceId !== "") {
      writer.uint32(10).string(message.instanceId);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.method !== "") {
      writer.uint32(26).string(message.method);
    }
    for (const v of message.events) {
      writer.uint32(34).string(v!);
    }
    if (message.retryConfig !== undefined) {
      RetryConfig.encode(message.retryConfig, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEventDestinationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventDestinationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.events.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.retryConfig = RetryConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventDestinationRequest {
    return {
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => globalThis.String(e)) : [],
      retryConfig: isSet(object.retryConfig) ? RetryConfig.fromJSON(object.retryConfig) : undefined,
    };
  },

  toJSON(message: CreateEventDestinationRequest): unknown {
    const obj: any = {};
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.events?.length) {
      obj.events = message.events;
    }
    if (message.retryConfig !== undefined) {
      obj.retryConfig = RetryConfig.toJSON(message.retryConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEventDestinationRequest>): CreateEventDestinationRequest {
    return CreateEventDestinationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEventDestinationRequest>): CreateEventDestinationRequest {
    const message = createBaseCreateEventDestinationRequest();
    message.instanceId = object.instanceId ?? "";
    message.url = object.url ?? "";
    message.method = object.method ?? "";
    message.events = object.events?.map((e) => e) || [];
    message.retryConfig = (object.retryConfig !== undefined && object.retryConfig !== null)
      ? RetryConfig.fromPartial(object.retryConfig)
      : undefined;
    return message;
  },
};

function createBaseCreateEventDestinationResponse(): CreateEventDestinationResponse {
  return { destination: undefined };
}

export const CreateEventDestinationResponse: MessageFns<CreateEventDestinationResponse> = {
  encode(message: CreateEventDestinationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destination !== undefined) {
      EventDestination.encode(message.destination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEventDestinationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventDestinationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destination = EventDestination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventDestinationResponse {
    return { destination: isSet(object.destination) ? EventDestination.fromJSON(object.destination) : undefined };
  },

  toJSON(message: CreateEventDestinationResponse): unknown {
    const obj: any = {};
    if (message.destination !== undefined) {
      obj.destination = EventDestination.toJSON(message.destination);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEventDestinationResponse>): CreateEventDestinationResponse {
    return CreateEventDestinationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEventDestinationResponse>): CreateEventDestinationResponse {
    const message = createBaseCreateEventDestinationResponse();
    message.destination = (object.destination !== undefined && object.destination !== null)
      ? EventDestination.fromPartial(object.destination)
      : undefined;
    return message;
  },
};

function createBaseGetEventDestinationRequest(): GetEventDestinationRequest {
  return { destinationId: "" };
}

export const GetEventDestinationRequest: MessageFns<GetEventDestinationRequest> = {
  encode(message: GetEventDestinationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationId !== "") {
      writer.uint32(10).string(message.destinationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventDestinationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventDestinationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventDestinationRequest {
    return { destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "" };
  },

  toJSON(message: GetEventDestinationRequest): unknown {
    const obj: any = {};
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventDestinationRequest>): GetEventDestinationRequest {
    return GetEventDestinationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventDestinationRequest>): GetEventDestinationRequest {
    const message = createBaseGetEventDestinationRequest();
    message.destinationId = object.destinationId ?? "";
    return message;
  },
};

function createBaseGetEventDestinationResponse(): GetEventDestinationResponse {
  return { destination: undefined };
}

export const GetEventDestinationResponse: MessageFns<GetEventDestinationResponse> = {
  encode(message: GetEventDestinationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destination !== undefined) {
      EventDestination.encode(message.destination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventDestinationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventDestinationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destination = EventDestination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventDestinationResponse {
    return { destination: isSet(object.destination) ? EventDestination.fromJSON(object.destination) : undefined };
  },

  toJSON(message: GetEventDestinationResponse): unknown {
    const obj: any = {};
    if (message.destination !== undefined) {
      obj.destination = EventDestination.toJSON(message.destination);
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventDestinationResponse>): GetEventDestinationResponse {
    return GetEventDestinationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventDestinationResponse>): GetEventDestinationResponse {
    const message = createBaseGetEventDestinationResponse();
    message.destination = (object.destination !== undefined && object.destination !== null)
      ? EventDestination.fromPartial(object.destination)
      : undefined;
    return message;
  },
};

function createBaseListEventDestinationsRequest(): ListEventDestinationsRequest {
  return { instanceId: "", pagination: undefined };
}

export const ListEventDestinationsRequest: MessageFns<ListEventDestinationsRequest> = {
  encode(message: ListEventDestinationsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceId !== "") {
      writer.uint32(10).string(message.instanceId);
    }
    if (message.pagination !== undefined) {
      ListPagination.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventDestinationsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventDestinationsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = ListPagination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventDestinationsRequest {
    return {
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      pagination: isSet(object.pagination) ? ListPagination.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListEventDestinationsRequest): unknown {
    const obj: any = {};
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = ListPagination.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventDestinationsRequest>): ListEventDestinationsRequest {
    return ListEventDestinationsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventDestinationsRequest>): ListEventDestinationsRequest {
    const message = createBaseListEventDestinationsRequest();
    message.instanceId = object.instanceId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? ListPagination.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseListEventDestinationsResponse(): ListEventDestinationsResponse {
  return { destinations: [] };
}

export const ListEventDestinationsResponse: MessageFns<ListEventDestinationsResponse> = {
  encode(message: ListEventDestinationsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.destinations) {
      EventDestination.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventDestinationsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventDestinationsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinations.push(EventDestination.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventDestinationsResponse {
    return {
      destinations: globalThis.Array.isArray(object?.destinations)
        ? object.destinations.map((e: any) => EventDestination.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListEventDestinationsResponse): unknown {
    const obj: any = {};
    if (message.destinations?.length) {
      obj.destinations = message.destinations.map((e) => EventDestination.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventDestinationsResponse>): ListEventDestinationsResponse {
    return ListEventDestinationsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventDestinationsResponse>): ListEventDestinationsResponse {
    const message = createBaseListEventDestinationsResponse();
    message.destinations = object.destinations?.map((e) => EventDestination.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateEventDestinationRequest(): UpdateEventDestinationRequest {
  return { destinationId: "", url: "", method: "", events: [], retryConfig: undefined };
}

export const UpdateEventDestinationRequest: MessageFns<UpdateEventDestinationRequest> = {
  encode(message: UpdateEventDestinationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationId !== "") {
      writer.uint32(10).string(message.destinationId);
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    if (message.method !== "") {
      writer.uint32(26).string(message.method);
    }
    for (const v of message.events) {
      writer.uint32(34).string(v!);
    }
    if (message.retryConfig !== undefined) {
      RetryConfig.encode(message.retryConfig, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEventDestinationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEventDestinationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.events.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.retryConfig = RetryConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEventDestinationRequest {
    return {
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => globalThis.String(e)) : [],
      retryConfig: isSet(object.retryConfig) ? RetryConfig.fromJSON(object.retryConfig) : undefined,
    };
  },

  toJSON(message: UpdateEventDestinationRequest): unknown {
    const obj: any = {};
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.events?.length) {
      obj.events = message.events;
    }
    if (message.retryConfig !== undefined) {
      obj.retryConfig = RetryConfig.toJSON(message.retryConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEventDestinationRequest>): UpdateEventDestinationRequest {
    return UpdateEventDestinationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEventDestinationRequest>): UpdateEventDestinationRequest {
    const message = createBaseUpdateEventDestinationRequest();
    message.destinationId = object.destinationId ?? "";
    message.url = object.url ?? "";
    message.method = object.method ?? "";
    message.events = object.events?.map((e) => e) || [];
    message.retryConfig = (object.retryConfig !== undefined && object.retryConfig !== null)
      ? RetryConfig.fromPartial(object.retryConfig)
      : undefined;
    return message;
  },
};

function createBaseUpdateEventDestinationResponse(): UpdateEventDestinationResponse {
  return { destination: undefined };
}

export const UpdateEventDestinationResponse: MessageFns<UpdateEventDestinationResponse> = {
  encode(message: UpdateEventDestinationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destination !== undefined) {
      EventDestination.encode(message.destination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateEventDestinationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateEventDestinationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destination = EventDestination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateEventDestinationResponse {
    return { destination: isSet(object.destination) ? EventDestination.fromJSON(object.destination) : undefined };
  },

  toJSON(message: UpdateEventDestinationResponse): unknown {
    const obj: any = {};
    if (message.destination !== undefined) {
      obj.destination = EventDestination.toJSON(message.destination);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateEventDestinationResponse>): UpdateEventDestinationResponse {
    return UpdateEventDestinationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateEventDestinationResponse>): UpdateEventDestinationResponse {
    const message = createBaseUpdateEventDestinationResponse();
    message.destination = (object.destination !== undefined && object.destination !== null)
      ? EventDestination.fromPartial(object.destination)
      : undefined;
    return message;
  },
};

function createBaseDeleteEventDestinationRequest(): DeleteEventDestinationRequest {
  return { destinationId: "" };
}

export const DeleteEventDestinationRequest: MessageFns<DeleteEventDestinationRequest> = {
  encode(message: DeleteEventDestinationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationId !== "") {
      writer.uint32(10).string(message.destinationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEventDestinationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEventDestinationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteEventDestinationRequest {
    return { destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "" };
  },

  toJSON(message: DeleteEventDestinationRequest): unknown {
    const obj: any = {};
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteEventDestinationRequest>): DeleteEventDestinationRequest {
    return DeleteEventDestinationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteEventDestinationRequest>): DeleteEventDestinationRequest {
    const message = createBaseDeleteEventDestinationRequest();
    message.destinationId = object.destinationId ?? "";
    return message;
  },
};

function createBaseDeleteEventDestinationResponse(): DeleteEventDestinationResponse {
  return {};
}

export const DeleteEventDestinationResponse: MessageFns<DeleteEventDestinationResponse> = {
  encode(_: DeleteEventDestinationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteEventDestinationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteEventDestinationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DeleteEventDestinationResponse {
    return {};
  },

  toJSON(_: DeleteEventDestinationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DeleteEventDestinationResponse>): DeleteEventDestinationResponse {
    return DeleteEventDestinationResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DeleteEventDestinationResponse>): DeleteEventDestinationResponse {
    const message = createBaseDeleteEventDestinationResponse();
    return message;
  },
};

function createBasePingEventDestinationRequest(): PingEventDestinationRequest {
  return { destinationId: "" };
}

export const PingEventDestinationRequest: MessageFns<PingEventDestinationRequest> = {
  encode(message: PingEventDestinationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationId !== "") {
      writer.uint32(10).string(message.destinationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingEventDestinationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingEventDestinationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingEventDestinationRequest {
    return { destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "" };
  },

  toJSON(message: PingEventDestinationRequest): unknown {
    const obj: any = {};
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    return obj;
  },

  create(base?: DeepPartial<PingEventDestinationRequest>): PingEventDestinationRequest {
    return PingEventDestinationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PingEventDestinationRequest>): PingEventDestinationRequest {
    const message = createBasePingEventDestinationRequest();
    message.destinationId = object.destinationId ?? "";
    return message;
  },
};

function createBasePingEventDestinationResponse(): PingEventDestinationResponse {
  return { success: false, message: "" };
}

export const PingEventDestinationResponse: MessageFns<PingEventDestinationResponse> = {
  encode(message: PingEventDestinationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingEventDestinationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingEventDestinationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PingEventDestinationResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: PingEventDestinationResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create(base?: DeepPartial<PingEventDestinationResponse>): PingEventDestinationResponse {
    return PingEventDestinationResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PingEventDestinationResponse>): PingEventDestinationResponse {
    const message = createBasePingEventDestinationResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCreateEventRequest(): CreateEventRequest {
  return { instanceId: "", eventType: "", payload: "" };
}

export const CreateEventRequest: MessageFns<CreateEventRequest> = {
  encode(message: CreateEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceId !== "") {
      writer.uint32(10).string(message.instanceId);
    }
    if (message.eventType !== "") {
      writer.uint32(18).string(message.eventType);
    }
    if (message.payload !== "") {
      writer.uint32(26).string(message.payload);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventRequest {
    return {
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
    };
  },

  toJSON(message: CreateEventRequest): unknown {
    const obj: any = {};
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEventRequest>): CreateEventRequest {
    return CreateEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEventRequest>): CreateEventRequest {
    const message = createBaseCreateEventRequest();
    message.instanceId = object.instanceId ?? "";
    message.eventType = object.eventType ?? "";
    message.payload = object.payload ?? "";
    return message;
  },
};

function createBaseCreateEventResponse(): CreateEventResponse {
  return { event: undefined, intents: [] };
}

export const CreateEventResponse: MessageFns<CreateEventResponse> = {
  encode(message: CreateEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(10).fork()).join();
    }
    for (const v of message.intents) {
      EventDeliveryIntent.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.intents.push(EventDeliveryIntent.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateEventResponse {
    return {
      event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
      intents: globalThis.Array.isArray(object?.intents)
        ? object.intents.map((e: any) => EventDeliveryIntent.fromJSON(e))
        : [],
    };
  },

  toJSON(message: CreateEventResponse): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    if (message.intents?.length) {
      obj.intents = message.intents.map((e) => EventDeliveryIntent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<CreateEventResponse>): CreateEventResponse {
    return CreateEventResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateEventResponse>): CreateEventResponse {
    const message = createBaseCreateEventResponse();
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    message.intents = object.intents?.map((e) => EventDeliveryIntent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetEventRequest(): GetEventRequest {
  return { id: "" };
}

export const GetEventRequest: MessageFns<GetEventRequest> = {
  encode(message: GetEventRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetEventRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventRequest>): GetEventRequest {
    return GetEventRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventRequest>): GetEventRequest {
    const message = createBaseGetEventRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetEventResponse(): GetEventResponse {
  return { event: undefined };
}

export const GetEventResponse: MessageFns<GetEventResponse> = {
  encode(message: GetEventResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventResponse {
    return { event: isSet(object.event) ? Event.fromJSON(object.event) : undefined };
  },

  toJSON(message: GetEventResponse): unknown {
    const obj: any = {};
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventResponse>): GetEventResponse {
    return GetEventResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventResponse>): GetEventResponse {
    const message = createBaseGetEventResponse();
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    return message;
  },
};

function createBaseListEventsRequest(): ListEventsRequest {
  return { instanceId: "", eventType: "", pagination: undefined };
}

export const ListEventsRequest: MessageFns<ListEventsRequest> = {
  encode(message: ListEventsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.instanceId !== "") {
      writer.uint32(10).string(message.instanceId);
    }
    if (message.eventType !== "") {
      writer.uint32(18).string(message.eventType);
    }
    if (message.pagination !== undefined) {
      ListPagination.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.instanceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.eventType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = ListPagination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventsRequest {
    return {
      instanceId: isSet(object.instanceId) ? globalThis.String(object.instanceId) : "",
      eventType: isSet(object.eventType) ? globalThis.String(object.eventType) : "",
      pagination: isSet(object.pagination) ? ListPagination.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListEventsRequest): unknown {
    const obj: any = {};
    if (message.instanceId !== "") {
      obj.instanceId = message.instanceId;
    }
    if (message.eventType !== "") {
      obj.eventType = message.eventType;
    }
    if (message.pagination !== undefined) {
      obj.pagination = ListPagination.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventsRequest>): ListEventsRequest {
    return ListEventsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventsRequest>): ListEventsRequest {
    const message = createBaseListEventsRequest();
    message.instanceId = object.instanceId ?? "";
    message.eventType = object.eventType ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? ListPagination.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseListEventsResponse(): ListEventsResponse {
  return { events: [] };
}

export const ListEventsResponse: MessageFns<ListEventsResponse> = {
  encode(message: ListEventsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventsResponse {
    return { events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [] };
  },

  toJSON(message: ListEventsResponse): unknown {
    const obj: any = {};
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventsResponse>): ListEventsResponse {
    return ListEventsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventsResponse>): ListEventsResponse {
    const message = createBaseListEventsResponse();
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetEventDeliveryIntentRequest(): GetEventDeliveryIntentRequest {
  return { id: "" };
}

export const GetEventDeliveryIntentRequest: MessageFns<GetEventDeliveryIntentRequest> = {
  encode(message: GetEventDeliveryIntentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventDeliveryIntentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventDeliveryIntentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventDeliveryIntentRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetEventDeliveryIntentRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventDeliveryIntentRequest>): GetEventDeliveryIntentRequest {
    return GetEventDeliveryIntentRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventDeliveryIntentRequest>): GetEventDeliveryIntentRequest {
    const message = createBaseGetEventDeliveryIntentRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetEventDeliveryIntentResponse(): GetEventDeliveryIntentResponse {
  return { intent: undefined };
}

export const GetEventDeliveryIntentResponse: MessageFns<GetEventDeliveryIntentResponse> = {
  encode(message: GetEventDeliveryIntentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.intent !== undefined) {
      EventDeliveryIntent.encode(message.intent, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventDeliveryIntentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventDeliveryIntentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.intent = EventDeliveryIntent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventDeliveryIntentResponse {
    return { intent: isSet(object.intent) ? EventDeliveryIntent.fromJSON(object.intent) : undefined };
  },

  toJSON(message: GetEventDeliveryIntentResponse): unknown {
    const obj: any = {};
    if (message.intent !== undefined) {
      obj.intent = EventDeliveryIntent.toJSON(message.intent);
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventDeliveryIntentResponse>): GetEventDeliveryIntentResponse {
    return GetEventDeliveryIntentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventDeliveryIntentResponse>): GetEventDeliveryIntentResponse {
    const message = createBaseGetEventDeliveryIntentResponse();
    message.intent = (object.intent !== undefined && object.intent !== null)
      ? EventDeliveryIntent.fromPartial(object.intent)
      : undefined;
    return message;
  },
};

function createBaseListEventDeliveryIntentsRequest(): ListEventDeliveryIntentsRequest {
  return { eventId: "", destinationId: "", status: 0, pagination: undefined };
}

export const ListEventDeliveryIntentsRequest: MessageFns<ListEventDeliveryIntentsRequest> = {
  encode(message: ListEventDeliveryIntentsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.eventId !== "") {
      writer.uint32(10).string(message.eventId);
    }
    if (message.destinationId !== "") {
      writer.uint32(18).string(message.destinationId);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.pagination !== undefined) {
      ListPagination.encode(message.pagination, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventDeliveryIntentsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventDeliveryIntentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.eventId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.pagination = ListPagination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventDeliveryIntentsRequest {
    return {
      eventId: isSet(object.eventId) ? globalThis.String(object.eventId) : "",
      destinationId: isSet(object.destinationId) ? globalThis.String(object.destinationId) : "",
      status: isSet(object.status) ? intentStatusFromJSON(object.status) : 0,
      pagination: isSet(object.pagination) ? ListPagination.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListEventDeliveryIntentsRequest): unknown {
    const obj: any = {};
    if (message.eventId !== "") {
      obj.eventId = message.eventId;
    }
    if (message.destinationId !== "") {
      obj.destinationId = message.destinationId;
    }
    if (message.status !== 0) {
      obj.status = intentStatusToJSON(message.status);
    }
    if (message.pagination !== undefined) {
      obj.pagination = ListPagination.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventDeliveryIntentsRequest>): ListEventDeliveryIntentsRequest {
    return ListEventDeliveryIntentsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventDeliveryIntentsRequest>): ListEventDeliveryIntentsRequest {
    const message = createBaseListEventDeliveryIntentsRequest();
    message.eventId = object.eventId ?? "";
    message.destinationId = object.destinationId ?? "";
    message.status = object.status ?? 0;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? ListPagination.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseListEventDeliveryIntentsResponse(): ListEventDeliveryIntentsResponse {
  return { intents: [] };
}

export const ListEventDeliveryIntentsResponse: MessageFns<ListEventDeliveryIntentsResponse> = {
  encode(message: ListEventDeliveryIntentsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.intents) {
      EventDeliveryIntent.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventDeliveryIntentsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventDeliveryIntentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.intents.push(EventDeliveryIntent.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventDeliveryIntentsResponse {
    return {
      intents: globalThis.Array.isArray(object?.intents)
        ? object.intents.map((e: any) => EventDeliveryIntent.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListEventDeliveryIntentsResponse): unknown {
    const obj: any = {};
    if (message.intents?.length) {
      obj.intents = message.intents.map((e) => EventDeliveryIntent.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventDeliveryIntentsResponse>): ListEventDeliveryIntentsResponse {
    return ListEventDeliveryIntentsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventDeliveryIntentsResponse>): ListEventDeliveryIntentsResponse {
    const message = createBaseListEventDeliveryIntentsResponse();
    message.intents = object.intents?.map((e) => EventDeliveryIntent.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetEventDeliveryAttemptRequest(): GetEventDeliveryAttemptRequest {
  return { id: "" };
}

export const GetEventDeliveryAttemptRequest: MessageFns<GetEventDeliveryAttemptRequest> = {
  encode(message: GetEventDeliveryAttemptRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventDeliveryAttemptRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventDeliveryAttemptRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventDeliveryAttemptRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetEventDeliveryAttemptRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventDeliveryAttemptRequest>): GetEventDeliveryAttemptRequest {
    return GetEventDeliveryAttemptRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventDeliveryAttemptRequest>): GetEventDeliveryAttemptRequest {
    const message = createBaseGetEventDeliveryAttemptRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseGetEventDeliveryAttemptResponse(): GetEventDeliveryAttemptResponse {
  return { attempt: undefined };
}

export const GetEventDeliveryAttemptResponse: MessageFns<GetEventDeliveryAttemptResponse> = {
  encode(message: GetEventDeliveryAttemptResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.attempt !== undefined) {
      EventDeliveryAttempt.encode(message.attempt, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetEventDeliveryAttemptResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetEventDeliveryAttemptResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attempt = EventDeliveryAttempt.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetEventDeliveryAttemptResponse {
    return { attempt: isSet(object.attempt) ? EventDeliveryAttempt.fromJSON(object.attempt) : undefined };
  },

  toJSON(message: GetEventDeliveryAttemptResponse): unknown {
    const obj: any = {};
    if (message.attempt !== undefined) {
      obj.attempt = EventDeliveryAttempt.toJSON(message.attempt);
    }
    return obj;
  },

  create(base?: DeepPartial<GetEventDeliveryAttemptResponse>): GetEventDeliveryAttemptResponse {
    return GetEventDeliveryAttemptResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetEventDeliveryAttemptResponse>): GetEventDeliveryAttemptResponse {
    const message = createBaseGetEventDeliveryAttemptResponse();
    message.attempt = (object.attempt !== undefined && object.attempt !== null)
      ? EventDeliveryAttempt.fromPartial(object.attempt)
      : undefined;
    return message;
  },
};

function createBaseListEventDeliveryAttemptsRequest(): ListEventDeliveryAttemptsRequest {
  return { intentId: "", pagination: undefined };
}

export const ListEventDeliveryAttemptsRequest: MessageFns<ListEventDeliveryAttemptsRequest> = {
  encode(message: ListEventDeliveryAttemptsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.intentId !== "") {
      writer.uint32(10).string(message.intentId);
    }
    if (message.pagination !== undefined) {
      ListPagination.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventDeliveryAttemptsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventDeliveryAttemptsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.intentId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = ListPagination.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventDeliveryAttemptsRequest {
    return {
      intentId: isSet(object.intentId) ? globalThis.String(object.intentId) : "",
      pagination: isSet(object.pagination) ? ListPagination.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListEventDeliveryAttemptsRequest): unknown {
    const obj: any = {};
    if (message.intentId !== "") {
      obj.intentId = message.intentId;
    }
    if (message.pagination !== undefined) {
      obj.pagination = ListPagination.toJSON(message.pagination);
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventDeliveryAttemptsRequest>): ListEventDeliveryAttemptsRequest {
    return ListEventDeliveryAttemptsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventDeliveryAttemptsRequest>): ListEventDeliveryAttemptsRequest {
    const message = createBaseListEventDeliveryAttemptsRequest();
    message.intentId = object.intentId ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? ListPagination.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseListEventDeliveryAttemptsResponse(): ListEventDeliveryAttemptsResponse {
  return { attempts: [] };
}

export const ListEventDeliveryAttemptsResponse: MessageFns<ListEventDeliveryAttemptsResponse> = {
  encode(message: ListEventDeliveryAttemptsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.attempts) {
      EventDeliveryAttempt.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEventDeliveryAttemptsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEventDeliveryAttemptsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.attempts.push(EventDeliveryAttempt.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEventDeliveryAttemptsResponse {
    return {
      attempts: globalThis.Array.isArray(object?.attempts)
        ? object.attempts.map((e: any) => EventDeliveryAttempt.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ListEventDeliveryAttemptsResponse): unknown {
    const obj: any = {};
    if (message.attempts?.length) {
      obj.attempts = message.attempts.map((e) => EventDeliveryAttempt.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEventDeliveryAttemptsResponse>): ListEventDeliveryAttemptsResponse {
    return ListEventDeliveryAttemptsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEventDeliveryAttemptsResponse>): ListEventDeliveryAttemptsResponse {
    const message = createBaseListEventDeliveryAttemptsResponse();
    message.attempts = object.attempts?.map((e) => EventDeliveryAttempt.fromPartial(e)) || [];
    return message;
  },
};

export type HookServiceService = typeof HookServiceService;
export const HookServiceService = {
  createEvent: {
    path: "/hook.hook.HookService/CreateEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateEventRequest): Buffer => Buffer.from(CreateEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateEventRequest => CreateEventRequest.decode(value),
    responseSerialize: (value: CreateEventResponse): Buffer => Buffer.from(CreateEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateEventResponse => CreateEventResponse.decode(value),
  },
  getEvent: {
    path: "/hook.hook.HookService/GetEvent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetEventRequest): Buffer => Buffer.from(GetEventRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetEventRequest => GetEventRequest.decode(value),
    responseSerialize: (value: GetEventResponse): Buffer => Buffer.from(GetEventResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetEventResponse => GetEventResponse.decode(value),
  },
  listEvents: {
    path: "/hook.hook.HookService/ListEvents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListEventsRequest): Buffer => Buffer.from(ListEventsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListEventsRequest => ListEventsRequest.decode(value),
    responseSerialize: (value: ListEventsResponse): Buffer => Buffer.from(ListEventsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListEventsResponse => ListEventsResponse.decode(value),
  },
  createEventDestination: {
    path: "/hook.hook.HookService/CreateEventDestination",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateEventDestinationRequest): Buffer =>
      Buffer.from(CreateEventDestinationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): CreateEventDestinationRequest => CreateEventDestinationRequest.decode(value),
    responseSerialize: (value: CreateEventDestinationResponse): Buffer =>
      Buffer.from(CreateEventDestinationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): CreateEventDestinationResponse =>
      CreateEventDestinationResponse.decode(value),
  },
  getEventDestination: {
    path: "/hook.hook.HookService/GetEventDestination",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetEventDestinationRequest): Buffer =>
      Buffer.from(GetEventDestinationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetEventDestinationRequest => GetEventDestinationRequest.decode(value),
    responseSerialize: (value: GetEventDestinationResponse): Buffer =>
      Buffer.from(GetEventDestinationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetEventDestinationResponse => GetEventDestinationResponse.decode(value),
  },
  listEventDestinations: {
    path: "/hook.hook.HookService/ListEventDestinations",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListEventDestinationsRequest): Buffer =>
      Buffer.from(ListEventDestinationsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListEventDestinationsRequest => ListEventDestinationsRequest.decode(value),
    responseSerialize: (value: ListEventDestinationsResponse): Buffer =>
      Buffer.from(ListEventDestinationsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListEventDestinationsResponse => ListEventDestinationsResponse.decode(value),
  },
  updateEventDestination: {
    path: "/hook.hook.HookService/UpdateEventDestination",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateEventDestinationRequest): Buffer =>
      Buffer.from(UpdateEventDestinationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): UpdateEventDestinationRequest => UpdateEventDestinationRequest.decode(value),
    responseSerialize: (value: UpdateEventDestinationResponse): Buffer =>
      Buffer.from(UpdateEventDestinationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): UpdateEventDestinationResponse =>
      UpdateEventDestinationResponse.decode(value),
  },
  deleteEventDestination: {
    path: "/hook.hook.HookService/DeleteEventDestination",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteEventDestinationRequest): Buffer =>
      Buffer.from(DeleteEventDestinationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): DeleteEventDestinationRequest => DeleteEventDestinationRequest.decode(value),
    responseSerialize: (value: DeleteEventDestinationResponse): Buffer =>
      Buffer.from(DeleteEventDestinationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): DeleteEventDestinationResponse =>
      DeleteEventDestinationResponse.decode(value),
  },
  pingEventDestination: {
    path: "/hook.hook.HookService/PingEventDestination",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: PingEventDestinationRequest): Buffer =>
      Buffer.from(PingEventDestinationRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): PingEventDestinationRequest => PingEventDestinationRequest.decode(value),
    responseSerialize: (value: PingEventDestinationResponse): Buffer =>
      Buffer.from(PingEventDestinationResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): PingEventDestinationResponse => PingEventDestinationResponse.decode(value),
  },
  getEventDeliveryIntent: {
    path: "/hook.hook.HookService/GetEventDeliveryIntent",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetEventDeliveryIntentRequest): Buffer =>
      Buffer.from(GetEventDeliveryIntentRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetEventDeliveryIntentRequest => GetEventDeliveryIntentRequest.decode(value),
    responseSerialize: (value: GetEventDeliveryIntentResponse): Buffer =>
      Buffer.from(GetEventDeliveryIntentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetEventDeliveryIntentResponse =>
      GetEventDeliveryIntentResponse.decode(value),
  },
  listEventDeliveryIntents: {
    path: "/hook.hook.HookService/ListEventDeliveryIntents",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListEventDeliveryIntentsRequest): Buffer =>
      Buffer.from(ListEventDeliveryIntentsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListEventDeliveryIntentsRequest =>
      ListEventDeliveryIntentsRequest.decode(value),
    responseSerialize: (value: ListEventDeliveryIntentsResponse): Buffer =>
      Buffer.from(ListEventDeliveryIntentsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListEventDeliveryIntentsResponse =>
      ListEventDeliveryIntentsResponse.decode(value),
  },
  getEventDeliveryAttempt: {
    path: "/hook.hook.HookService/GetEventDeliveryAttempt",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetEventDeliveryAttemptRequest): Buffer =>
      Buffer.from(GetEventDeliveryAttemptRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetEventDeliveryAttemptRequest => GetEventDeliveryAttemptRequest.decode(value),
    responseSerialize: (value: GetEventDeliveryAttemptResponse): Buffer =>
      Buffer.from(GetEventDeliveryAttemptResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetEventDeliveryAttemptResponse =>
      GetEventDeliveryAttemptResponse.decode(value),
  },
  listEventDeliveryAttempts: {
    path: "/hook.hook.HookService/ListEventDeliveryAttempts",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListEventDeliveryAttemptsRequest): Buffer =>
      Buffer.from(ListEventDeliveryAttemptsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListEventDeliveryAttemptsRequest =>
      ListEventDeliveryAttemptsRequest.decode(value),
    responseSerialize: (value: ListEventDeliveryAttemptsResponse): Buffer =>
      Buffer.from(ListEventDeliveryAttemptsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListEventDeliveryAttemptsResponse =>
      ListEventDeliveryAttemptsResponse.decode(value),
  },
} as const;

export interface HookServiceServer extends UntypedServiceImplementation {
  createEvent: handleUnaryCall<CreateEventRequest, CreateEventResponse>;
  getEvent: handleUnaryCall<GetEventRequest, GetEventResponse>;
  listEvents: handleUnaryCall<ListEventsRequest, ListEventsResponse>;
  createEventDestination: handleUnaryCall<CreateEventDestinationRequest, CreateEventDestinationResponse>;
  getEventDestination: handleUnaryCall<GetEventDestinationRequest, GetEventDestinationResponse>;
  listEventDestinations: handleUnaryCall<ListEventDestinationsRequest, ListEventDestinationsResponse>;
  updateEventDestination: handleUnaryCall<UpdateEventDestinationRequest, UpdateEventDestinationResponse>;
  deleteEventDestination: handleUnaryCall<DeleteEventDestinationRequest, DeleteEventDestinationResponse>;
  pingEventDestination: handleUnaryCall<PingEventDestinationRequest, PingEventDestinationResponse>;
  getEventDeliveryIntent: handleUnaryCall<GetEventDeliveryIntentRequest, GetEventDeliveryIntentResponse>;
  listEventDeliveryIntents: handleUnaryCall<ListEventDeliveryIntentsRequest, ListEventDeliveryIntentsResponse>;
  getEventDeliveryAttempt: handleUnaryCall<GetEventDeliveryAttemptRequest, GetEventDeliveryAttemptResponse>;
  listEventDeliveryAttempts: handleUnaryCall<ListEventDeliveryAttemptsRequest, ListEventDeliveryAttemptsResponse>;
}

export interface HookServiceClient extends Client {
  createEvent(
    request: CreateEventRequest,
    callback: (error: ServiceError | null, response: CreateEventResponse) => void,
  ): ClientUnaryCall;
  createEvent(
    request: CreateEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateEventResponse) => void,
  ): ClientUnaryCall;
  createEvent(
    request: CreateEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateEventResponse) => void,
  ): ClientUnaryCall;
  getEvent(
    request: GetEventRequest,
    callback: (error: ServiceError | null, response: GetEventResponse) => void,
  ): ClientUnaryCall;
  getEvent(
    request: GetEventRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetEventResponse) => void,
  ): ClientUnaryCall;
  getEvent(
    request: GetEventRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetEventResponse) => void,
  ): ClientUnaryCall;
  listEvents(
    request: ListEventsRequest,
    callback: (error: ServiceError | null, response: ListEventsResponse) => void,
  ): ClientUnaryCall;
  listEvents(
    request: ListEventsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListEventsResponse) => void,
  ): ClientUnaryCall;
  listEvents(
    request: ListEventsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListEventsResponse) => void,
  ): ClientUnaryCall;
  createEventDestination(
    request: CreateEventDestinationRequest,
    callback: (error: ServiceError | null, response: CreateEventDestinationResponse) => void,
  ): ClientUnaryCall;
  createEventDestination(
    request: CreateEventDestinationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateEventDestinationResponse) => void,
  ): ClientUnaryCall;
  createEventDestination(
    request: CreateEventDestinationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateEventDestinationResponse) => void,
  ): ClientUnaryCall;
  getEventDestination(
    request: GetEventDestinationRequest,
    callback: (error: ServiceError | null, response: GetEventDestinationResponse) => void,
  ): ClientUnaryCall;
  getEventDestination(
    request: GetEventDestinationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetEventDestinationResponse) => void,
  ): ClientUnaryCall;
  getEventDestination(
    request: GetEventDestinationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetEventDestinationResponse) => void,
  ): ClientUnaryCall;
  listEventDestinations(
    request: ListEventDestinationsRequest,
    callback: (error: ServiceError | null, response: ListEventDestinationsResponse) => void,
  ): ClientUnaryCall;
  listEventDestinations(
    request: ListEventDestinationsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListEventDestinationsResponse) => void,
  ): ClientUnaryCall;
  listEventDestinations(
    request: ListEventDestinationsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListEventDestinationsResponse) => void,
  ): ClientUnaryCall;
  updateEventDestination(
    request: UpdateEventDestinationRequest,
    callback: (error: ServiceError | null, response: UpdateEventDestinationResponse) => void,
  ): ClientUnaryCall;
  updateEventDestination(
    request: UpdateEventDestinationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateEventDestinationResponse) => void,
  ): ClientUnaryCall;
  updateEventDestination(
    request: UpdateEventDestinationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateEventDestinationResponse) => void,
  ): ClientUnaryCall;
  deleteEventDestination(
    request: DeleteEventDestinationRequest,
    callback: (error: ServiceError | null, response: DeleteEventDestinationResponse) => void,
  ): ClientUnaryCall;
  deleteEventDestination(
    request: DeleteEventDestinationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteEventDestinationResponse) => void,
  ): ClientUnaryCall;
  deleteEventDestination(
    request: DeleteEventDestinationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteEventDestinationResponse) => void,
  ): ClientUnaryCall;
  pingEventDestination(
    request: PingEventDestinationRequest,
    callback: (error: ServiceError | null, response: PingEventDestinationResponse) => void,
  ): ClientUnaryCall;
  pingEventDestination(
    request: PingEventDestinationRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: PingEventDestinationResponse) => void,
  ): ClientUnaryCall;
  pingEventDestination(
    request: PingEventDestinationRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: PingEventDestinationResponse) => void,
  ): ClientUnaryCall;
  getEventDeliveryIntent(
    request: GetEventDeliveryIntentRequest,
    callback: (error: ServiceError | null, response: GetEventDeliveryIntentResponse) => void,
  ): ClientUnaryCall;
  getEventDeliveryIntent(
    request: GetEventDeliveryIntentRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetEventDeliveryIntentResponse) => void,
  ): ClientUnaryCall;
  getEventDeliveryIntent(
    request: GetEventDeliveryIntentRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetEventDeliveryIntentResponse) => void,
  ): ClientUnaryCall;
  listEventDeliveryIntents(
    request: ListEventDeliveryIntentsRequest,
    callback: (error: ServiceError | null, response: ListEventDeliveryIntentsResponse) => void,
  ): ClientUnaryCall;
  listEventDeliveryIntents(
    request: ListEventDeliveryIntentsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListEventDeliveryIntentsResponse) => void,
  ): ClientUnaryCall;
  listEventDeliveryIntents(
    request: ListEventDeliveryIntentsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListEventDeliveryIntentsResponse) => void,
  ): ClientUnaryCall;
  getEventDeliveryAttempt(
    request: GetEventDeliveryAttemptRequest,
    callback: (error: ServiceError | null, response: GetEventDeliveryAttemptResponse) => void,
  ): ClientUnaryCall;
  getEventDeliveryAttempt(
    request: GetEventDeliveryAttemptRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetEventDeliveryAttemptResponse) => void,
  ): ClientUnaryCall;
  getEventDeliveryAttempt(
    request: GetEventDeliveryAttemptRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetEventDeliveryAttemptResponse) => void,
  ): ClientUnaryCall;
  listEventDeliveryAttempts(
    request: ListEventDeliveryAttemptsRequest,
    callback: (error: ServiceError | null, response: ListEventDeliveryAttemptsResponse) => void,
  ): ClientUnaryCall;
  listEventDeliveryAttempts(
    request: ListEventDeliveryAttemptsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListEventDeliveryAttemptsResponse) => void,
  ): ClientUnaryCall;
  listEventDeliveryAttempts(
    request: ListEventDeliveryAttemptsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListEventDeliveryAttemptsResponse) => void,
  ): ClientUnaryCall;
}

export const HookServiceClient = makeGenericClientConstructor(
  HookServiceService,
  "hook.hook.HookService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): HookServiceClient;
  service: typeof HookServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
