// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: hook.proto

package hook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	HookService_CreateEvent_FullMethodName               = "/hook.hook.HookService/CreateEvent"
	HookService_GetEvent_FullMethodName                  = "/hook.hook.HookService/GetEvent"
	HookService_ListEvents_FullMethodName                = "/hook.hook.HookService/ListEvents"
	HookService_CreateEventDestination_FullMethodName    = "/hook.hook.HookService/CreateEventDestination"
	HookService_GetEventDestination_FullMethodName       = "/hook.hook.HookService/GetEventDestination"
	HookService_ListEventDestinations_FullMethodName     = "/hook.hook.HookService/ListEventDestinations"
	HookService_UpdateEventDestination_FullMethodName    = "/hook.hook.HookService/UpdateEventDestination"
	HookService_DeleteEventDestination_FullMethodName    = "/hook.hook.HookService/DeleteEventDestination"
	HookService_PingEventDestination_FullMethodName      = "/hook.hook.HookService/PingEventDestination"
	HookService_GetEventDeliveryIntent_FullMethodName    = "/hook.hook.HookService/GetEventDeliveryIntent"
	HookService_ListEventDeliveryIntents_FullMethodName  = "/hook.hook.HookService/ListEventDeliveryIntents"
	HookService_GetEventDeliveryAttempt_FullMethodName   = "/hook.hook.HookService/GetEventDeliveryAttempt"
	HookService_ListEventDeliveryAttempts_FullMethodName = "/hook.hook.HookService/ListEventDeliveryAttempts"
)

// HookServiceClient is the client API for HookService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HookServiceClient interface {
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error)
	CreateEventDestination(ctx context.Context, in *CreateEventDestinationRequest, opts ...grpc.CallOption) (*CreateEventDestinationResponse, error)
	GetEventDestination(ctx context.Context, in *GetEventDestinationRequest, opts ...grpc.CallOption) (*GetEventDestinationResponse, error)
	ListEventDestinations(ctx context.Context, in *ListEventDestinationsRequest, opts ...grpc.CallOption) (*ListEventDestinationsResponse, error)
	UpdateEventDestination(ctx context.Context, in *UpdateEventDestinationRequest, opts ...grpc.CallOption) (*UpdateEventDestinationResponse, error)
	DeleteEventDestination(ctx context.Context, in *DeleteEventDestinationRequest, opts ...grpc.CallOption) (*DeleteEventDestinationResponse, error)
	PingEventDestination(ctx context.Context, in *PingEventDestinationRequest, opts ...grpc.CallOption) (*PingEventDestinationResponse, error)
	GetEventDeliveryIntent(ctx context.Context, in *GetEventDeliveryIntentRequest, opts ...grpc.CallOption) (*GetEventDeliveryIntentResponse, error)
	ListEventDeliveryIntents(ctx context.Context, in *ListEventDeliveryIntentsRequest, opts ...grpc.CallOption) (*ListEventDeliveryIntentsResponse, error)
	GetEventDeliveryAttempt(ctx context.Context, in *GetEventDeliveryAttemptRequest, opts ...grpc.CallOption) (*GetEventDeliveryAttemptResponse, error)
	ListEventDeliveryAttempts(ctx context.Context, in *ListEventDeliveryAttemptsRequest, opts ...grpc.CallOption) (*ListEventDeliveryAttemptsResponse, error)
}

type hookServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHookServiceClient(cc grpc.ClientConnInterface) HookServiceClient {
	return &hookServiceClient{cc}
}

func (c *hookServiceClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, HookService_CreateEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, HookService_GetEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) ListEvents(ctx context.Context, in *ListEventsRequest, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, HookService_ListEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) CreateEventDestination(ctx context.Context, in *CreateEventDestinationRequest, opts ...grpc.CallOption) (*CreateEventDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEventDestinationResponse)
	err := c.cc.Invoke(ctx, HookService_CreateEventDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) GetEventDestination(ctx context.Context, in *GetEventDestinationRequest, opts ...grpc.CallOption) (*GetEventDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventDestinationResponse)
	err := c.cc.Invoke(ctx, HookService_GetEventDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) ListEventDestinations(ctx context.Context, in *ListEventDestinationsRequest, opts ...grpc.CallOption) (*ListEventDestinationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventDestinationsResponse)
	err := c.cc.Invoke(ctx, HookService_ListEventDestinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) UpdateEventDestination(ctx context.Context, in *UpdateEventDestinationRequest, opts ...grpc.CallOption) (*UpdateEventDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEventDestinationResponse)
	err := c.cc.Invoke(ctx, HookService_UpdateEventDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) DeleteEventDestination(ctx context.Context, in *DeleteEventDestinationRequest, opts ...grpc.CallOption) (*DeleteEventDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEventDestinationResponse)
	err := c.cc.Invoke(ctx, HookService_DeleteEventDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) PingEventDestination(ctx context.Context, in *PingEventDestinationRequest, opts ...grpc.CallOption) (*PingEventDestinationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingEventDestinationResponse)
	err := c.cc.Invoke(ctx, HookService_PingEventDestination_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) GetEventDeliveryIntent(ctx context.Context, in *GetEventDeliveryIntentRequest, opts ...grpc.CallOption) (*GetEventDeliveryIntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventDeliveryIntentResponse)
	err := c.cc.Invoke(ctx, HookService_GetEventDeliveryIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) ListEventDeliveryIntents(ctx context.Context, in *ListEventDeliveryIntentsRequest, opts ...grpc.CallOption) (*ListEventDeliveryIntentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventDeliveryIntentsResponse)
	err := c.cc.Invoke(ctx, HookService_ListEventDeliveryIntents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) GetEventDeliveryAttempt(ctx context.Context, in *GetEventDeliveryAttemptRequest, opts ...grpc.CallOption) (*GetEventDeliveryAttemptResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventDeliveryAttemptResponse)
	err := c.cc.Invoke(ctx, HookService_GetEventDeliveryAttempt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookServiceClient) ListEventDeliveryAttempts(ctx context.Context, in *ListEventDeliveryAttemptsRequest, opts ...grpc.CallOption) (*ListEventDeliveryAttemptsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEventDeliveryAttemptsResponse)
	err := c.cc.Invoke(ctx, HookService_ListEventDeliveryAttempts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HookServiceServer is the server API for HookService service.
// All implementations must embed UnimplementedHookServiceServer
// for forward compatibility.
type HookServiceServer interface {
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error)
	CreateEventDestination(context.Context, *CreateEventDestinationRequest) (*CreateEventDestinationResponse, error)
	GetEventDestination(context.Context, *GetEventDestinationRequest) (*GetEventDestinationResponse, error)
	ListEventDestinations(context.Context, *ListEventDestinationsRequest) (*ListEventDestinationsResponse, error)
	UpdateEventDestination(context.Context, *UpdateEventDestinationRequest) (*UpdateEventDestinationResponse, error)
	DeleteEventDestination(context.Context, *DeleteEventDestinationRequest) (*DeleteEventDestinationResponse, error)
	PingEventDestination(context.Context, *PingEventDestinationRequest) (*PingEventDestinationResponse, error)
	GetEventDeliveryIntent(context.Context, *GetEventDeliveryIntentRequest) (*GetEventDeliveryIntentResponse, error)
	ListEventDeliveryIntents(context.Context, *ListEventDeliveryIntentsRequest) (*ListEventDeliveryIntentsResponse, error)
	GetEventDeliveryAttempt(context.Context, *GetEventDeliveryAttemptRequest) (*GetEventDeliveryAttemptResponse, error)
	ListEventDeliveryAttempts(context.Context, *ListEventDeliveryAttemptsRequest) (*ListEventDeliveryAttemptsResponse, error)
	mustEmbedUnimplementedHookServiceServer()
}

// UnimplementedHookServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHookServiceServer struct{}

func (UnimplementedHookServiceServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedHookServiceServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedHookServiceServer) ListEvents(context.Context, *ListEventsRequest) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (UnimplementedHookServiceServer) CreateEventDestination(context.Context, *CreateEventDestinationRequest) (*CreateEventDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEventDestination not implemented")
}
func (UnimplementedHookServiceServer) GetEventDestination(context.Context, *GetEventDestinationRequest) (*GetEventDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventDestination not implemented")
}
func (UnimplementedHookServiceServer) ListEventDestinations(context.Context, *ListEventDestinationsRequest) (*ListEventDestinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventDestinations not implemented")
}
func (UnimplementedHookServiceServer) UpdateEventDestination(context.Context, *UpdateEventDestinationRequest) (*UpdateEventDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEventDestination not implemented")
}
func (UnimplementedHookServiceServer) DeleteEventDestination(context.Context, *DeleteEventDestinationRequest) (*DeleteEventDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEventDestination not implemented")
}
func (UnimplementedHookServiceServer) PingEventDestination(context.Context, *PingEventDestinationRequest) (*PingEventDestinationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingEventDestination not implemented")
}
func (UnimplementedHookServiceServer) GetEventDeliveryIntent(context.Context, *GetEventDeliveryIntentRequest) (*GetEventDeliveryIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventDeliveryIntent not implemented")
}
func (UnimplementedHookServiceServer) ListEventDeliveryIntents(context.Context, *ListEventDeliveryIntentsRequest) (*ListEventDeliveryIntentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventDeliveryIntents not implemented")
}
func (UnimplementedHookServiceServer) GetEventDeliveryAttempt(context.Context, *GetEventDeliveryAttemptRequest) (*GetEventDeliveryAttemptResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventDeliveryAttempt not implemented")
}
func (UnimplementedHookServiceServer) ListEventDeliveryAttempts(context.Context, *ListEventDeliveryAttemptsRequest) (*ListEventDeliveryAttemptsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventDeliveryAttempts not implemented")
}
func (UnimplementedHookServiceServer) mustEmbedUnimplementedHookServiceServer() {}
func (UnimplementedHookServiceServer) testEmbeddedByValue()                     {}

// UnsafeHookServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HookServiceServer will
// result in compilation errors.
type UnsafeHookServiceServer interface {
	mustEmbedUnimplementedHookServiceServer()
}

func RegisterHookServiceServer(s grpc.ServiceRegistrar, srv HookServiceServer) {
	// If the following call pancis, it indicates UnimplementedHookServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HookService_ServiceDesc, srv)
}

func _HookService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_CreateEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_ListEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).ListEvents(ctx, req.(*ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_CreateEventDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).CreateEventDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_CreateEventDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).CreateEventDestination(ctx, req.(*CreateEventDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_GetEventDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).GetEventDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_GetEventDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).GetEventDestination(ctx, req.(*GetEventDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_ListEventDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventDestinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).ListEventDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_ListEventDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).ListEventDestinations(ctx, req.(*ListEventDestinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_UpdateEventDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEventDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).UpdateEventDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_UpdateEventDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).UpdateEventDestination(ctx, req.(*UpdateEventDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_DeleteEventDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEventDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).DeleteEventDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_DeleteEventDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).DeleteEventDestination(ctx, req.(*DeleteEventDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_PingEventDestination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingEventDestinationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).PingEventDestination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_PingEventDestination_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).PingEventDestination(ctx, req.(*PingEventDestinationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_GetEventDeliveryIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventDeliveryIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).GetEventDeliveryIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_GetEventDeliveryIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).GetEventDeliveryIntent(ctx, req.(*GetEventDeliveryIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_ListEventDeliveryIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventDeliveryIntentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).ListEventDeliveryIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_ListEventDeliveryIntents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).ListEventDeliveryIntents(ctx, req.(*ListEventDeliveryIntentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_GetEventDeliveryAttempt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventDeliveryAttemptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).GetEventDeliveryAttempt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_GetEventDeliveryAttempt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).GetEventDeliveryAttempt(ctx, req.(*GetEventDeliveryAttemptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HookService_ListEventDeliveryAttempts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventDeliveryAttemptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HookServiceServer).ListEventDeliveryAttempts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HookService_ListEventDeliveryAttempts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HookServiceServer).ListEventDeliveryAttempts(ctx, req.(*ListEventDeliveryAttemptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HookService_ServiceDesc is the grpc.ServiceDesc for HookService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HookService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hook.hook.HookService",
	HandlerType: (*HookServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _HookService_CreateEvent_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _HookService_GetEvent_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _HookService_ListEvents_Handler,
		},
		{
			MethodName: "CreateEventDestination",
			Handler:    _HookService_CreateEventDestination_Handler,
		},
		{
			MethodName: "GetEventDestination",
			Handler:    _HookService_GetEventDestination_Handler,
		},
		{
			MethodName: "ListEventDestinations",
			Handler:    _HookService_ListEventDestinations_Handler,
		},
		{
			MethodName: "UpdateEventDestination",
			Handler:    _HookService_UpdateEventDestination_Handler,
		},
		{
			MethodName: "DeleteEventDestination",
			Handler:    _HookService_DeleteEventDestination_Handler,
		},
		{
			MethodName: "PingEventDestination",
			Handler:    _HookService_PingEventDestination_Handler,
		},
		{
			MethodName: "GetEventDeliveryIntent",
			Handler:    _HookService_GetEventDeliveryIntent_Handler,
		},
		{
			MethodName: "ListEventDeliveryIntents",
			Handler:    _HookService_ListEventDeliveryIntents_Handler,
		},
		{
			MethodName: "GetEventDeliveryAttempt",
			Handler:    _HookService_GetEventDeliveryAttempt_Handler,
		},
		{
			MethodName: "ListEventDeliveryAttempts",
			Handler:    _HookService_ListEventDeliveryAttempts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hook.proto",
}
