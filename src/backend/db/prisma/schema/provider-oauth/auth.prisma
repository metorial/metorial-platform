enum ProviderOAuthConnectionEventType {
  errors
  config_auto_updated
}

model ProviderOAuthConnectionEvent {
  oid BigInt @id @default(autoincrement())
  id  String @unique

  event         ProviderOAuthConnectionEventType
  discriminator String?

  metadata Json?

  connectionOid BigInt
  connection    ProviderOAuthConnection @relation(fields: [connectionOid], references: [oid], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([connectionOid, event, discriminator])
}

model ProviderOAuthConnectionProfile {
  oid BigInt @id @default(autoincrement())
  id  String @unique

  sub String

  name  String?
  email String?

  rawProfile Json?

  connectionOid BigInt
  connection    ProviderOAuthConnection @relation(fields: [connectionOid], references: [oid], onDelete: Cascade)

  createdAt  DateTime @default(now())
  lastUsedAt DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  tokens                             ProviderOAuthConnectionAuthToken[]
  ProviderOAuthConnectionAuthAttempt ProviderOAuthConnectionAuthAttempt[]

  @@unique([connectionOid, sub])
}

enum ProviderOAuthConnectionAuthAttemptStatus {
  pending
  completed
  failed
}

model ProviderOAuthConnectionAuthAttempt {
  oid BigInt @id @default(autoincrement())
  id  String @unique

  stateIdentifier String? @unique
  clientSecret    String? @unique

  status ProviderOAuthConnectionAuthAttemptStatus

  errorCode    String?
  errorMessage String?

  associatedTokenErrorDisabledAt DateTime?

  redirectUri String

  codeVerifier String?

  connectionOid BigInt
  connection    ProviderOAuthConnection @relation(fields: [connectionOid], references: [oid], onDelete: Cascade)

  authTokenOid BigInt?
  authToken    ProviderOAuthConnectionAuthToken? @relation(fields: [authTokenOid], references: [oid], onDelete: SetNull)

  profileOid BigInt?
  profile    ProviderOAuthConnectionProfile? @relation(fields: [profileOid], references: [oid], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([status])
}

model ProviderOAuthConnectionAuthToken {
  oid BigInt @id @default(autoincrement())
  id  String @unique

  accessToken  String
  refreshToken String?

  scope     String?
  tokenType String?
  idToken   String?

  expiresAt DateTime?

  connectionProfileOid BigInt?
  connectionProfile    ProviderOAuthConnectionProfile? @relation(fields: [connectionProfileOid], references: [oid], onDelete: SetNull)

  connectionOid BigInt
  connection    ProviderOAuthConnection @relation(fields: [connectionOid], references: [oid], onDelete: Cascade)

  /// [ProviderOAuthConnectionAuthTokenErrors]
  firstErrorAt    DateTime?
  lastErrorAt     DateTime?
  errorDisabledAt DateTime?
  errorCount      Int       @default(0)

  createdAt   DateTime  @default(now())
  lastUsedAt  DateTime  @default(now())
  refreshedAt DateTime?

  authAttempts ProviderOAuthConnectionAuthAttempt[]
  references   ProviderOAuthConnectionAuthTokenReference[]
}

model ProviderOAuthConnectionAuthTokenReference {
  oid BigInt @id @default(autoincrement())

  authTokenOid BigInt?
  authToken    ProviderOAuthConnectionAuthToken? @relation(fields: [authTokenOid], references: [oid], onDelete: SetNull)
}
