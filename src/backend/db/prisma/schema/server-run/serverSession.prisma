enum SessionMcpConnectionType {
  sse
  streamable_http
  websocket
}

enum ServerSessionStatus {
  pending
  running
  stopped
}

model ServerSession {
  oid    BigInt              @id @default(autoincrement())
  id     String              @unique
  status ServerSessionStatus

  mcpVersion        String?
  mcpInitialized    Boolean?
  mcpConnectionType SessionMcpConnectionType?

  serverDeploymentOid BigInt
  serverDeployment    ServerDeployment @relation(fields: [serverDeploymentOid], references: [oid])

  instanceOid BigInt
  instance    Instance @relation(fields: [instanceOid], references: [oid])

  sessionOid BigInt
  session    Session @relation(fields: [sessionOid], references: [oid])

  /// [SessionClientInfo]
  clientInfo Json?

  /// [SessionClientCapabilities]
  clientCapabilities Json?

  /// [SessionServerInfo]
  serverInfo Json?

  /// [SessionServerCapabilities]
  serverCapabilities Json?

  totalProductiveClientMessageCount Int @default(0)
  totalProductiveServerMessageCount Int @default(0)

  lastClientActionAt DateTime?
  lastServerActionAt DateTime?

  messages          SessionMessage[]
  serverRuns        ServerRun[]
  engineSessions    EngineSession[]
  engineRuns        EngineRun[]
  sessionConnection SessionConnection?

  createdAt DateTime @default(now())
}

model SessionConnection {
  oid BigInt @id @default(autoincrement())
  id  String @unique

  serverSessionOid BigInt        @unique
  serverSession    ServerSession @relation(fields: [serverSessionOid], references: [oid])

  instanceOid BigInt
  instance    Instance @relation(fields: [instanceOid], references: [oid])

  sessionOid BigInt
  session    Session @relation(fields: [sessionOid], references: [oid])

  userAgent String?
  anonIp    String?

  createdAt DateTime  @default(now())
  endedAt   DateTime?
}
