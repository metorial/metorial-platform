enum ServerListingStatus {
  active
  archived
  banned
}

model ServerListing {
  oid    BigInt              @id @default(autoincrement())
  id     String              @unique
  status ServerListingStatus

  isPublic     Boolean @default(true)
  isCustomized Boolean @default(false)

  isMetorial Boolean @default(false)
  isVerified Boolean @default(false)
  isOfficial Boolean @default(false)

  ownerOrganizationOid BigInt?
  ownerOrganization    Organization? @relation(fields: [ownerOrganizationOid], references: [oid])

  name String
  slug String @unique

  description String?
  readme      String?

  rank Int @default(0)

  skills String[]

  deploymentsCount    Int @default(0)
  repoStarsCount      Int @default(0)
  serverSessionsCount Int @default(0)
  serverMessagesCount Int @default(0)

  profileOid BigInt?
  profile    Profile? @relation(fields: [profileOid], references: [oid])

  serverOid BigInt @unique
  server    Server @relation(fields: [serverOid], references: [oid])

  categories  ServerListingCategory[]
  collections ServerListingCollection[]

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @default(now()) @updatedAt
  rankUpdatedAt       DateTime?             @updatedAt
  ServerListingUpdate ServerListingUpdate[]

  @@index([rank])
}

model ServerListingUpdate {
  oid BigInt @id @default(autoincrement())
  id  String @unique

  before Json
  after  Json

  createdByOid BigInt
  createdBy    OrganizationActor @relation(fields: [createdByOid], references: [oid], onDelete: Cascade)

  serverListingOid BigInt
  serverListing    ServerListing @relation(fields: [serverListingOid], references: [oid], onDelete: Cascade)

  createdAt DateTime @default(now())
}
