// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: runner.proto

package runner

import (
	common "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/common"
	mcp "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/mcp"
	worker "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/worker"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunnerInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnerInfoRequest) Reset() {
	*x = RunnerInfoRequest{}
	mi := &file_runner_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerInfoRequest) ProtoMessage() {}

func (x *RunnerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerInfoRequest.ProtoReflect.Descriptor instead.
func (*RunnerInfoRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{0}
}

type RunnerInfoResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	RunnerId      string                     `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	ActiveRuns    uint32                     `protobuf:"varint,2,opt,name=active_runs,json=activeRuns,proto3" json:"active_runs,omitempty"`
	TotalRuns     uint64                     `protobuf:"varint,3,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
	WorkerInfo    *worker.WorkerInfoResponse `protobuf:"bytes,4,opt,name=worker_info,json=workerInfo,proto3" json:"worker_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunnerInfoResponse) Reset() {
	*x = RunnerInfoResponse{}
	mi := &file_runner_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunnerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunnerInfoResponse) ProtoMessage() {}

func (x *RunnerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunnerInfoResponse.ProtoReflect.Descriptor instead.
func (*RunnerInfoResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{1}
}

func (x *RunnerInfoResponse) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *RunnerInfoResponse) GetActiveRuns() uint32 {
	if x != nil {
		return x.ActiveRuns
	}
	return 0
}

func (x *RunnerInfoResponse) GetTotalRuns() uint64 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

func (x *RunnerInfoResponse) GetWorkerInfo() *worker.WorkerInfoResponse {
	if x != nil {
		return x.WorkerInfo
	}
	return nil
}

type ActiveRunsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Runs          []*RunInfo             `protobuf:"bytes,1,rep,name=runs,proto3" json:"runs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActiveRunsResponse) Reset() {
	*x = ActiveRunsResponse{}
	mi := &file_runner_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActiveRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveRunsResponse) ProtoMessage() {}

func (x *ActiveRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveRunsResponse.ProtoReflect.Descriptor instead.
func (*ActiveRunsResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{2}
}

func (x *ActiveRunsResponse) GetRuns() []*RunInfo {
	if x != nil {
		return x.Runs
	}
	return nil
}

type RunInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RunId         string                 `protobuf:"bytes,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	DockerImage   string                 `protobuf:"bytes,2,opt,name=docker_image,json=dockerImage,proto3" json:"docker_image,omitempty"`
	MaxMemory     string                 `protobuf:"bytes,6,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"` // e.g., "512m" or "1g"
	MaxCpu        string                 `protobuf:"bytes,7,opt,name=max_cpu,json=maxCpu,proto3" json:"max_cpu,omitempty"`          // e.g., "1"
	StartTime     int64                  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       int64                  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunInfo) Reset() {
	*x = RunInfo{}
	mi := &file_runner_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunInfo) ProtoMessage() {}

func (x *RunInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunInfo.ProtoReflect.Descriptor instead.
func (*RunInfo) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{3}
}

func (x *RunInfo) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *RunInfo) GetDockerImage() string {
	if x != nil {
		return x.DockerImage
	}
	return ""
}

func (x *RunInfo) GetMaxMemory() string {
	if x != nil {
		return x.MaxMemory
	}
	return ""
}

func (x *RunInfo) GetMaxCpu() string {
	if x != nil {
		return x.MaxCpu
	}
	return ""
}

func (x *RunInfo) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *RunInfo) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type DockerImagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Images        []*DockerImageInfo     `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerImagesResponse) Reset() {
	*x = DockerImagesResponse{}
	mi := &file_runner_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerImagesResponse) ProtoMessage() {}

func (x *DockerImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerImagesResponse.ProtoReflect.Descriptor instead.
func (*DockerImagesResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{4}
}

func (x *DockerImagesResponse) GetImages() []*DockerImageInfo {
	if x != nil {
		return x.Images
	}
	return nil
}

type DockerImageInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tag           string                 `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	ImageId       string                 `protobuf:"bytes,3,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	LastUsed      int64                  `protobuf:"varint,4,opt,name=last_used,json=lastUsed,proto3" json:"last_used,omitempty"` // Unix timestamp in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerImageInfo) Reset() {
	*x = DockerImageInfo{}
	mi := &file_runner_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerImageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerImageInfo) ProtoMessage() {}

func (x *DockerImageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerImageInfo.ProtoReflect.Descriptor instead.
func (*DockerImageInfo) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{5}
}

func (x *DockerImageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DockerImageInfo) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *DockerImageInfo) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *DockerImageInfo) GetLastUsed() int64 {
	if x != nil {
		return x.LastUsed
	}
	return 0
}

type DockerContainersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Containers    []*DockerContainerInfo `protobuf:"bytes,1,rep,name=containers,proto3" json:"containers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerContainersResponse) Reset() {
	*x = DockerContainersResponse{}
	mi := &file_runner_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerContainersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerContainersResponse) ProtoMessage() {}

func (x *DockerContainersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerContainersResponse.ProtoReflect.Descriptor instead.
func (*DockerContainersResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{6}
}

func (x *DockerContainersResponse) GetContainers() []*DockerContainerInfo {
	if x != nil {
		return x.Containers
	}
	return nil
}

type DockerContainerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ContainerId   string                 `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	ImageName     string                 `protobuf:"bytes,2,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	ExitCode      int32                  `protobuf:"varint,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	Running       bool                   `protobuf:"varint,4,opt,name=running,proto3" json:"running,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DockerContainerInfo) Reset() {
	*x = DockerContainerInfo{}
	mi := &file_runner_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DockerContainerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockerContainerInfo) ProtoMessage() {}

func (x *DockerContainerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockerContainerInfo.ProtoReflect.Descriptor instead.
func (*DockerContainerInfo) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{7}
}

func (x *DockerContainerInfo) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *DockerContainerInfo) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *DockerContainerInfo) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *DockerContainerInfo) GetRunning() bool {
	if x != nil {
		return x.Running
	}
	return false
}

type RunConfigContainerArguments struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Command       string                 `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	EnvVars       map[string]string      `protobuf:"bytes,2,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Args          []string               `protobuf:"bytes,3,rep,name=args,proto3" json:"args,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfigContainerArguments) Reset() {
	*x = RunConfigContainerArguments{}
	mi := &file_runner_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfigContainerArguments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfigContainerArguments) ProtoMessage() {}

func (x *RunConfigContainerArguments) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfigContainerArguments.ProtoReflect.Descriptor instead.
func (*RunConfigContainerArguments) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{8}
}

func (x *RunConfigContainerArguments) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunConfigContainerArguments) GetEnvVars() map[string]string {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *RunConfigContainerArguments) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

type RunConfigContainer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DockerImage   string                 `protobuf:"bytes,1,opt,name=docker_image,json=dockerImage,proto3" json:"docker_image,omitempty"`
	MaxMemory     string                 `protobuf:"bytes,2,opt,name=max_memory,json=maxMemory,proto3" json:"max_memory,omitempty"` // e.g., "512m" or "1g"
	MaxCpu        string                 `protobuf:"bytes,3,opt,name=max_cpu,json=maxCpu,proto3" json:"max_cpu,omitempty"`          // e.g., "1"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfigContainer) Reset() {
	*x = RunConfigContainer{}
	mi := &file_runner_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfigContainer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfigContainer) ProtoMessage() {}

func (x *RunConfigContainer) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfigContainer.ProtoReflect.Descriptor instead.
func (*RunConfigContainer) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{9}
}

func (x *RunConfigContainer) GetDockerImage() string {
	if x != nil {
		return x.DockerImage
	}
	return ""
}

func (x *RunConfigContainer) GetMaxMemory() string {
	if x != nil {
		return x.MaxMemory
	}
	return ""
}

func (x *RunConfigContainer) GetMaxCpu() string {
	if x != nil {
		return x.MaxCpu
	}
	return ""
}

type RunConfig struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	Container     *RunConfigContainer          `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Arguments     *RunConfigContainerArguments `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfig) Reset() {
	*x = RunConfig{}
	mi := &file_runner_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfig) ProtoMessage() {}

func (x *RunConfig) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfig.ProtoReflect.Descriptor instead.
func (*RunConfig) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{10}
}

func (x *RunConfig) GetContainer() *RunConfigContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *RunConfig) GetArguments() *RunConfigContainerArguments {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type RunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RunRequest_Init
	//	*RunRequest_McpMessage
	//	*RunRequest_Close
	Type          isRunRequest_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	mi := &file_runner_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{11}
}

func (x *RunRequest) GetType() isRunRequest_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RunRequest) GetInit() *RunRequestInit {
	if x != nil {
		if x, ok := x.Type.(*RunRequest_Init); ok {
			return x.Init
		}
	}
	return nil
}

func (x *RunRequest) GetMcpMessage() *RunRequestMcpMessage {
	if x != nil {
		if x, ok := x.Type.(*RunRequest_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *RunRequest) GetClose() *RunRequestClose {
	if x != nil {
		if x, ok := x.Type.(*RunRequest_Close); ok {
			return x.Close
		}
	}
	return nil
}

type isRunRequest_Type interface {
	isRunRequest_Type()
}

type RunRequest_Init struct {
	Init *RunRequestInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type RunRequest_McpMessage struct {
	McpMessage *RunRequestMcpMessage `protobuf:"bytes,2,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type RunRequest_Close struct {
	Close *RunRequestClose `protobuf:"bytes,3,opt,name=close,proto3,oneof"`
}

func (*RunRequest_Init) isRunRequest_Type() {}

func (*RunRequest_McpMessage) isRunRequest_Type() {}

func (*RunRequest_Close) isRunRequest_Type() {}

type RunRequestInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"` // Unique identifier for the run
	RunConfig     *RunConfig             `protobuf:"bytes,2,opt,name=run_config,json=runConfig,proto3" json:"run_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequestInit) Reset() {
	*x = RunRequestInit{}
	mi := &file_runner_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequestInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequestInit) ProtoMessage() {}

func (x *RunRequestInit) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequestInit.ProtoReflect.Descriptor instead.
func (*RunRequestInit) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{12}
}

func (x *RunRequestInit) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *RunRequestInit) GetRunConfig() *RunConfig {
	if x != nil {
		return x.RunConfig
	}
	return nil
}

type RunRequestMcpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *mcp.McpMessageRaw     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequestMcpMessage) Reset() {
	*x = RunRequestMcpMessage{}
	mi := &file_runner_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequestMcpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequestMcpMessage) ProtoMessage() {}

func (x *RunRequestMcpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequestMcpMessage.ProtoReflect.Descriptor instead.
func (*RunRequestMcpMessage) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{13}
}

func (x *RunRequestMcpMessage) GetMessage() *mcp.McpMessageRaw {
	if x != nil {
		return x.Message
	}
	return nil
}

type RunRequestClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequestClose) Reset() {
	*x = RunRequestClose{}
	mi := &file_runner_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequestClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequestClose) ProtoMessage() {}

func (x *RunRequestClose) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequestClose.ProtoReflect.Descriptor instead.
func (*RunRequestClose) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{14}
}

type RunResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RunResponse_McpMessage
	//	*RunResponse_Init
	//	*RunResponse_Output
	//	*RunResponse_Error
	//	*RunResponse_Close
	Type          isRunResponse_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	mi := &file_runner_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{15}
}

func (x *RunResponse) GetType() isRunResponse_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RunResponse) GetMcpMessage() *RunResponseMcpMessage {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *RunResponse) GetInit() *RunResponseInit {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_Init); ok {
			return x.Init
		}
	}
	return nil
}

func (x *RunResponse) GetOutput() *RunResponseOutput {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_Output); ok {
			return x.Output
		}
	}
	return nil
}

func (x *RunResponse) GetError() *RunResponseError {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *RunResponse) GetClose() *RunResponseClose {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_Close); ok {
			return x.Close
		}
	}
	return nil
}

type isRunResponse_Type interface {
	isRunResponse_Type()
}

type RunResponse_McpMessage struct {
	McpMessage *RunResponseMcpMessage `protobuf:"bytes,1,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type RunResponse_Init struct {
	Init *RunResponseInit `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type RunResponse_Output struct {
	Output *RunResponseOutput `protobuf:"bytes,3,opt,name=output,proto3,oneof"`
}

type RunResponse_Error struct {
	Error *RunResponseError `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type RunResponse_Close struct {
	Close *RunResponseClose `protobuf:"bytes,5,opt,name=close,proto3,oneof"`
}

func (*RunResponse_McpMessage) isRunResponse_Type() {}

func (*RunResponse_Init) isRunResponse_Type() {}

func (*RunResponse_Output) isRunResponse_Type() {}

func (*RunResponse_Error) isRunResponse_Type() {}

func (*RunResponse_Close) isRunResponse_Type() {}

type RunResponseInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseInit) Reset() {
	*x = RunResponseInit{}
	mi := &file_runner_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseInit) ProtoMessage() {}

func (x *RunResponseInit) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseInit.ProtoReflect.Descriptor instead.
func (*RunResponseInit) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{16}
}

type RunResponseMcpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *mcp.McpMessageRaw     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseMcpMessage) Reset() {
	*x = RunResponseMcpMessage{}
	mi := &file_runner_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseMcpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseMcpMessage) ProtoMessage() {}

func (x *RunResponseMcpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseMcpMessage.ProtoReflect.Descriptor instead.
func (*RunResponseMcpMessage) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{17}
}

func (x *RunResponseMcpMessage) GetMessage() *mcp.McpMessageRaw {
	if x != nil {
		return x.Message
	}
	return nil
}

type RunResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpError      *mcp.McpError          `protobuf:"bytes,1,opt,name=mcp_error,json=mcpError,proto3" json:"mcp_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseError) Reset() {
	*x = RunResponseError{}
	mi := &file_runner_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseError) ProtoMessage() {}

func (x *RunResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseError.ProtoReflect.Descriptor instead.
func (*RunResponseError) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{18}
}

func (x *RunResponseError) GetMcpError() *mcp.McpError {
	if x != nil {
		return x.McpError
	}
	return nil
}

type RunResponseOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpOutput     *mcp.McpOutput         `protobuf:"bytes,1,opt,name=mcp_output,json=mcpOutput,proto3" json:"mcp_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseOutput) Reset() {
	*x = RunResponseOutput{}
	mi := &file_runner_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseOutput) ProtoMessage() {}

func (x *RunResponseOutput) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseOutput.ProtoReflect.Descriptor instead.
func (*RunResponseOutput) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{19}
}

func (x *RunResponseOutput) GetMcpOutput() *mcp.McpOutput {
	if x != nil {
		return x.McpOutput
	}
	return nil
}

type RunResponseClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseClose) Reset() {
	*x = RunResponseClose{}
	mi := &file_runner_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseClose) ProtoMessage() {}

func (x *RunResponseClose) ProtoReflect() protoreflect.Message {
	mi := &file_runner_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseClose.ProtoReflect.Descriptor instead.
func (*RunResponseClose) Descriptor() ([]byte, []int) {
	return file_runner_proto_rawDescGZIP(), []int{20}
}

var File_runner_proto protoreflect.FileDescriptor

const file_runner_proto_rawDesc = "" +
	"\n" +
	"\frunner.proto\x12\rbroker.runner\x1a\tmcp.proto\x1a\fcommon.proto\x1a\fworker.proto\"\x13\n" +
	"\x11RunnerInfoRequest\"\xb5\x01\n" +
	"\x12RunnerInfoResponse\x12\x1b\n" +
	"\trunner_id\x18\x01 \x01(\tR\brunnerId\x12\x1f\n" +
	"\vactive_runs\x18\x02 \x01(\rR\n" +
	"activeRuns\x12\x1d\n" +
	"\n" +
	"total_runs\x18\x03 \x01(\x04R\ttotalRuns\x12B\n" +
	"\vworker_info\x18\x04 \x01(\v2!.broker.worker.WorkerInfoResponseR\n" +
	"workerInfo\"@\n" +
	"\x12ActiveRunsResponse\x12*\n" +
	"\x04runs\x18\x01 \x03(\v2\x16.broker.runner.RunInfoR\x04runs\"\xb5\x01\n" +
	"\aRunInfo\x12\x15\n" +
	"\x06run_id\x18\x01 \x01(\tR\x05runId\x12!\n" +
	"\fdocker_image\x18\x02 \x01(\tR\vdockerImage\x12\x1d\n" +
	"\n" +
	"max_memory\x18\x06 \x01(\tR\tmaxMemory\x12\x17\n" +
	"\amax_cpu\x18\a \x01(\tR\x06maxCpu\x12\x1d\n" +
	"\n" +
	"start_time\x18\x03 \x01(\x03R\tstartTime\x12\x19\n" +
	"\bend_time\x18\x04 \x01(\x03R\aendTime\"N\n" +
	"\x14DockerImagesResponse\x126\n" +
	"\x06images\x18\x01 \x03(\v2\x1e.broker.runner.DockerImageInfoR\x06images\"o\n" +
	"\x0fDockerImageInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x10\n" +
	"\x03tag\x18\x02 \x01(\tR\x03tag\x12\x19\n" +
	"\bimage_id\x18\x03 \x01(\tR\aimageId\x12\x1b\n" +
	"\tlast_used\x18\x04 \x01(\x03R\blastUsed\"^\n" +
	"\x18DockerContainersResponse\x12B\n" +
	"\n" +
	"containers\x18\x01 \x03(\v2\".broker.runner.DockerContainerInfoR\n" +
	"containers\"\x8e\x01\n" +
	"\x13DockerContainerInfo\x12!\n" +
	"\fcontainer_id\x18\x01 \x01(\tR\vcontainerId\x12\x1d\n" +
	"\n" +
	"image_name\x18\x02 \x01(\tR\timageName\x12\x1b\n" +
	"\texit_code\x18\x03 \x01(\x05R\bexitCode\x12\x18\n" +
	"\arunning\x18\x04 \x01(\bR\arunning\"\xdb\x01\n" +
	"\x1bRunConfigContainerArguments\x12\x18\n" +
	"\acommand\x18\x01 \x01(\tR\acommand\x12R\n" +
	"\benv_vars\x18\x02 \x03(\v27.broker.runner.RunConfigContainerArguments.EnvVarsEntryR\aenvVars\x12\x12\n" +
	"\x04args\x18\x03 \x03(\tR\x04args\x1a:\n" +
	"\fEnvVarsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"o\n" +
	"\x12RunConfigContainer\x12!\n" +
	"\fdocker_image\x18\x01 \x01(\tR\vdockerImage\x12\x1d\n" +
	"\n" +
	"max_memory\x18\x02 \x01(\tR\tmaxMemory\x12\x17\n" +
	"\amax_cpu\x18\x03 \x01(\tR\x06maxCpu\"\x96\x01\n" +
	"\tRunConfig\x12?\n" +
	"\tcontainer\x18\x01 \x01(\v2!.broker.runner.RunConfigContainerR\tcontainer\x12H\n" +
	"\targuments\x18\x02 \x01(\v2*.broker.runner.RunConfigContainerArgumentsR\targuments\"\xc9\x01\n" +
	"\n" +
	"RunRequest\x123\n" +
	"\x04init\x18\x01 \x01(\v2\x1d.broker.runner.RunRequestInitH\x00R\x04init\x12F\n" +
	"\vmcp_message\x18\x02 \x01(\v2#.broker.runner.RunRequestMcpMessageH\x00R\n" +
	"mcpMessage\x126\n" +
	"\x05close\x18\x03 \x01(\v2\x1e.broker.runner.RunRequestCloseH\x00R\x05closeB\x06\n" +
	"\x04type\"n\n" +
	"\x0eRunRequestInit\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\x127\n" +
	"\n" +
	"run_config\x18\x02 \x01(\v2\x18.broker.runner.RunConfigR\trunConfig\"K\n" +
	"\x14RunRequestMcpMessage\x123\n" +
	"\amessage\x18\x01 \x01(\v2\x19.broker.mcp.McpMessageRawR\amessage\"\x11\n" +
	"\x0fRunRequestClose\"\xc2\x02\n" +
	"\vRunResponse\x12G\n" +
	"\vmcp_message\x18\x01 \x01(\v2$.broker.runner.RunResponseMcpMessageH\x00R\n" +
	"mcpMessage\x124\n" +
	"\x04init\x18\x02 \x01(\v2\x1e.broker.runner.RunResponseInitH\x00R\x04init\x12:\n" +
	"\x06output\x18\x03 \x01(\v2 .broker.runner.RunResponseOutputH\x00R\x06output\x127\n" +
	"\x05error\x18\x04 \x01(\v2\x1f.broker.runner.RunResponseErrorH\x00R\x05error\x127\n" +
	"\x05close\x18\x05 \x01(\v2\x1f.broker.runner.RunResponseCloseH\x00R\x05closeB\x06\n" +
	"\x04type\"\x11\n" +
	"\x0fRunResponseInit\"L\n" +
	"\x15RunResponseMcpMessage\x123\n" +
	"\amessage\x18\x01 \x01(\v2\x19.broker.mcp.McpMessageRawR\amessage\"E\n" +
	"\x10RunResponseError\x121\n" +
	"\tmcp_error\x18\x01 \x01(\v2\x14.broker.mcp.McpErrorR\bmcpError\"I\n" +
	"\x11RunResponseOutput\x124\n" +
	"\n" +
	"mcp_output\x18\x01 \x01(\v2\x15.broker.mcp.McpOutputR\tmcpOutput\"\x12\n" +
	"\x10RunResponseClose2\x9d\x03\n" +
	"\tMcpRunner\x12T\n" +
	"\rGetRunnerInfo\x12 .broker.runner.RunnerInfoRequest\x1a!.broker.runner.RunnerInfoResponse\x12I\n" +
	"\x0eListActiveRuns\x12\x14.broker.common.Empty\x1a!.broker.runner.ActiveRunsResponse\x12M\n" +
	"\x10ListDockerImages\x12\x14.broker.common.Empty\x1a#.broker.runner.DockerImagesResponse\x12U\n" +
	"\x14ListDockerContainers\x12\x14.broker.common.Empty\x1a'.broker.runner.DockerContainersResponse\x12I\n" +
	"\fStreamMcpRun\x12\x19.broker.runner.RunRequest\x1a\x1a.broker.runner.RunResponse(\x010\x01BFZDgithub.com/metorial/metorial/mcp-engine/gen/mcp-engine/runner;runnerb\x06proto3"

var (
	file_runner_proto_rawDescOnce sync.Once
	file_runner_proto_rawDescData []byte
)

func file_runner_proto_rawDescGZIP() []byte {
	file_runner_proto_rawDescOnce.Do(func() {
		file_runner_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_runner_proto_rawDesc), len(file_runner_proto_rawDesc)))
	})
	return file_runner_proto_rawDescData
}

var file_runner_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_runner_proto_goTypes = []any{
	(*RunnerInfoRequest)(nil),           // 0: broker.runner.RunnerInfoRequest
	(*RunnerInfoResponse)(nil),          // 1: broker.runner.RunnerInfoResponse
	(*ActiveRunsResponse)(nil),          // 2: broker.runner.ActiveRunsResponse
	(*RunInfo)(nil),                     // 3: broker.runner.RunInfo
	(*DockerImagesResponse)(nil),        // 4: broker.runner.DockerImagesResponse
	(*DockerImageInfo)(nil),             // 5: broker.runner.DockerImageInfo
	(*DockerContainersResponse)(nil),    // 6: broker.runner.DockerContainersResponse
	(*DockerContainerInfo)(nil),         // 7: broker.runner.DockerContainerInfo
	(*RunConfigContainerArguments)(nil), // 8: broker.runner.RunConfigContainerArguments
	(*RunConfigContainer)(nil),          // 9: broker.runner.RunConfigContainer
	(*RunConfig)(nil),                   // 10: broker.runner.RunConfig
	(*RunRequest)(nil),                  // 11: broker.runner.RunRequest
	(*RunRequestInit)(nil),              // 12: broker.runner.RunRequestInit
	(*RunRequestMcpMessage)(nil),        // 13: broker.runner.RunRequestMcpMessage
	(*RunRequestClose)(nil),             // 14: broker.runner.RunRequestClose
	(*RunResponse)(nil),                 // 15: broker.runner.RunResponse
	(*RunResponseInit)(nil),             // 16: broker.runner.RunResponseInit
	(*RunResponseMcpMessage)(nil),       // 17: broker.runner.RunResponseMcpMessage
	(*RunResponseError)(nil),            // 18: broker.runner.RunResponseError
	(*RunResponseOutput)(nil),           // 19: broker.runner.RunResponseOutput
	(*RunResponseClose)(nil),            // 20: broker.runner.RunResponseClose
	nil,                                 // 21: broker.runner.RunConfigContainerArguments.EnvVarsEntry
	(*worker.WorkerInfoResponse)(nil),   // 22: broker.worker.WorkerInfoResponse
	(*mcp.McpMessageRaw)(nil),           // 23: broker.mcp.McpMessageRaw
	(*mcp.McpError)(nil),                // 24: broker.mcp.McpError
	(*mcp.McpOutput)(nil),               // 25: broker.mcp.McpOutput
	(*common.Empty)(nil),                // 26: broker.common.Empty
}
var file_runner_proto_depIdxs = []int32{
	22, // 0: broker.runner.RunnerInfoResponse.worker_info:type_name -> broker.worker.WorkerInfoResponse
	3,  // 1: broker.runner.ActiveRunsResponse.runs:type_name -> broker.runner.RunInfo
	5,  // 2: broker.runner.DockerImagesResponse.images:type_name -> broker.runner.DockerImageInfo
	7,  // 3: broker.runner.DockerContainersResponse.containers:type_name -> broker.runner.DockerContainerInfo
	21, // 4: broker.runner.RunConfigContainerArguments.env_vars:type_name -> broker.runner.RunConfigContainerArguments.EnvVarsEntry
	9,  // 5: broker.runner.RunConfig.container:type_name -> broker.runner.RunConfigContainer
	8,  // 6: broker.runner.RunConfig.arguments:type_name -> broker.runner.RunConfigContainerArguments
	12, // 7: broker.runner.RunRequest.init:type_name -> broker.runner.RunRequestInit
	13, // 8: broker.runner.RunRequest.mcp_message:type_name -> broker.runner.RunRequestMcpMessage
	14, // 9: broker.runner.RunRequest.close:type_name -> broker.runner.RunRequestClose
	10, // 10: broker.runner.RunRequestInit.run_config:type_name -> broker.runner.RunConfig
	23, // 11: broker.runner.RunRequestMcpMessage.message:type_name -> broker.mcp.McpMessageRaw
	17, // 12: broker.runner.RunResponse.mcp_message:type_name -> broker.runner.RunResponseMcpMessage
	16, // 13: broker.runner.RunResponse.init:type_name -> broker.runner.RunResponseInit
	19, // 14: broker.runner.RunResponse.output:type_name -> broker.runner.RunResponseOutput
	18, // 15: broker.runner.RunResponse.error:type_name -> broker.runner.RunResponseError
	20, // 16: broker.runner.RunResponse.close:type_name -> broker.runner.RunResponseClose
	23, // 17: broker.runner.RunResponseMcpMessage.message:type_name -> broker.mcp.McpMessageRaw
	24, // 18: broker.runner.RunResponseError.mcp_error:type_name -> broker.mcp.McpError
	25, // 19: broker.runner.RunResponseOutput.mcp_output:type_name -> broker.mcp.McpOutput
	0,  // 20: broker.runner.McpRunner.GetRunnerInfo:input_type -> broker.runner.RunnerInfoRequest
	26, // 21: broker.runner.McpRunner.ListActiveRuns:input_type -> broker.common.Empty
	26, // 22: broker.runner.McpRunner.ListDockerImages:input_type -> broker.common.Empty
	26, // 23: broker.runner.McpRunner.ListDockerContainers:input_type -> broker.common.Empty
	11, // 24: broker.runner.McpRunner.StreamMcpRun:input_type -> broker.runner.RunRequest
	1,  // 25: broker.runner.McpRunner.GetRunnerInfo:output_type -> broker.runner.RunnerInfoResponse
	2,  // 26: broker.runner.McpRunner.ListActiveRuns:output_type -> broker.runner.ActiveRunsResponse
	4,  // 27: broker.runner.McpRunner.ListDockerImages:output_type -> broker.runner.DockerImagesResponse
	6,  // 28: broker.runner.McpRunner.ListDockerContainers:output_type -> broker.runner.DockerContainersResponse
	15, // 29: broker.runner.McpRunner.StreamMcpRun:output_type -> broker.runner.RunResponse
	25, // [25:30] is the sub-list for method output_type
	20, // [20:25] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_runner_proto_init() }
func file_runner_proto_init() {
	if File_runner_proto != nil {
		return
	}
	file_runner_proto_msgTypes[11].OneofWrappers = []any{
		(*RunRequest_Init)(nil),
		(*RunRequest_McpMessage)(nil),
		(*RunRequest_Close)(nil),
	}
	file_runner_proto_msgTypes[15].OneofWrappers = []any{
		(*RunResponse_McpMessage)(nil),
		(*RunResponse_Init)(nil),
		(*RunResponse_Output)(nil),
		(*RunResponse_Error)(nil),
		(*RunResponse_Close)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_runner_proto_rawDesc), len(file_runner_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_runner_proto_goTypes,
		DependencyIndexes: file_runner_proto_depIdxs,
		MessageInfos:      file_runner_proto_msgTypes,
	}.Build()
	File_runner_proto = out.File
	file_runner_proto_goTypes = nil
	file_runner_proto_depIdxs = nil
}
