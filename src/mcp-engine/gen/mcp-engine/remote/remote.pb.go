// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.8
// 	protoc        v6.32.0
// source: remote.proto

package remote

import (
	mcp "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/mcp"
	worker "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/worker"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunConfigRemoteServer_ServerProtocol int32

const (
	RunConfigRemoteServer_sse             RunConfigRemoteServer_ServerProtocol = 0 // Server-Sent Events
	RunConfigRemoteServer_streamable_http RunConfigRemoteServer_ServerProtocol = 1 // Streamable HTTP
)

// Enum value maps for RunConfigRemoteServer_ServerProtocol.
var (
	RunConfigRemoteServer_ServerProtocol_name = map[int32]string{
		0: "sse",
		1: "streamable_http",
	}
	RunConfigRemoteServer_ServerProtocol_value = map[string]int32{
		"sse":             0,
		"streamable_http": 1,
	}
)

func (x RunConfigRemoteServer_ServerProtocol) Enum() *RunConfigRemoteServer_ServerProtocol {
	p := new(RunConfigRemoteServer_ServerProtocol)
	*p = x
	return p
}

func (x RunConfigRemoteServer_ServerProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunConfigRemoteServer_ServerProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_remote_proto_enumTypes[0].Descriptor()
}

func (RunConfigRemoteServer_ServerProtocol) Type() protoreflect.EnumType {
	return &file_remote_proto_enumTypes[0]
}

func (x RunConfigRemoteServer_ServerProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunConfigRemoteServer_ServerProtocol.Descriptor instead.
func (RunConfigRemoteServer_ServerProtocol) EnumDescriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{2, 0}
}

type RemoteInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteInfoRequest) Reset() {
	*x = RemoteInfoRequest{}
	mi := &file_remote_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteInfoRequest) ProtoMessage() {}

func (x *RemoteInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteInfoRequest.ProtoReflect.Descriptor instead.
func (*RemoteInfoRequest) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{0}
}

type RemoteInfoResponse struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	WorkerId          string                     `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	ActiveConnections uint32                     `protobuf:"varint,2,opt,name=active_connections,json=activeConnections,proto3" json:"active_connections,omitempty"`
	TotalConnections  uint64                     `protobuf:"varint,3,opt,name=total_connections,json=totalConnections,proto3" json:"total_connections,omitempty"`
	WorkerInfo        *worker.WorkerInfoResponse `protobuf:"bytes,4,opt,name=worker_info,json=workerInfo,proto3" json:"worker_info,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *RemoteInfoResponse) Reset() {
	*x = RemoteInfoResponse{}
	mi := &file_remote_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteInfoResponse) ProtoMessage() {}

func (x *RemoteInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteInfoResponse.ProtoReflect.Descriptor instead.
func (*RemoteInfoResponse) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{1}
}

func (x *RemoteInfoResponse) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *RemoteInfoResponse) GetActiveConnections() uint32 {
	if x != nil {
		return x.ActiveConnections
	}
	return 0
}

func (x *RemoteInfoResponse) GetTotalConnections() uint64 {
	if x != nil {
		return x.TotalConnections
	}
	return 0
}

func (x *RemoteInfoResponse) GetWorkerInfo() *worker.WorkerInfoResponse {
	if x != nil {
		return x.WorkerInfo
	}
	return nil
}

type RunConfigRemoteServer struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	ServerUri     string                               `protobuf:"bytes,1,opt,name=server_uri,json=serverUri,proto3" json:"server_uri,omitempty"`
	Protocol      RunConfigRemoteServer_ServerProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=broker.remote.RunConfigRemoteServer_ServerProtocol" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfigRemoteServer) Reset() {
	*x = RunConfigRemoteServer{}
	mi := &file_remote_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfigRemoteServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfigRemoteServer) ProtoMessage() {}

func (x *RunConfigRemoteServer) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfigRemoteServer.ProtoReflect.Descriptor instead.
func (*RunConfigRemoteServer) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{2}
}

func (x *RunConfigRemoteServer) GetServerUri() string {
	if x != nil {
		return x.ServerUri
	}
	return ""
}

func (x *RunConfigRemoteServer) GetProtocol() RunConfigRemoteServer_ServerProtocol {
	if x != nil {
		return x.Protocol
	}
	return RunConfigRemoteServer_sse
}

type RunConfigRemoteArguments struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Headers       map[string]string      `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Query         map[string]string      `protobuf:"bytes,2,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfigRemoteArguments) Reset() {
	*x = RunConfigRemoteArguments{}
	mi := &file_remote_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfigRemoteArguments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfigRemoteArguments) ProtoMessage() {}

func (x *RunConfigRemoteArguments) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfigRemoteArguments.ProtoReflect.Descriptor instead.
func (*RunConfigRemoteArguments) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{3}
}

func (x *RunConfigRemoteArguments) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RunConfigRemoteArguments) GetQuery() map[string]string {
	if x != nil {
		return x.Query
	}
	return nil
}

type RunConfig struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Server        *RunConfigRemoteServer    `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Arguments     *RunConfigRemoteArguments `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfig) Reset() {
	*x = RunConfig{}
	mi := &file_remote_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfig) ProtoMessage() {}

func (x *RunConfig) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfig.ProtoReflect.Descriptor instead.
func (*RunConfig) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{4}
}

func (x *RunConfig) GetServer() *RunConfigRemoteServer {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *RunConfig) GetArguments() *RunConfigRemoteArguments {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type RunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RunRequest_Init
	//	*RunRequest_McpMessage
	//	*RunRequest_Close
	Type          isRunRequest_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	mi := &file_remote_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{5}
}

func (x *RunRequest) GetType() isRunRequest_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RunRequest) GetInit() *RunRequestInit {
	if x != nil {
		if x, ok := x.Type.(*RunRequest_Init); ok {
			return x.Init
		}
	}
	return nil
}

func (x *RunRequest) GetMcpMessage() *RunRequestMcpMessage {
	if x != nil {
		if x, ok := x.Type.(*RunRequest_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *RunRequest) GetClose() *RunRequestClose {
	if x != nil {
		if x, ok := x.Type.(*RunRequest_Close); ok {
			return x.Close
		}
	}
	return nil
}

type isRunRequest_Type interface {
	isRunRequest_Type()
}

type RunRequest_Init struct {
	Init *RunRequestInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type RunRequest_McpMessage struct {
	McpMessage *RunRequestMcpMessage `protobuf:"bytes,2,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type RunRequest_Close struct {
	Close *RunRequestClose `protobuf:"bytes,3,opt,name=close,proto3,oneof"`
}

func (*RunRequest_Init) isRunRequest_Type() {}

func (*RunRequest_McpMessage) isRunRequest_Type() {}

func (*RunRequest_Close) isRunRequest_Type() {}

type RunRequestInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	RunConfig     *RunConfig             `protobuf:"bytes,2,opt,name=run_config,json=runConfig,proto3" json:"run_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequestInit) Reset() {
	*x = RunRequestInit{}
	mi := &file_remote_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequestInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequestInit) ProtoMessage() {}

func (x *RunRequestInit) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequestInit.ProtoReflect.Descriptor instead.
func (*RunRequestInit) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{6}
}

func (x *RunRequestInit) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *RunRequestInit) GetRunConfig() *RunConfig {
	if x != nil {
		return x.RunConfig
	}
	return nil
}

type RunRequestMcpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *mcp.McpMessageRaw     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequestMcpMessage) Reset() {
	*x = RunRequestMcpMessage{}
	mi := &file_remote_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequestMcpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequestMcpMessage) ProtoMessage() {}

func (x *RunRequestMcpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequestMcpMessage.ProtoReflect.Descriptor instead.
func (*RunRequestMcpMessage) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{7}
}

func (x *RunRequestMcpMessage) GetMessage() *mcp.McpMessageRaw {
	if x != nil {
		return x.Message
	}
	return nil
}

type RunRequestClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequestClose) Reset() {
	*x = RunRequestClose{}
	mi := &file_remote_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequestClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequestClose) ProtoMessage() {}

func (x *RunRequestClose) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequestClose.ProtoReflect.Descriptor instead.
func (*RunRequestClose) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{8}
}

type RunResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Type:
	//
	//	*RunResponse_McpMessage
	//	*RunResponse_Init
	//	*RunResponse_Output
	//	*RunResponse_Error
	//	*RunResponse_Close
	Type          isRunResponse_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	mi := &file_remote_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{9}
}

func (x *RunResponse) GetType() isRunResponse_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RunResponse) GetMcpMessage() *RunResponseMcpMessage {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *RunResponse) GetInit() *RunResponseInit {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_Init); ok {
			return x.Init
		}
	}
	return nil
}

func (x *RunResponse) GetOutput() *RunResponseOutput {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_Output); ok {
			return x.Output
		}
	}
	return nil
}

func (x *RunResponse) GetError() *RunResponseError {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *RunResponse) GetClose() *RunResponseClose {
	if x != nil {
		if x, ok := x.Type.(*RunResponse_Close); ok {
			return x.Close
		}
	}
	return nil
}

type isRunResponse_Type interface {
	isRunResponse_Type()
}

type RunResponse_McpMessage struct {
	McpMessage *RunResponseMcpMessage `protobuf:"bytes,1,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type RunResponse_Init struct {
	Init *RunResponseInit `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type RunResponse_Output struct {
	Output *RunResponseOutput `protobuf:"bytes,3,opt,name=output,proto3,oneof"`
}

type RunResponse_Error struct {
	Error *RunResponseError `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type RunResponse_Close struct {
	Close *RunResponseClose `protobuf:"bytes,5,opt,name=close,proto3,oneof"`
}

func (*RunResponse_McpMessage) isRunResponse_Type() {}

func (*RunResponse_Init) isRunResponse_Type() {}

func (*RunResponse_Output) isRunResponse_Type() {}

func (*RunResponse_Error) isRunResponse_Type() {}

func (*RunResponse_Close) isRunResponse_Type() {}

type RunResponseInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseInit) Reset() {
	*x = RunResponseInit{}
	mi := &file_remote_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseInit) ProtoMessage() {}

func (x *RunResponseInit) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseInit.ProtoReflect.Descriptor instead.
func (*RunResponseInit) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{10}
}

type RunResponseMcpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *mcp.McpMessage        `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseMcpMessage) Reset() {
	*x = RunResponseMcpMessage{}
	mi := &file_remote_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseMcpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseMcpMessage) ProtoMessage() {}

func (x *RunResponseMcpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseMcpMessage.ProtoReflect.Descriptor instead.
func (*RunResponseMcpMessage) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{11}
}

func (x *RunResponseMcpMessage) GetMessage() *mcp.McpMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

type RunResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpError      *mcp.McpError          `protobuf:"bytes,1,opt,name=mcp_error,json=mcpError,proto3" json:"mcp_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseError) Reset() {
	*x = RunResponseError{}
	mi := &file_remote_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseError) ProtoMessage() {}

func (x *RunResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseError.ProtoReflect.Descriptor instead.
func (*RunResponseError) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{12}
}

func (x *RunResponseError) GetMcpError() *mcp.McpError {
	if x != nil {
		return x.McpError
	}
	return nil
}

type RunResponseOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpOutput     *mcp.McpOutput         `protobuf:"bytes,1,opt,name=mcp_output,json=mcpOutput,proto3" json:"mcp_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseOutput) Reset() {
	*x = RunResponseOutput{}
	mi := &file_remote_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseOutput) ProtoMessage() {}

func (x *RunResponseOutput) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseOutput.ProtoReflect.Descriptor instead.
func (*RunResponseOutput) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{13}
}

func (x *RunResponseOutput) GetMcpOutput() *mcp.McpOutput {
	if x != nil {
		return x.McpOutput
	}
	return nil
}

type RunResponseClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseClose) Reset() {
	*x = RunResponseClose{}
	mi := &file_remote_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseClose) ProtoMessage() {}

func (x *RunResponseClose) ProtoReflect() protoreflect.Message {
	mi := &file_remote_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseClose.ProtoReflect.Descriptor instead.
func (*RunResponseClose) Descriptor() ([]byte, []int) {
	return file_remote_proto_rawDescGZIP(), []int{14}
}

var File_remote_proto protoreflect.FileDescriptor

const file_remote_proto_rawDesc = "" +
	"\n" +
	"\fremote.proto\x12\rbroker.remote\x1a\tmcp.proto\x1a\fworker.proto\"\x13\n" +
	"\x11RemoteInfoRequest\"\xd1\x01\n" +
	"\x12RemoteInfoResponse\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12-\n" +
	"\x12active_connections\x18\x02 \x01(\rR\x11activeConnections\x12+\n" +
	"\x11total_connections\x18\x03 \x01(\x04R\x10totalConnections\x12B\n" +
	"\vworker_info\x18\x04 \x01(\v2!.broker.worker.WorkerInfoResponseR\n" +
	"workerInfo\"\xb7\x01\n" +
	"\x15RunConfigRemoteServer\x12\x1d\n" +
	"\n" +
	"server_uri\x18\x01 \x01(\tR\tserverUri\x12O\n" +
	"\bprotocol\x18\x02 \x01(\x0e23.broker.remote.RunConfigRemoteServer.ServerProtocolR\bprotocol\".\n" +
	"\x0eServerProtocol\x12\a\n" +
	"\x03sse\x10\x00\x12\x13\n" +
	"\x0fstreamable_http\x10\x01\"\xaa\x02\n" +
	"\x18RunConfigRemoteArguments\x12N\n" +
	"\aheaders\x18\x01 \x03(\v24.broker.remote.RunConfigRemoteArguments.HeadersEntryR\aheaders\x12H\n" +
	"\x05query\x18\x02 \x03(\v22.broker.remote.RunConfigRemoteArguments.QueryEntryR\x05query\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a8\n" +
	"\n" +
	"QueryEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x90\x01\n" +
	"\tRunConfig\x12<\n" +
	"\x06server\x18\x01 \x01(\v2$.broker.remote.RunConfigRemoteServerR\x06server\x12E\n" +
	"\targuments\x18\x02 \x01(\v2'.broker.remote.RunConfigRemoteArgumentsR\targuments\"\xc9\x01\n" +
	"\n" +
	"RunRequest\x123\n" +
	"\x04init\x18\x01 \x01(\v2\x1d.broker.remote.RunRequestInitH\x00R\x04init\x12F\n" +
	"\vmcp_message\x18\x02 \x01(\v2#.broker.remote.RunRequestMcpMessageH\x00R\n" +
	"mcpMessage\x126\n" +
	"\x05close\x18\x03 \x01(\v2\x1e.broker.remote.RunRequestCloseH\x00R\x05closeB\x06\n" +
	"\x04type\"n\n" +
	"\x0eRunRequestInit\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\x127\n" +
	"\n" +
	"run_config\x18\x02 \x01(\v2\x18.broker.remote.RunConfigR\trunConfig\"K\n" +
	"\x14RunRequestMcpMessage\x123\n" +
	"\amessage\x18\x01 \x01(\v2\x19.broker.mcp.McpMessageRawR\amessage\"\x11\n" +
	"\x0fRunRequestClose\"\xc2\x02\n" +
	"\vRunResponse\x12G\n" +
	"\vmcp_message\x18\x01 \x01(\v2$.broker.remote.RunResponseMcpMessageH\x00R\n" +
	"mcpMessage\x124\n" +
	"\x04init\x18\x02 \x01(\v2\x1e.broker.remote.RunResponseInitH\x00R\x04init\x12:\n" +
	"\x06output\x18\x03 \x01(\v2 .broker.remote.RunResponseOutputH\x00R\x06output\x127\n" +
	"\x05error\x18\x04 \x01(\v2\x1f.broker.remote.RunResponseErrorH\x00R\x05error\x127\n" +
	"\x05close\x18\x05 \x01(\v2\x1f.broker.remote.RunResponseCloseH\x00R\x05closeB\x06\n" +
	"\x04type\"\x11\n" +
	"\x0fRunResponseInit\"I\n" +
	"\x15RunResponseMcpMessage\x120\n" +
	"\amessage\x18\x01 \x01(\v2\x16.broker.mcp.McpMessageR\amessage\"E\n" +
	"\x10RunResponseError\x121\n" +
	"\tmcp_error\x18\x01 \x01(\v2\x14.broker.mcp.McpErrorR\bmcpError\"I\n" +
	"\x11RunResponseOutput\x124\n" +
	"\n" +
	"mcp_output\x18\x01 \x01(\v2\x15.broker.mcp.McpOutputR\tmcpOutput\"\x12\n" +
	"\x10RunResponseClose2V\n" +
	"\tMcpRemote\x12I\n" +
	"\fStreamMcpRun\x12\x19.broker.remote.RunRequest\x1a\x1a.broker.remote.RunResponse(\x010\x01BFZDgithub.com/metorial/metorial/mcp-engine/gen/mcp-engine/remote;remoteb\x06proto3"

var (
	file_remote_proto_rawDescOnce sync.Once
	file_remote_proto_rawDescData []byte
)

func file_remote_proto_rawDescGZIP() []byte {
	file_remote_proto_rawDescOnce.Do(func() {
		file_remote_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_remote_proto_rawDesc), len(file_remote_proto_rawDesc)))
	})
	return file_remote_proto_rawDescData
}

var file_remote_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_remote_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_remote_proto_goTypes = []any{
	(RunConfigRemoteServer_ServerProtocol)(0), // 0: broker.remote.RunConfigRemoteServer.ServerProtocol
	(*RemoteInfoRequest)(nil),                 // 1: broker.remote.RemoteInfoRequest
	(*RemoteInfoResponse)(nil),                // 2: broker.remote.RemoteInfoResponse
	(*RunConfigRemoteServer)(nil),             // 3: broker.remote.RunConfigRemoteServer
	(*RunConfigRemoteArguments)(nil),          // 4: broker.remote.RunConfigRemoteArguments
	(*RunConfig)(nil),                         // 5: broker.remote.RunConfig
	(*RunRequest)(nil),                        // 6: broker.remote.RunRequest
	(*RunRequestInit)(nil),                    // 7: broker.remote.RunRequestInit
	(*RunRequestMcpMessage)(nil),              // 8: broker.remote.RunRequestMcpMessage
	(*RunRequestClose)(nil),                   // 9: broker.remote.RunRequestClose
	(*RunResponse)(nil),                       // 10: broker.remote.RunResponse
	(*RunResponseInit)(nil),                   // 11: broker.remote.RunResponseInit
	(*RunResponseMcpMessage)(nil),             // 12: broker.remote.RunResponseMcpMessage
	(*RunResponseError)(nil),                  // 13: broker.remote.RunResponseError
	(*RunResponseOutput)(nil),                 // 14: broker.remote.RunResponseOutput
	(*RunResponseClose)(nil),                  // 15: broker.remote.RunResponseClose
	nil,                                       // 16: broker.remote.RunConfigRemoteArguments.HeadersEntry
	nil,                                       // 17: broker.remote.RunConfigRemoteArguments.QueryEntry
	(*worker.WorkerInfoResponse)(nil),         // 18: broker.worker.WorkerInfoResponse
	(*mcp.McpMessageRaw)(nil),                 // 19: broker.mcp.McpMessageRaw
	(*mcp.McpMessage)(nil),                    // 20: broker.mcp.McpMessage
	(*mcp.McpError)(nil),                      // 21: broker.mcp.McpError
	(*mcp.McpOutput)(nil),                     // 22: broker.mcp.McpOutput
}
var file_remote_proto_depIdxs = []int32{
	18, // 0: broker.remote.RemoteInfoResponse.worker_info:type_name -> broker.worker.WorkerInfoResponse
	0,  // 1: broker.remote.RunConfigRemoteServer.protocol:type_name -> broker.remote.RunConfigRemoteServer.ServerProtocol
	16, // 2: broker.remote.RunConfigRemoteArguments.headers:type_name -> broker.remote.RunConfigRemoteArguments.HeadersEntry
	17, // 3: broker.remote.RunConfigRemoteArguments.query:type_name -> broker.remote.RunConfigRemoteArguments.QueryEntry
	3,  // 4: broker.remote.RunConfig.server:type_name -> broker.remote.RunConfigRemoteServer
	4,  // 5: broker.remote.RunConfig.arguments:type_name -> broker.remote.RunConfigRemoteArguments
	7,  // 6: broker.remote.RunRequest.init:type_name -> broker.remote.RunRequestInit
	8,  // 7: broker.remote.RunRequest.mcp_message:type_name -> broker.remote.RunRequestMcpMessage
	9,  // 8: broker.remote.RunRequest.close:type_name -> broker.remote.RunRequestClose
	5,  // 9: broker.remote.RunRequestInit.run_config:type_name -> broker.remote.RunConfig
	19, // 10: broker.remote.RunRequestMcpMessage.message:type_name -> broker.mcp.McpMessageRaw
	12, // 11: broker.remote.RunResponse.mcp_message:type_name -> broker.remote.RunResponseMcpMessage
	11, // 12: broker.remote.RunResponse.init:type_name -> broker.remote.RunResponseInit
	14, // 13: broker.remote.RunResponse.output:type_name -> broker.remote.RunResponseOutput
	13, // 14: broker.remote.RunResponse.error:type_name -> broker.remote.RunResponseError
	15, // 15: broker.remote.RunResponse.close:type_name -> broker.remote.RunResponseClose
	20, // 16: broker.remote.RunResponseMcpMessage.message:type_name -> broker.mcp.McpMessage
	21, // 17: broker.remote.RunResponseError.mcp_error:type_name -> broker.mcp.McpError
	22, // 18: broker.remote.RunResponseOutput.mcp_output:type_name -> broker.mcp.McpOutput
	6,  // 19: broker.remote.McpRemote.StreamMcpRun:input_type -> broker.remote.RunRequest
	10, // 20: broker.remote.McpRemote.StreamMcpRun:output_type -> broker.remote.RunResponse
	20, // [20:21] is the sub-list for method output_type
	19, // [19:20] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_remote_proto_init() }
func file_remote_proto_init() {
	if File_remote_proto != nil {
		return
	}
	file_remote_proto_msgTypes[5].OneofWrappers = []any{
		(*RunRequest_Init)(nil),
		(*RunRequest_McpMessage)(nil),
		(*RunRequest_Close)(nil),
	}
	file_remote_proto_msgTypes[9].OneofWrappers = []any{
		(*RunResponse_McpMessage)(nil),
		(*RunResponse_Init)(nil),
		(*RunResponse_Output)(nil),
		(*RunResponse_Error)(nil),
		(*RunResponse_Close)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_remote_proto_rawDesc), len(file_remote_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_remote_proto_goTypes,
		DependencyIndexes: file_remote_proto_depIdxs,
		EnumInfos:         file_remote_proto_enumTypes,
		MessageInfos:      file_remote_proto_msgTypes,
	}.Build()
	File_remote_proto = out.File
	file_remote_proto_goTypes = nil
	file_remote_proto_depIdxs = nil
}
