// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: workerBroker.proto

package workerBroker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	McpWorkerBroker_ListManagers_FullMethodName   = "/broker.workerBroker.McpWorkerBroker/ListManagers"
	McpWorkerBroker_RegisterWorker_FullMethodName = "/broker.workerBroker.McpWorkerBroker/RegisterWorker"
)

// McpWorkerBrokerClient is the client API for McpWorkerBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McpWorkerBrokerClient interface {
	ListManagers(ctx context.Context, in *ListManagersRequest, opts ...grpc.CallOption) (*ListManagersResponse, error)
	RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error)
}

type mcpWorkerBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewMcpWorkerBrokerClient(cc grpc.ClientConnInterface) McpWorkerBrokerClient {
	return &mcpWorkerBrokerClient{cc}
}

func (c *mcpWorkerBrokerClient) ListManagers(ctx context.Context, in *ListManagersRequest, opts ...grpc.CallOption) (*ListManagersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListManagersResponse)
	err := c.cc.Invoke(ctx, McpWorkerBroker_ListManagers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpWorkerBrokerClient) RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWorkerResponse)
	err := c.cc.Invoke(ctx, McpWorkerBroker_RegisterWorker_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McpWorkerBrokerServer is the server API for McpWorkerBroker service.
// All implementations must embed UnimplementedMcpWorkerBrokerServer
// for forward compatibility.
type McpWorkerBrokerServer interface {
	ListManagers(context.Context, *ListManagersRequest) (*ListManagersResponse, error)
	RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error)
	mustEmbedUnimplementedMcpWorkerBrokerServer()
}

// UnimplementedMcpWorkerBrokerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMcpWorkerBrokerServer struct{}

func (UnimplementedMcpWorkerBrokerServer) ListManagers(context.Context, *ListManagersRequest) (*ListManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagers not implemented")
}
func (UnimplementedMcpWorkerBrokerServer) RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedMcpWorkerBrokerServer) mustEmbedUnimplementedMcpWorkerBrokerServer() {}
func (UnimplementedMcpWorkerBrokerServer) testEmbeddedByValue()                         {}

// UnsafeMcpWorkerBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McpWorkerBrokerServer will
// result in compilation errors.
type UnsafeMcpWorkerBrokerServer interface {
	mustEmbedUnimplementedMcpWorkerBrokerServer()
}

func RegisterMcpWorkerBrokerServer(s grpc.ServiceRegistrar, srv McpWorkerBrokerServer) {
	// If the following call pancis, it indicates UnimplementedMcpWorkerBrokerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&McpWorkerBroker_ServiceDesc, srv)
}

func _McpWorkerBroker_ListManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpWorkerBrokerServer).ListManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpWorkerBroker_ListManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpWorkerBrokerServer).ListManagers(ctx, req.(*ListManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpWorkerBroker_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpWorkerBrokerServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpWorkerBroker_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpWorkerBrokerServer).RegisterWorker(ctx, req.(*RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// McpWorkerBroker_ServiceDesc is the grpc.ServiceDesc for McpWorkerBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McpWorkerBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.workerBroker.McpWorkerBroker",
	HandlerType: (*McpWorkerBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListManagers",
			Handler:    _McpWorkerBroker_ListManagers_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _McpWorkerBroker_RegisterWorker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workerBroker.proto",
}
