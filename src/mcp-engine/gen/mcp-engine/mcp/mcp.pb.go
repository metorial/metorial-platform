// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: mcp.proto

package mcp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type McpMessageType int32

const (
	McpMessageType_request      McpMessageType = 0
	McpMessageType_response     McpMessageType = 1
	McpMessageType_notification McpMessageType = 2
	McpMessageType_error        McpMessageType = 3
	McpMessageType_unknown      McpMessageType = 4
)

// Enum value maps for McpMessageType.
var (
	McpMessageType_name = map[int32]string{
		0: "request",
		1: "response",
		2: "notification",
		3: "error",
		4: "unknown",
	}
	McpMessageType_value = map[string]int32{
		"request":      0,
		"response":     1,
		"notification": 2,
		"error":        3,
		"unknown":      4,
	}
)

func (x McpMessageType) Enum() *McpMessageType {
	p := new(McpMessageType)
	*p = x
	return p
}

func (x McpMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (McpMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_mcp_proto_enumTypes[0].Descriptor()
}

func (McpMessageType) Type() protoreflect.EnumType {
	return &file_mcp_proto_enumTypes[0]
}

func (x McpMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use McpMessageType.Descriptor instead.
func (McpMessageType) EnumDescriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{0}
}

type McpError_McpErrorCode int32

const (
	McpError_failed_to_start     McpError_McpErrorCode = 0
	McpError_failed_to_stop      McpError_McpErrorCode = 1
	McpError_invalid_mcp_message McpError_McpErrorCode = 2
	McpError_unknown_error       McpError_McpErrorCode = 3
	McpError_timeout             McpError_McpErrorCode = 4
	McpError_launch_params_error McpError_McpErrorCode = 5
)

// Enum value maps for McpError_McpErrorCode.
var (
	McpError_McpErrorCode_name = map[int32]string{
		0: "failed_to_start",
		1: "failed_to_stop",
		2: "invalid_mcp_message",
		3: "unknown_error",
		4: "timeout",
		5: "launch_params_error",
	}
	McpError_McpErrorCode_value = map[string]int32{
		"failed_to_start":     0,
		"failed_to_stop":      1,
		"invalid_mcp_message": 2,
		"unknown_error":       3,
		"timeout":             4,
		"launch_params_error": 5,
	}
)

func (x McpError_McpErrorCode) Enum() *McpError_McpErrorCode {
	p := new(McpError_McpErrorCode)
	*p = x
	return p
}

func (x McpError_McpErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (McpError_McpErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_mcp_proto_enumTypes[1].Descriptor()
}

func (McpError_McpErrorCode) Type() protoreflect.EnumType {
	return &file_mcp_proto_enumTypes[1]
}

func (x McpError_McpErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use McpError_McpErrorCode.Descriptor instead.
func (McpError_McpErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{0, 0}
}

type McpOutput_McpOutputType int32

const (
	McpOutput_stdout McpOutput_McpOutputType = 0
	McpOutput_stderr McpOutput_McpOutputType = 1
)

// Enum value maps for McpOutput_McpOutputType.
var (
	McpOutput_McpOutputType_name = map[int32]string{
		0: "stdout",
		1: "stderr",
	}
	McpOutput_McpOutputType_value = map[string]int32{
		"stdout": 0,
		"stderr": 1,
	}
)

func (x McpOutput_McpOutputType) Enum() *McpOutput_McpOutputType {
	p := new(McpOutput_McpOutputType)
	*p = x
	return p
}

func (x McpOutput_McpOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (McpOutput_McpOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_mcp_proto_enumTypes[2].Descriptor()
}

func (McpOutput_McpOutputType) Type() protoreflect.EnumType {
	return &file_mcp_proto_enumTypes[2]
}

func (x McpOutput_McpOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use McpOutput_McpOutputType.Descriptor instead.
func (McpOutput_McpOutputType) EnumDescriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{1, 0}
}

type McpParticipant_ParticipantType int32

const (
	McpParticipant_server McpParticipant_ParticipantType = 0
	McpParticipant_client McpParticipant_ParticipantType = 1
)

// Enum value maps for McpParticipant_ParticipantType.
var (
	McpParticipant_ParticipantType_name = map[int32]string{
		0: "server",
		1: "client",
	}
	McpParticipant_ParticipantType_value = map[string]int32{
		"server": 0,
		"client": 1,
	}
)

func (x McpParticipant_ParticipantType) Enum() *McpParticipant_ParticipantType {
	p := new(McpParticipant_ParticipantType)
	*p = x
	return p
}

func (x McpParticipant_ParticipantType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (McpParticipant_ParticipantType) Descriptor() protoreflect.EnumDescriptor {
	return file_mcp_proto_enumTypes[3].Descriptor()
}

func (McpParticipant_ParticipantType) Type() protoreflect.EnumType {
	return &file_mcp_proto_enumTypes[3]
}

func (x McpParticipant_ParticipantType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use McpParticipant_ParticipantType.Descriptor instead.
func (McpParticipant_ParticipantType) EnumDescriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{4, 0}
}

type McpError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ErrorMessage  string                 `protobuf:"bytes,1,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	ErrorCode     McpError_McpErrorCode  `protobuf:"varint,2,opt,name=error_code,json=errorCode,proto3,enum=broker.mcp.McpError_McpErrorCode" json:"error_code,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Optional, Additional metadata for the error
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpError) Reset() {
	*x = McpError{}
	mi := &file_mcp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpError) ProtoMessage() {}

func (x *McpError) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpError.ProtoReflect.Descriptor instead.
func (*McpError) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{0}
}

func (x *McpError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *McpError) GetErrorCode() McpError_McpErrorCode {
	if x != nil {
		return x.ErrorCode
	}
	return McpError_failed_to_start
}

func (x *McpError) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type McpOutput struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	OutputType    McpOutput_McpOutputType `protobuf:"varint,1,opt,name=output_type,json=outputType,proto3,enum=broker.mcp.McpOutput_McpOutputType" json:"output_type,omitempty"`
	Lines         []string                `protobuf:"bytes,2,rep,name=lines,proto3" json:"lines,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpOutput) Reset() {
	*x = McpOutput{}
	mi := &file_mcp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpOutput) ProtoMessage() {}

func (x *McpOutput) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpOutput.ProtoReflect.Descriptor instead.
func (*McpOutput) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{1}
}

func (x *McpOutput) GetOutputType() McpOutput_McpOutputType {
	if x != nil {
		return x.OutputType
	}
	return McpOutput_stdout
}

func (x *McpOutput) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

type McpMessageRaw struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpMessageRaw) Reset() {
	*x = McpMessageRaw{}
	mi := &file_mcp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpMessageRaw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpMessageRaw) ProtoMessage() {}

func (x *McpMessageRaw) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpMessageRaw.ProtoReflect.Descriptor instead.
func (*McpMessageRaw) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{2}
}

func (x *McpMessageRaw) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type McpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpMessage    *McpMessageRaw         `protobuf:"bytes,1,opt,name=mcp_message,json=mcpMessage,proto3" json:"mcp_message,omitempty"`
	MessageType   McpMessageType         `protobuf:"varint,2,opt,name=message_type,json=messageType,proto3,enum=broker.mcp.McpMessageType" json:"message_type,omitempty"`
	IdString      string                 `protobuf:"bytes,3,opt,name=id_string,json=idString,proto3" json:"id_string,omitempty"` // Optional
	IdJson        string                 `protobuf:"bytes,4,opt,name=id_json,json=idJson,proto3" json:"id_json,omitempty"`       // Optional
	Method        string                 `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`                     // Optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *McpMessage) Reset() {
	*x = McpMessage{}
	mi := &file_mcp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpMessage) ProtoMessage() {}

func (x *McpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpMessage.ProtoReflect.Descriptor instead.
func (*McpMessage) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{3}
}

func (x *McpMessage) GetMcpMessage() *McpMessageRaw {
	if x != nil {
		return x.McpMessage
	}
	return nil
}

func (x *McpMessage) GetMessageType() McpMessageType {
	if x != nil {
		return x.MessageType
	}
	return McpMessageType_request
}

func (x *McpMessage) GetIdString() string {
	if x != nil {
		return x.IdString
	}
	return ""
}

func (x *McpMessage) GetIdJson() string {
	if x != nil {
		return x.IdJson
	}
	return ""
}

func (x *McpMessage) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

type McpParticipant struct {
	state           protoimpl.MessageState         `protogen:"open.v1"`
	Type            McpParticipant_ParticipantType `protobuf:"varint,1,opt,name=type,proto3,enum=broker.mcp.McpParticipant_ParticipantType" json:"type,omitempty"`
	ParticipantJson string                         `protobuf:"bytes,2,opt,name=participant_json,json=participantJson,proto3" json:"participant_json,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *McpParticipant) Reset() {
	*x = McpParticipant{}
	mi := &file_mcp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *McpParticipant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*McpParticipant) ProtoMessage() {}

func (x *McpParticipant) ProtoReflect() protoreflect.Message {
	mi := &file_mcp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use McpParticipant.ProtoReflect.Descriptor instead.
func (*McpParticipant) Descriptor() ([]byte, []int) {
	return file_mcp_proto_rawDescGZIP(), []int{4}
}

func (x *McpParticipant) GetType() McpParticipant_ParticipantType {
	if x != nil {
		return x.Type
	}
	return McpParticipant_server
}

func (x *McpParticipant) GetParticipantJson() string {
	if x != nil {
		return x.ParticipantJson
	}
	return ""
}

var File_mcp_proto protoreflect.FileDescriptor

const file_mcp_proto_rawDesc = "" +
	"\n" +
	"\tmcp.proto\x12\n" +
	"broker.mcp\"\xfa\x02\n" +
	"\bMcpError\x12#\n" +
	"\rerror_message\x18\x01 \x01(\tR\ferrorMessage\x12@\n" +
	"\n" +
	"error_code\x18\x02 \x01(\x0e2!.broker.mcp.McpError.McpErrorCodeR\terrorCode\x12>\n" +
	"\bmetadata\x18\x03 \x03(\v2\".broker.mcp.McpError.MetadataEntryR\bmetadata\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x89\x01\n" +
	"\fMcpErrorCode\x12\x13\n" +
	"\x0ffailed_to_start\x10\x00\x12\x12\n" +
	"\x0efailed_to_stop\x10\x01\x12\x17\n" +
	"\x13invalid_mcp_message\x10\x02\x12\x11\n" +
	"\runknown_error\x10\x03\x12\v\n" +
	"\atimeout\x10\x04\x12\x17\n" +
	"\x13launch_params_error\x10\x05\"\x90\x01\n" +
	"\tMcpOutput\x12D\n" +
	"\voutput_type\x18\x01 \x01(\x0e2#.broker.mcp.McpOutput.McpOutputTypeR\n" +
	"outputType\x12\x14\n" +
	"\x05lines\x18\x02 \x03(\tR\x05lines\"'\n" +
	"\rMcpOutputType\x12\n" +
	"\n" +
	"\x06stdout\x10\x00\x12\n" +
	"\n" +
	"\x06stderr\x10\x01\")\n" +
	"\rMcpMessageRaw\x12\x18\n" +
	"\amessage\x18\x01 \x01(\tR\amessage\"\xd5\x01\n" +
	"\n" +
	"McpMessage\x12:\n" +
	"\vmcp_message\x18\x01 \x01(\v2\x19.broker.mcp.McpMessageRawR\n" +
	"mcpMessage\x12=\n" +
	"\fmessage_type\x18\x02 \x01(\x0e2\x1a.broker.mcp.McpMessageTypeR\vmessageType\x12\x1b\n" +
	"\tid_string\x18\x03 \x01(\tR\bidString\x12\x17\n" +
	"\aid_json\x18\x04 \x01(\tR\x06idJson\x12\x16\n" +
	"\x06method\x18\x05 \x01(\tR\x06method\"\xa6\x01\n" +
	"\x0eMcpParticipant\x12>\n" +
	"\x04type\x18\x01 \x01(\x0e2*.broker.mcp.McpParticipant.ParticipantTypeR\x04type\x12)\n" +
	"\x10participant_json\x18\x02 \x01(\tR\x0fparticipantJson\")\n" +
	"\x0fParticipantType\x12\n" +
	"\n" +
	"\x06server\x10\x00\x12\n" +
	"\n" +
	"\x06client\x10\x01*U\n" +
	"\x0eMcpMessageType\x12\v\n" +
	"\arequest\x10\x00\x12\f\n" +
	"\bresponse\x10\x01\x12\x10\n" +
	"\fnotification\x10\x02\x12\t\n" +
	"\x05error\x10\x03\x12\v\n" +
	"\aunknown\x10\x04B@Z>github.com/metorial/metorial/mcp-engine/gen/mcp-engine/mcp;mcpb\x06proto3"

var (
	file_mcp_proto_rawDescOnce sync.Once
	file_mcp_proto_rawDescData []byte
)

func file_mcp_proto_rawDescGZIP() []byte {
	file_mcp_proto_rawDescOnce.Do(func() {
		file_mcp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mcp_proto_rawDesc), len(file_mcp_proto_rawDesc)))
	})
	return file_mcp_proto_rawDescData
}

var file_mcp_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mcp_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_mcp_proto_goTypes = []any{
	(McpMessageType)(0),                 // 0: broker.mcp.McpMessageType
	(McpError_McpErrorCode)(0),          // 1: broker.mcp.McpError.McpErrorCode
	(McpOutput_McpOutputType)(0),        // 2: broker.mcp.McpOutput.McpOutputType
	(McpParticipant_ParticipantType)(0), // 3: broker.mcp.McpParticipant.ParticipantType
	(*McpError)(nil),                    // 4: broker.mcp.McpError
	(*McpOutput)(nil),                   // 5: broker.mcp.McpOutput
	(*McpMessageRaw)(nil),               // 6: broker.mcp.McpMessageRaw
	(*McpMessage)(nil),                  // 7: broker.mcp.McpMessage
	(*McpParticipant)(nil),              // 8: broker.mcp.McpParticipant
	nil,                                 // 9: broker.mcp.McpError.MetadataEntry
}
var file_mcp_proto_depIdxs = []int32{
	1, // 0: broker.mcp.McpError.error_code:type_name -> broker.mcp.McpError.McpErrorCode
	9, // 1: broker.mcp.McpError.metadata:type_name -> broker.mcp.McpError.MetadataEntry
	2, // 2: broker.mcp.McpOutput.output_type:type_name -> broker.mcp.McpOutput.McpOutputType
	6, // 3: broker.mcp.McpMessage.mcp_message:type_name -> broker.mcp.McpMessageRaw
	0, // 4: broker.mcp.McpMessage.message_type:type_name -> broker.mcp.McpMessageType
	3, // 5: broker.mcp.McpParticipant.type:type_name -> broker.mcp.McpParticipant.ParticipantType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_mcp_proto_init() }
func file_mcp_proto_init() {
	if File_mcp_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mcp_proto_rawDesc), len(file_mcp_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mcp_proto_goTypes,
		DependencyIndexes: file_mcp_proto_depIdxs,
		EnumInfos:         file_mcp_proto_enumTypes,
		MessageInfos:      file_mcp_proto_msgTypes,
	}.Build()
	File_mcp_proto = out.File
	file_mcp_proto_goTypes = nil
	file_mcp_proto_depIdxs = nil
}
