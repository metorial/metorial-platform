// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: worker.proto

package worker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Worker_GetWorkerInfo_FullMethodName      = "/broker.worker.Worker/GetWorkerInfo"
	Worker_StreamWorkerHealth_FullMethodName = "/broker.worker.Worker/StreamWorkerHealth"
)

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	GetWorkerInfo(ctx context.Context, in *WorkerInfoRequest, opts ...grpc.CallOption) (*WorkerInfoResponse, error)
	StreamWorkerHealth(ctx context.Context, in *WorkerHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkerInfoResponse], error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) GetWorkerInfo(ctx context.Context, in *WorkerInfoRequest, opts ...grpc.CallOption) (*WorkerInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkerInfoResponse)
	err := c.cc.Invoke(ctx, Worker_GetWorkerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) StreamWorkerHealth(ctx context.Context, in *WorkerHealthRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WorkerInfoResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], Worker_StreamWorkerHealth_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WorkerHealthRequest, WorkerInfoResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Worker_StreamWorkerHealthClient = grpc.ServerStreamingClient[WorkerInfoResponse]

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility.
type WorkerServer interface {
	GetWorkerInfo(context.Context, *WorkerInfoRequest) (*WorkerInfoResponse, error)
	StreamWorkerHealth(*WorkerHealthRequest, grpc.ServerStreamingServer[WorkerInfoResponse]) error
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWorkerServer struct{}

func (UnimplementedWorkerServer) GetWorkerInfo(context.Context, *WorkerInfoRequest) (*WorkerInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerInfo not implemented")
}
func (UnimplementedWorkerServer) StreamWorkerHealth(*WorkerHealthRequest, grpc.ServerStreamingServer[WorkerInfoResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamWorkerHealth not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}
func (UnimplementedWorkerServer) testEmbeddedByValue()                {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	// If the following call pancis, it indicates UnimplementedWorkerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_GetWorkerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).GetWorkerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Worker_GetWorkerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).GetWorkerInfo(ctx, req.(*WorkerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_StreamWorkerHealth_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerHealthRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StreamWorkerHealth(m, &grpc.GenericServerStream[WorkerHealthRequest, WorkerInfoResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Worker_StreamWorkerHealthServer = grpc.ServerStreamingServer[WorkerInfoResponse]

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkerInfo",
			Handler:    _Worker_GetWorkerInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamWorkerHealth",
			Handler:       _Worker_StreamWorkerHealth_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "worker.proto",
}
