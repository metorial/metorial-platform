// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: connector.proto

package connector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	McpConnector_GetConnectorInfo_FullMethodName = "/broker.connector.McpConnector/GetConnectorInfo"
	McpConnector_StreamMcpRun_FullMethodName     = "/broker.connector.McpConnector/StreamMcpRun"
)

// McpConnectorClient is the client API for McpConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McpConnectorClient interface {
	GetConnectorInfo(ctx context.Context, in *ConnectorInfoRequest, opts ...grpc.CallOption) (*ConnectorInfoResponse, error)
	StreamMcpRun(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RunRequest, RunResponse], error)
}

type mcpConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewMcpConnectorClient(cc grpc.ClientConnInterface) McpConnectorClient {
	return &mcpConnectorClient{cc}
}

func (c *mcpConnectorClient) GetConnectorInfo(ctx context.Context, in *ConnectorInfoRequest, opts ...grpc.CallOption) (*ConnectorInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectorInfoResponse)
	err := c.cc.Invoke(ctx, McpConnector_GetConnectorInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpConnectorClient) StreamMcpRun(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RunRequest, RunResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &McpConnector_ServiceDesc.Streams[0], McpConnector_StreamMcpRun_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RunRequest, RunResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpConnector_StreamMcpRunClient = grpc.BidiStreamingClient[RunRequest, RunResponse]

// McpConnectorServer is the server API for McpConnector service.
// All implementations must embed UnimplementedMcpConnectorServer
// for forward compatibility.
type McpConnectorServer interface {
	GetConnectorInfo(context.Context, *ConnectorInfoRequest) (*ConnectorInfoResponse, error)
	StreamMcpRun(grpc.BidiStreamingServer[RunRequest, RunResponse]) error
	mustEmbedUnimplementedMcpConnectorServer()
}

// UnimplementedMcpConnectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMcpConnectorServer struct{}

func (UnimplementedMcpConnectorServer) GetConnectorInfo(context.Context, *ConnectorInfoRequest) (*ConnectorInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectorInfo not implemented")
}
func (UnimplementedMcpConnectorServer) StreamMcpRun(grpc.BidiStreamingServer[RunRequest, RunResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMcpRun not implemented")
}
func (UnimplementedMcpConnectorServer) mustEmbedUnimplementedMcpConnectorServer() {}
func (UnimplementedMcpConnectorServer) testEmbeddedByValue()                      {}

// UnsafeMcpConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McpConnectorServer will
// result in compilation errors.
type UnsafeMcpConnectorServer interface {
	mustEmbedUnimplementedMcpConnectorServer()
}

func RegisterMcpConnectorServer(s grpc.ServiceRegistrar, srv McpConnectorServer) {
	// If the following call pancis, it indicates UnimplementedMcpConnectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&McpConnector_ServiceDesc, srv)
}

func _McpConnector_GetConnectorInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectorInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpConnectorServer).GetConnectorInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpConnector_GetConnectorInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpConnectorServer).GetConnectorInfo(ctx, req.(*ConnectorInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpConnector_StreamMcpRun_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(McpConnectorServer).StreamMcpRun(&grpc.GenericServerStream[RunRequest, RunResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpConnector_StreamMcpRunServer = grpc.BidiStreamingServer[RunRequest, RunResponse]

// McpConnector_ServiceDesc is the grpc.ServiceDesc for McpConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McpConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.connector.McpConnector",
	HandlerType: (*McpConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnectorInfo",
			Handler:    _McpConnector_GetConnectorInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMcpRun",
			Handler:       _McpConnector_StreamMcpRun_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "connector.proto",
}
