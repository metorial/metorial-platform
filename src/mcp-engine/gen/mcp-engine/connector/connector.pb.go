// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: connector.proto

package connector

import (
	mcp "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/mcp"
	worker "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/worker"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RunConfigRemoteServer_ServerProtocol int32

const (
	RunConfigRemoteServer_sse             RunConfigRemoteServer_ServerProtocol = 0 // Server-Sent Events
	RunConfigRemoteServer_streamable_http RunConfigRemoteServer_ServerProtocol = 1 // Streamable HTTP
)

// Enum value maps for RunConfigRemoteServer_ServerProtocol.
var (
	RunConfigRemoteServer_ServerProtocol_name = map[int32]string{
		0: "sse",
		1: "streamable_http",
	}
	RunConfigRemoteServer_ServerProtocol_value = map[string]int32{
		"sse":             0,
		"streamable_http": 1,
	}
)

func (x RunConfigRemoteServer_ServerProtocol) Enum() *RunConfigRemoteServer_ServerProtocol {
	p := new(RunConfigRemoteServer_ServerProtocol)
	*p = x
	return p
}

func (x RunConfigRemoteServer_ServerProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RunConfigRemoteServer_ServerProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_connector_proto_enumTypes[0].Descriptor()
}

func (RunConfigRemoteServer_ServerProtocol) Type() protoreflect.EnumType {
	return &file_connector_proto_enumTypes[0]
}

func (x RunConfigRemoteServer_ServerProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RunConfigRemoteServer_ServerProtocol.Descriptor instead.
func (RunConfigRemoteServer_ServerProtocol) EnumDescriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{2, 0}
}

type ConnectorInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectorInfoRequest) Reset() {
	*x = ConnectorInfoRequest{}
	mi := &file_connector_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorInfoRequest) ProtoMessage() {}

func (x *ConnectorInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorInfoRequest.ProtoReflect.Descriptor instead.
func (*ConnectorInfoRequest) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{0}
}

type ConnectorInfoResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	RunnerId      string                     `protobuf:"bytes,1,opt,name=runner_id,json=runnerId,proto3" json:"runner_id,omitempty"`
	ActiveRuns    uint32                     `protobuf:"varint,2,opt,name=active_runs,json=activeRuns,proto3" json:"active_runs,omitempty"`
	TotalRuns     uint64                     `protobuf:"varint,3,opt,name=total_runs,json=totalRuns,proto3" json:"total_runs,omitempty"`
	WorkerInfo    *worker.WorkerInfoResponse `protobuf:"bytes,4,opt,name=worker_info,json=workerInfo,proto3" json:"worker_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConnectorInfoResponse) Reset() {
	*x = ConnectorInfoResponse{}
	mi := &file_connector_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectorInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorInfoResponse) ProtoMessage() {}

func (x *ConnectorInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorInfoResponse.ProtoReflect.Descriptor instead.
func (*ConnectorInfoResponse) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{1}
}

func (x *ConnectorInfoResponse) GetRunnerId() string {
	if x != nil {
		return x.RunnerId
	}
	return ""
}

func (x *ConnectorInfoResponse) GetActiveRuns() uint32 {
	if x != nil {
		return x.ActiveRuns
	}
	return 0
}

func (x *ConnectorInfoResponse) GetTotalRuns() uint64 {
	if x != nil {
		return x.TotalRuns
	}
	return 0
}

func (x *ConnectorInfoResponse) GetWorkerInfo() *worker.WorkerInfoResponse {
	if x != nil {
		return x.WorkerInfo
	}
	return nil
}

type RunConfigRemoteServer struct {
	state         protoimpl.MessageState               `protogen:"open.v1"`
	ServerUri     string                               `protobuf:"bytes,1,opt,name=server_uri,json=serverUri,proto3" json:"server_uri,omitempty"`
	Protocol      RunConfigRemoteServer_ServerProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=broker.connector.RunConfigRemoteServer_ServerProtocol" json:"protocol,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfigRemoteServer) Reset() {
	*x = RunConfigRemoteServer{}
	mi := &file_connector_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfigRemoteServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfigRemoteServer) ProtoMessage() {}

func (x *RunConfigRemoteServer) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfigRemoteServer.ProtoReflect.Descriptor instead.
func (*RunConfigRemoteServer) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{2}
}

func (x *RunConfigRemoteServer) GetServerUri() string {
	if x != nil {
		return x.ServerUri
	}
	return ""
}

func (x *RunConfigRemoteServer) GetProtocol() RunConfigRemoteServer_ServerProtocol {
	if x != nil {
		return x.Protocol
	}
	return RunConfigRemoteServer_sse
}

type RunConfigRemoteArguments struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Headers       map[string]string      `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfigRemoteArguments) Reset() {
	*x = RunConfigRemoteArguments{}
	mi := &file_connector_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfigRemoteArguments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfigRemoteArguments) ProtoMessage() {}

func (x *RunConfigRemoteArguments) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfigRemoteArguments.ProtoReflect.Descriptor instead.
func (*RunConfigRemoteArguments) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{3}
}

func (x *RunConfigRemoteArguments) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type RunConfig struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	Server        *RunConfigRemoteServer    `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Arguments     *RunConfigRemoteArguments `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfig) Reset() {
	*x = RunConfig{}
	mi := &file_connector_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfig) ProtoMessage() {}

func (x *RunConfig) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfig.ProtoReflect.Descriptor instead.
func (*RunConfig) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{4}
}

func (x *RunConfig) GetServer() *RunConfigRemoteServer {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *RunConfig) GetArguments() *RunConfigRemoteArguments {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type RunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to JobType:
	//
	//	*RunRequest_Init
	//	*RunRequest_McpMessage
	//	*RunRequest_Close
	JobType       isRunRequest_JobType `protobuf_oneof:"job_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequest) Reset() {
	*x = RunRequest{}
	mi := &file_connector_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequest) ProtoMessage() {}

func (x *RunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequest.ProtoReflect.Descriptor instead.
func (*RunRequest) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{5}
}

func (x *RunRequest) GetJobType() isRunRequest_JobType {
	if x != nil {
		return x.JobType
	}
	return nil
}

func (x *RunRequest) GetInit() *RunRequestInit {
	if x != nil {
		if x, ok := x.JobType.(*RunRequest_Init); ok {
			return x.Init
		}
	}
	return nil
}

func (x *RunRequest) GetMcpMessage() *RunRequestMcpMessage {
	if x != nil {
		if x, ok := x.JobType.(*RunRequest_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *RunRequest) GetClose() *RunRequestClose {
	if x != nil {
		if x, ok := x.JobType.(*RunRequest_Close); ok {
			return x.Close
		}
	}
	return nil
}

type isRunRequest_JobType interface {
	isRunRequest_JobType()
}

type RunRequest_Init struct {
	Init *RunRequestInit `protobuf:"bytes,1,opt,name=init,proto3,oneof"`
}

type RunRequest_McpMessage struct {
	McpMessage *RunRequestMcpMessage `protobuf:"bytes,2,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type RunRequest_Close struct {
	Close *RunRequestClose `protobuf:"bytes,3,opt,name=close,proto3,oneof"`
}

func (*RunRequest_Init) isRunRequest_JobType() {}

func (*RunRequest_McpMessage) isRunRequest_JobType() {}

func (*RunRequest_Close) isRunRequest_JobType() {}

type RunRequestInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	RunConfig     *RunConfig             `protobuf:"bytes,2,opt,name=run_config,json=runConfig,proto3" json:"run_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequestInit) Reset() {
	*x = RunRequestInit{}
	mi := &file_connector_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequestInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequestInit) ProtoMessage() {}

func (x *RunRequestInit) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequestInit.ProtoReflect.Descriptor instead.
func (*RunRequestInit) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{6}
}

func (x *RunRequestInit) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *RunRequestInit) GetRunConfig() *RunConfig {
	if x != nil {
		return x.RunConfig
	}
	return nil
}

type RunRequestMcpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *mcp.McpMessageRaw     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequestMcpMessage) Reset() {
	*x = RunRequestMcpMessage{}
	mi := &file_connector_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequestMcpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequestMcpMessage) ProtoMessage() {}

func (x *RunRequestMcpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequestMcpMessage.ProtoReflect.Descriptor instead.
func (*RunRequestMcpMessage) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{7}
}

func (x *RunRequestMcpMessage) GetMessage() *mcp.McpMessageRaw {
	if x != nil {
		return x.Message
	}
	return nil
}

type RunRequestClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunRequestClose) Reset() {
	*x = RunRequestClose{}
	mi := &file_connector_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunRequestClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunRequestClose) ProtoMessage() {}

func (x *RunRequestClose) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunRequestClose.ProtoReflect.Descriptor instead.
func (*RunRequestClose) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{8}
}

type RunResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to JobType:
	//
	//	*RunResponse_McpMessage
	//	*RunResponse_Init
	//	*RunResponse_Output
	//	*RunResponse_Error
	//	*RunResponse_Close
	JobType       isRunResponse_JobType `protobuf_oneof:"job_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponse) Reset() {
	*x = RunResponse{}
	mi := &file_connector_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponse) ProtoMessage() {}

func (x *RunResponse) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponse.ProtoReflect.Descriptor instead.
func (*RunResponse) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{9}
}

func (x *RunResponse) GetJobType() isRunResponse_JobType {
	if x != nil {
		return x.JobType
	}
	return nil
}

func (x *RunResponse) GetMcpMessage() *RunResponseMcpMessage {
	if x != nil {
		if x, ok := x.JobType.(*RunResponse_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *RunResponse) GetInit() *RunResponseInit {
	if x != nil {
		if x, ok := x.JobType.(*RunResponse_Init); ok {
			return x.Init
		}
	}
	return nil
}

func (x *RunResponse) GetOutput() *RunResponseOutput {
	if x != nil {
		if x, ok := x.JobType.(*RunResponse_Output); ok {
			return x.Output
		}
	}
	return nil
}

func (x *RunResponse) GetError() *RunResponseError {
	if x != nil {
		if x, ok := x.JobType.(*RunResponse_Error); ok {
			return x.Error
		}
	}
	return nil
}

func (x *RunResponse) GetClose() *RunResponseClose {
	if x != nil {
		if x, ok := x.JobType.(*RunResponse_Close); ok {
			return x.Close
		}
	}
	return nil
}

type isRunResponse_JobType interface {
	isRunResponse_JobType()
}

type RunResponse_McpMessage struct {
	McpMessage *RunResponseMcpMessage `protobuf:"bytes,1,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type RunResponse_Init struct {
	Init *RunResponseInit `protobuf:"bytes,2,opt,name=init,proto3,oneof"`
}

type RunResponse_Output struct {
	Output *RunResponseOutput `protobuf:"bytes,3,opt,name=output,proto3,oneof"`
}

type RunResponse_Error struct {
	Error *RunResponseError `protobuf:"bytes,4,opt,name=error,proto3,oneof"`
}

type RunResponse_Close struct {
	Close *RunResponseClose `protobuf:"bytes,5,opt,name=close,proto3,oneof"`
}

func (*RunResponse_McpMessage) isRunResponse_JobType() {}

func (*RunResponse_Init) isRunResponse_JobType() {}

func (*RunResponse_Output) isRunResponse_JobType() {}

func (*RunResponse_Error) isRunResponse_JobType() {}

func (*RunResponse_Close) isRunResponse_JobType() {}

type RunResponseInit struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseInit) Reset() {
	*x = RunResponseInit{}
	mi := &file_connector_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseInit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseInit) ProtoMessage() {}

func (x *RunResponseInit) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseInit.ProtoReflect.Descriptor instead.
func (*RunResponseInit) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{10}
}

type RunResponseMcpMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *mcp.McpMessageRaw     `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseMcpMessage) Reset() {
	*x = RunResponseMcpMessage{}
	mi := &file_connector_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseMcpMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseMcpMessage) ProtoMessage() {}

func (x *RunResponseMcpMessage) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseMcpMessage.ProtoReflect.Descriptor instead.
func (*RunResponseMcpMessage) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{11}
}

func (x *RunResponseMcpMessage) GetMessage() *mcp.McpMessageRaw {
	if x != nil {
		return x.Message
	}
	return nil
}

type RunResponseError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpError      *mcp.McpError          `protobuf:"bytes,1,opt,name=mcp_error,json=mcpError,proto3" json:"mcp_error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseError) Reset() {
	*x = RunResponseError{}
	mi := &file_connector_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseError) ProtoMessage() {}

func (x *RunResponseError) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseError.ProtoReflect.Descriptor instead.
func (*RunResponseError) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{12}
}

func (x *RunResponseError) GetMcpError() *mcp.McpError {
	if x != nil {
		return x.McpError
	}
	return nil
}

type RunResponseOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	McpOutput     *mcp.McpOutput         `protobuf:"bytes,1,opt,name=mcp_output,json=mcpOutput,proto3" json:"mcp_output,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseOutput) Reset() {
	*x = RunResponseOutput{}
	mi := &file_connector_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseOutput) ProtoMessage() {}

func (x *RunResponseOutput) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseOutput.ProtoReflect.Descriptor instead.
func (*RunResponseOutput) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{13}
}

func (x *RunResponseOutput) GetMcpOutput() *mcp.McpOutput {
	if x != nil {
		return x.McpOutput
	}
	return nil
}

type RunResponseClose struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunResponseClose) Reset() {
	*x = RunResponseClose{}
	mi := &file_connector_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunResponseClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunResponseClose) ProtoMessage() {}

func (x *RunResponseClose) ProtoReflect() protoreflect.Message {
	mi := &file_connector_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunResponseClose.ProtoReflect.Descriptor instead.
func (*RunResponseClose) Descriptor() ([]byte, []int) {
	return file_connector_proto_rawDescGZIP(), []int{14}
}

var File_connector_proto protoreflect.FileDescriptor

const file_connector_proto_rawDesc = "" +
	"\n" +
	"\x0fconnector.proto\x12\x10broker.connector\x1a\tmcp.proto\x1a\fworker.proto\"\x16\n" +
	"\x14ConnectorInfoRequest\"\xb8\x01\n" +
	"\x15ConnectorInfoResponse\x12\x1b\n" +
	"\trunner_id\x18\x01 \x01(\tR\brunnerId\x12\x1f\n" +
	"\vactive_runs\x18\x02 \x01(\rR\n" +
	"activeRuns\x12\x1d\n" +
	"\n" +
	"total_runs\x18\x03 \x01(\x04R\ttotalRuns\x12B\n" +
	"\vworker_info\x18\x04 \x01(\v2!.broker.worker.WorkerInfoResponseR\n" +
	"workerInfo\"\xba\x01\n" +
	"\x15RunConfigRemoteServer\x12\x1d\n" +
	"\n" +
	"server_uri\x18\x01 \x01(\tR\tserverUri\x12R\n" +
	"\bprotocol\x18\x02 \x01(\x0e26.broker.connector.RunConfigRemoteServer.ServerProtocolR\bprotocol\".\n" +
	"\x0eServerProtocol\x12\a\n" +
	"\x03sse\x10\x00\x12\x13\n" +
	"\x0fstreamable_http\x10\x01\"\xa9\x01\n" +
	"\x18RunConfigRemoteArguments\x12Q\n" +
	"\aheaders\x18\x01 \x03(\v27.broker.connector.RunConfigRemoteArguments.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x96\x01\n" +
	"\tRunConfig\x12?\n" +
	"\x06server\x18\x01 \x01(\v2'.broker.connector.RunConfigRemoteServerR\x06server\x12H\n" +
	"\targuments\x18\x02 \x01(\v2*.broker.connector.RunConfigRemoteArgumentsR\targuments\"\xd6\x01\n" +
	"\n" +
	"RunRequest\x126\n" +
	"\x04init\x18\x01 \x01(\v2 .broker.connector.RunRequestInitH\x00R\x04init\x12I\n" +
	"\vmcp_message\x18\x02 \x01(\v2&.broker.connector.RunRequestMcpMessageH\x00R\n" +
	"mcpMessage\x129\n" +
	"\x05close\x18\x03 \x01(\v2!.broker.connector.RunRequestCloseH\x00R\x05closeB\n" +
	"\n" +
	"\bjob_type\"q\n" +
	"\x0eRunRequestInit\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\x12:\n" +
	"\n" +
	"run_config\x18\x02 \x01(\v2\x1b.broker.connector.RunConfigR\trunConfig\"K\n" +
	"\x14RunRequestMcpMessage\x123\n" +
	"\amessage\x18\x01 \x01(\v2\x19.broker.mcp.McpMessageRawR\amessage\"\x11\n" +
	"\x0fRunRequestClose\"\xd5\x02\n" +
	"\vRunResponse\x12J\n" +
	"\vmcp_message\x18\x01 \x01(\v2'.broker.connector.RunResponseMcpMessageH\x00R\n" +
	"mcpMessage\x127\n" +
	"\x04init\x18\x02 \x01(\v2!.broker.connector.RunResponseInitH\x00R\x04init\x12=\n" +
	"\x06output\x18\x03 \x01(\v2#.broker.connector.RunResponseOutputH\x00R\x06output\x12:\n" +
	"\x05error\x18\x04 \x01(\v2\".broker.connector.RunResponseErrorH\x00R\x05error\x12:\n" +
	"\x05close\x18\x05 \x01(\v2\".broker.connector.RunResponseCloseH\x00R\x05closeB\n" +
	"\n" +
	"\bjob_type\"\x11\n" +
	"\x0fRunResponseInit\"L\n" +
	"\x15RunResponseMcpMessage\x123\n" +
	"\amessage\x18\x01 \x01(\v2\x19.broker.mcp.McpMessageRawR\amessage\"E\n" +
	"\x10RunResponseError\x121\n" +
	"\tmcp_error\x18\x01 \x01(\v2\x14.broker.mcp.McpErrorR\bmcpError\"I\n" +
	"\x11RunResponseOutput\x124\n" +
	"\n" +
	"mcp_output\x18\x01 \x01(\v2\x15.broker.mcp.McpOutputR\tmcpOutput\"\x12\n" +
	"\x10RunResponseClose2\xc4\x01\n" +
	"\fMcpConnector\x12c\n" +
	"\x10GetConnectorInfo\x12&.broker.connector.ConnectorInfoRequest\x1a'.broker.connector.ConnectorInfoResponse\x12O\n" +
	"\fStreamMcpRun\x12\x1c.broker.connector.RunRequest\x1a\x1d.broker.connector.RunResponse(\x010\x01BLZJgithub.com/metorial/metorial/mcp-engine/gen/mcp-engine/connector;connectorb\x06proto3"

var (
	file_connector_proto_rawDescOnce sync.Once
	file_connector_proto_rawDescData []byte
)

func file_connector_proto_rawDescGZIP() []byte {
	file_connector_proto_rawDescOnce.Do(func() {
		file_connector_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_connector_proto_rawDesc), len(file_connector_proto_rawDesc)))
	})
	return file_connector_proto_rawDescData
}

var file_connector_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_connector_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_connector_proto_goTypes = []any{
	(RunConfigRemoteServer_ServerProtocol)(0), // 0: broker.connector.RunConfigRemoteServer.ServerProtocol
	(*ConnectorInfoRequest)(nil),              // 1: broker.connector.ConnectorInfoRequest
	(*ConnectorInfoResponse)(nil),             // 2: broker.connector.ConnectorInfoResponse
	(*RunConfigRemoteServer)(nil),             // 3: broker.connector.RunConfigRemoteServer
	(*RunConfigRemoteArguments)(nil),          // 4: broker.connector.RunConfigRemoteArguments
	(*RunConfig)(nil),                         // 5: broker.connector.RunConfig
	(*RunRequest)(nil),                        // 6: broker.connector.RunRequest
	(*RunRequestInit)(nil),                    // 7: broker.connector.RunRequestInit
	(*RunRequestMcpMessage)(nil),              // 8: broker.connector.RunRequestMcpMessage
	(*RunRequestClose)(nil),                   // 9: broker.connector.RunRequestClose
	(*RunResponse)(nil),                       // 10: broker.connector.RunResponse
	(*RunResponseInit)(nil),                   // 11: broker.connector.RunResponseInit
	(*RunResponseMcpMessage)(nil),             // 12: broker.connector.RunResponseMcpMessage
	(*RunResponseError)(nil),                  // 13: broker.connector.RunResponseError
	(*RunResponseOutput)(nil),                 // 14: broker.connector.RunResponseOutput
	(*RunResponseClose)(nil),                  // 15: broker.connector.RunResponseClose
	nil,                                       // 16: broker.connector.RunConfigRemoteArguments.HeadersEntry
	(*worker.WorkerInfoResponse)(nil),         // 17: broker.worker.WorkerInfoResponse
	(*mcp.McpMessageRaw)(nil),                 // 18: broker.mcp.McpMessageRaw
	(*mcp.McpError)(nil),                      // 19: broker.mcp.McpError
	(*mcp.McpOutput)(nil),                     // 20: broker.mcp.McpOutput
}
var file_connector_proto_depIdxs = []int32{
	17, // 0: broker.connector.ConnectorInfoResponse.worker_info:type_name -> broker.worker.WorkerInfoResponse
	0,  // 1: broker.connector.RunConfigRemoteServer.protocol:type_name -> broker.connector.RunConfigRemoteServer.ServerProtocol
	16, // 2: broker.connector.RunConfigRemoteArguments.headers:type_name -> broker.connector.RunConfigRemoteArguments.HeadersEntry
	3,  // 3: broker.connector.RunConfig.server:type_name -> broker.connector.RunConfigRemoteServer
	4,  // 4: broker.connector.RunConfig.arguments:type_name -> broker.connector.RunConfigRemoteArguments
	7,  // 5: broker.connector.RunRequest.init:type_name -> broker.connector.RunRequestInit
	8,  // 6: broker.connector.RunRequest.mcp_message:type_name -> broker.connector.RunRequestMcpMessage
	9,  // 7: broker.connector.RunRequest.close:type_name -> broker.connector.RunRequestClose
	5,  // 8: broker.connector.RunRequestInit.run_config:type_name -> broker.connector.RunConfig
	18, // 9: broker.connector.RunRequestMcpMessage.message:type_name -> broker.mcp.McpMessageRaw
	12, // 10: broker.connector.RunResponse.mcp_message:type_name -> broker.connector.RunResponseMcpMessage
	11, // 11: broker.connector.RunResponse.init:type_name -> broker.connector.RunResponseInit
	14, // 12: broker.connector.RunResponse.output:type_name -> broker.connector.RunResponseOutput
	13, // 13: broker.connector.RunResponse.error:type_name -> broker.connector.RunResponseError
	15, // 14: broker.connector.RunResponse.close:type_name -> broker.connector.RunResponseClose
	18, // 15: broker.connector.RunResponseMcpMessage.message:type_name -> broker.mcp.McpMessageRaw
	19, // 16: broker.connector.RunResponseError.mcp_error:type_name -> broker.mcp.McpError
	20, // 17: broker.connector.RunResponseOutput.mcp_output:type_name -> broker.mcp.McpOutput
	1,  // 18: broker.connector.McpConnector.GetConnectorInfo:input_type -> broker.connector.ConnectorInfoRequest
	6,  // 19: broker.connector.McpConnector.StreamMcpRun:input_type -> broker.connector.RunRequest
	2,  // 20: broker.connector.McpConnector.GetConnectorInfo:output_type -> broker.connector.ConnectorInfoResponse
	10, // 21: broker.connector.McpConnector.StreamMcpRun:output_type -> broker.connector.RunResponse
	20, // [20:22] is the sub-list for method output_type
	18, // [18:20] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_connector_proto_init() }
func file_connector_proto_init() {
	if File_connector_proto != nil {
		return
	}
	file_connector_proto_msgTypes[5].OneofWrappers = []any{
		(*RunRequest_Init)(nil),
		(*RunRequest_McpMessage)(nil),
		(*RunRequest_Close)(nil),
	}
	file_connector_proto_msgTypes[9].OneofWrappers = []any{
		(*RunResponse_McpMessage)(nil),
		(*RunResponse_Init)(nil),
		(*RunResponse_Output)(nil),
		(*RunResponse_Error)(nil),
		(*RunResponse_Close)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_connector_proto_rawDesc), len(file_connector_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_connector_proto_goTypes,
		DependencyIndexes: file_connector_proto_depIdxs,
		EnumInfos:         file_connector_proto_enumTypes,
		MessageInfos:      file_connector_proto_msgTypes,
	}.Build()
	File_connector_proto = out.File
	file_connector_proto_goTypes = nil
	file_connector_proto_depIdxs = nil
}
