// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: manager.proto

package manager

import (
	context "context"
	mcp "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/mcp"
	workerBroker "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/workerBroker"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	McpManager_CheckActiveSession_FullMethodName         = "/broker.manager.McpManager/CheckActiveSession"
	McpManager_CreateSession_FullMethodName              = "/broker.manager.McpManager/CreateSession"
	McpManager_DiscoverServer_FullMethodName             = "/broker.manager.McpManager/DiscoverServer"
	McpManager_DiscardSession_FullMethodName             = "/broker.manager.McpManager/DiscardSession"
	McpManager_SendMcpMessage_FullMethodName             = "/broker.manager.McpManager/SendMcpMessage"
	McpManager_StreamMcpMessages_FullMethodName          = "/broker.manager.McpManager/StreamMcpMessages"
	McpManager_GetServerInfo_FullMethodName              = "/broker.manager.McpManager/GetServerInfo"
	McpManager_ListManagers_FullMethodName               = "/broker.manager.McpManager/ListManagers"
	McpManager_ListWorkers_FullMethodName                = "/broker.manager.McpManager/ListWorkers"
	McpManager_ListSessions_FullMethodName               = "/broker.manager.McpManager/ListSessions"
	McpManager_GetSession_FullMethodName                 = "/broker.manager.McpManager/GetSession"
	McpManager_GetSessionServer_FullMethodName           = "/broker.manager.McpManager/GetSessionServer"
	McpManager_ListRuns_FullMethodName                   = "/broker.manager.McpManager/ListRuns"
	McpManager_GetRun_FullMethodName                     = "/broker.manager.McpManager/GetRun"
	McpManager_ListSessionErrors_FullMethodName          = "/broker.manager.McpManager/ListSessionErrors"
	McpManager_ListSessionEvents_FullMethodName          = "/broker.manager.McpManager/ListSessionEvents"
	McpManager_ListSessionMessages_FullMethodName        = "/broker.manager.McpManager/ListSessionMessages"
	McpManager_ListRunErrors_FullMethodName              = "/broker.manager.McpManager/ListRunErrors"
	McpManager_ListRunEvents_FullMethodName              = "/broker.manager.McpManager/ListRunEvents"
	McpManager_ListRunMessages_FullMethodName            = "/broker.manager.McpManager/ListRunMessages"
	McpManager_GetError_FullMethodName                   = "/broker.manager.McpManager/GetError"
	McpManager_GetEvent_FullMethodName                   = "/broker.manager.McpManager/GetEvent"
	McpManager_GetMessage_FullMethodName                 = "/broker.manager.McpManager/GetMessage"
	McpManager_ListRecentlyActiveRuns_FullMethodName     = "/broker.manager.McpManager/ListRecentlyActiveRuns"
	McpManager_ListRecentlyActiveSessions_FullMethodName = "/broker.manager.McpManager/ListRecentlyActiveSessions"
	McpManager_GetServer_FullMethodName                  = "/broker.manager.McpManager/GetServer"
	McpManager_ListServers_FullMethodName                = "/broker.manager.McpManager/ListServers"
)

// McpManagerClient is the client API for McpManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type McpManagerClient interface {
	CheckActiveSession(ctx context.Context, in *CheckActiveSessionRequest, opts ...grpc.CallOption) (*CheckActiveSessionResponse, error)
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	DiscoverServer(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*GetServerResponse, error)
	DiscardSession(ctx context.Context, in *DiscardSessionRequest, opts ...grpc.CallOption) (*DiscardSessionResponse, error)
	SendMcpMessage(ctx context.Context, in *SendMcpMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[McpConnectionStreamResponse], error)
	StreamMcpMessages(ctx context.Context, in *StreamMcpMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[McpConnectionStreamResponse], error)
	GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*mcp.McpParticipant, error)
	ListManagers(ctx context.Context, in *workerBroker.ListManagersRequest, opts ...grpc.CallOption) (*workerBroker.ListManagersResponse, error)
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error)
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error)
	GetSessionServer(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetServerResponse, error)
	ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error)
	GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error)
	ListSessionErrors(ctx context.Context, in *ListSessionErrorsRequest, opts ...grpc.CallOption) (*ListSessionErrorsResponse, error)
	ListSessionEvents(ctx context.Context, in *ListSessionEventsRequest, opts ...grpc.CallOption) (*ListSessionEventsResponse, error)
	ListSessionMessages(ctx context.Context, in *ListSessionMessagesRequest, opts ...grpc.CallOption) (*ListSessionMessagesResponse, error)
	ListRunErrors(ctx context.Context, in *ListRunErrorsRequest, opts ...grpc.CallOption) (*ListRunErrorsResponse, error)
	ListRunEvents(ctx context.Context, in *ListRunEventsRequest, opts ...grpc.CallOption) (*ListRunEventsResponse, error)
	ListRunMessages(ctx context.Context, in *ListRunMessagesRequest, opts ...grpc.CallOption) (*ListRunMessagesResponse, error)
	GetError(ctx context.Context, in *GetErrorRequest, opts ...grpc.CallOption) (*GetErrorResponse, error)
	GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error)
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error)
	ListRecentlyActiveRuns(ctx context.Context, in *ListRecentlyActiveRunsRequest, opts ...grpc.CallOption) (*ListRecentlyActiveRunsResponse, error)
	ListRecentlyActiveSessions(ctx context.Context, in *ListRecentlyActiveSessionsRequest, opts ...grpc.CallOption) (*ListRecentlyActiveSessionsResponse, error)
	GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error)
	ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error)
}

type mcpManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewMcpManagerClient(cc grpc.ClientConnInterface) McpManagerClient {
	return &mcpManagerClient{cc}
}

func (c *mcpManagerClient) CheckActiveSession(ctx context.Context, in *CheckActiveSessionRequest, opts ...grpc.CallOption) (*CheckActiveSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckActiveSessionResponse)
	err := c.cc.Invoke(ctx, McpManager_CheckActiveSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, McpManager_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) DiscoverServer(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*GetServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerResponse)
	err := c.cc.Invoke(ctx, McpManager_DiscoverServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) DiscardSession(ctx context.Context, in *DiscardSessionRequest, opts ...grpc.CallOption) (*DiscardSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscardSessionResponse)
	err := c.cc.Invoke(ctx, McpManager_DiscardSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) SendMcpMessage(ctx context.Context, in *SendMcpMessageRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[McpConnectionStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &McpManager_ServiceDesc.Streams[0], McpManager_SendMcpMessage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendMcpMessageRequest, McpConnectionStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpManager_SendMcpMessageClient = grpc.ServerStreamingClient[McpConnectionStreamResponse]

func (c *mcpManagerClient) StreamMcpMessages(ctx context.Context, in *StreamMcpMessagesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[McpConnectionStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &McpManager_ServiceDesc.Streams[1], McpManager_StreamMcpMessages_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamMcpMessagesRequest, McpConnectionStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpManager_StreamMcpMessagesClient = grpc.ServerStreamingClient[McpConnectionStreamResponse]

func (c *mcpManagerClient) GetServerInfo(ctx context.Context, in *GetServerInfoRequest, opts ...grpc.CallOption) (*mcp.McpParticipant, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(mcp.McpParticipant)
	err := c.cc.Invoke(ctx, McpManager_GetServerInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListManagers(ctx context.Context, in *workerBroker.ListManagersRequest, opts ...grpc.CallOption) (*workerBroker.ListManagersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(workerBroker.ListManagersResponse)
	err := c.cc.Invoke(ctx, McpManager_ListManagers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, McpManager_ListWorkers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, McpManager_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionResponse)
	err := c.cc.Invoke(ctx, McpManager_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) GetSessionServer(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*GetServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerResponse)
	err := c.cc.Invoke(ctx, McpManager_GetSessionServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListRuns(ctx context.Context, in *ListRunsRequest, opts ...grpc.CallOption) (*ListRunsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunsResponse)
	err := c.cc.Invoke(ctx, McpManager_ListRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) GetRun(ctx context.Context, in *GetRunRequest, opts ...grpc.CallOption) (*GetRunResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRunResponse)
	err := c.cc.Invoke(ctx, McpManager_GetRun_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListSessionErrors(ctx context.Context, in *ListSessionErrorsRequest, opts ...grpc.CallOption) (*ListSessionErrorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionErrorsResponse)
	err := c.cc.Invoke(ctx, McpManager_ListSessionErrors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListSessionEvents(ctx context.Context, in *ListSessionEventsRequest, opts ...grpc.CallOption) (*ListSessionEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionEventsResponse)
	err := c.cc.Invoke(ctx, McpManager_ListSessionEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListSessionMessages(ctx context.Context, in *ListSessionMessagesRequest, opts ...grpc.CallOption) (*ListSessionMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionMessagesResponse)
	err := c.cc.Invoke(ctx, McpManager_ListSessionMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListRunErrors(ctx context.Context, in *ListRunErrorsRequest, opts ...grpc.CallOption) (*ListRunErrorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunErrorsResponse)
	err := c.cc.Invoke(ctx, McpManager_ListRunErrors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListRunEvents(ctx context.Context, in *ListRunEventsRequest, opts ...grpc.CallOption) (*ListRunEventsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunEventsResponse)
	err := c.cc.Invoke(ctx, McpManager_ListRunEvents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListRunMessages(ctx context.Context, in *ListRunMessagesRequest, opts ...grpc.CallOption) (*ListRunMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRunMessagesResponse)
	err := c.cc.Invoke(ctx, McpManager_ListRunMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) GetError(ctx context.Context, in *GetErrorRequest, opts ...grpc.CallOption) (*GetErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetErrorResponse)
	err := c.cc.Invoke(ctx, McpManager_GetError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) GetEvent(ctx context.Context, in *GetEventRequest, opts ...grpc.CallOption) (*GetEventResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEventResponse)
	err := c.cc.Invoke(ctx, McpManager_GetEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*GetMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageResponse)
	err := c.cc.Invoke(ctx, McpManager_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListRecentlyActiveRuns(ctx context.Context, in *ListRecentlyActiveRunsRequest, opts ...grpc.CallOption) (*ListRecentlyActiveRunsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecentlyActiveRunsResponse)
	err := c.cc.Invoke(ctx, McpManager_ListRecentlyActiveRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListRecentlyActiveSessions(ctx context.Context, in *ListRecentlyActiveSessionsRequest, opts ...grpc.CallOption) (*ListRecentlyActiveSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecentlyActiveSessionsResponse)
	err := c.cc.Invoke(ctx, McpManager_ListRecentlyActiveSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) GetServer(ctx context.Context, in *GetServerRequest, opts ...grpc.CallOption) (*GetServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServerResponse)
	err := c.cc.Invoke(ctx, McpManager_GetServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mcpManagerClient) ListServers(ctx context.Context, in *ListServersRequest, opts ...grpc.CallOption) (*ListServersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListServersResponse)
	err := c.cc.Invoke(ctx, McpManager_ListServers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// McpManagerServer is the server API for McpManager service.
// All implementations must embed UnimplementedMcpManagerServer
// for forward compatibility.
type McpManagerServer interface {
	CheckActiveSession(context.Context, *CheckActiveSessionRequest) (*CheckActiveSessionResponse, error)
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	DiscoverServer(context.Context, *DiscoverRequest) (*GetServerResponse, error)
	DiscardSession(context.Context, *DiscardSessionRequest) (*DiscardSessionResponse, error)
	SendMcpMessage(*SendMcpMessageRequest, grpc.ServerStreamingServer[McpConnectionStreamResponse]) error
	StreamMcpMessages(*StreamMcpMessagesRequest, grpc.ServerStreamingServer[McpConnectionStreamResponse]) error
	GetServerInfo(context.Context, *GetServerInfoRequest) (*mcp.McpParticipant, error)
	ListManagers(context.Context, *workerBroker.ListManagersRequest) (*workerBroker.ListManagersResponse, error)
	ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error)
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error)
	GetSessionServer(context.Context, *GetSessionRequest) (*GetServerResponse, error)
	ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error)
	GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error)
	ListSessionErrors(context.Context, *ListSessionErrorsRequest) (*ListSessionErrorsResponse, error)
	ListSessionEvents(context.Context, *ListSessionEventsRequest) (*ListSessionEventsResponse, error)
	ListSessionMessages(context.Context, *ListSessionMessagesRequest) (*ListSessionMessagesResponse, error)
	ListRunErrors(context.Context, *ListRunErrorsRequest) (*ListRunErrorsResponse, error)
	ListRunEvents(context.Context, *ListRunEventsRequest) (*ListRunEventsResponse, error)
	ListRunMessages(context.Context, *ListRunMessagesRequest) (*ListRunMessagesResponse, error)
	GetError(context.Context, *GetErrorRequest) (*GetErrorResponse, error)
	GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error)
	GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error)
	ListRecentlyActiveRuns(context.Context, *ListRecentlyActiveRunsRequest) (*ListRecentlyActiveRunsResponse, error)
	ListRecentlyActiveSessions(context.Context, *ListRecentlyActiveSessionsRequest) (*ListRecentlyActiveSessionsResponse, error)
	GetServer(context.Context, *GetServerRequest) (*GetServerResponse, error)
	ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error)
	mustEmbedUnimplementedMcpManagerServer()
}

// UnimplementedMcpManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMcpManagerServer struct{}

func (UnimplementedMcpManagerServer) CheckActiveSession(context.Context, *CheckActiveSessionRequest) (*CheckActiveSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckActiveSession not implemented")
}
func (UnimplementedMcpManagerServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedMcpManagerServer) DiscoverServer(context.Context, *DiscoverRequest) (*GetServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverServer not implemented")
}
func (UnimplementedMcpManagerServer) DiscardSession(context.Context, *DiscardSessionRequest) (*DiscardSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardSession not implemented")
}
func (UnimplementedMcpManagerServer) SendMcpMessage(*SendMcpMessageRequest, grpc.ServerStreamingServer[McpConnectionStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendMcpMessage not implemented")
}
func (UnimplementedMcpManagerServer) StreamMcpMessages(*StreamMcpMessagesRequest, grpc.ServerStreamingServer[McpConnectionStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMcpMessages not implemented")
}
func (UnimplementedMcpManagerServer) GetServerInfo(context.Context, *GetServerInfoRequest) (*mcp.McpParticipant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServerInfo not implemented")
}
func (UnimplementedMcpManagerServer) ListManagers(context.Context, *workerBroker.ListManagersRequest) (*workerBroker.ListManagersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListManagers not implemented")
}
func (UnimplementedMcpManagerServer) ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (UnimplementedMcpManagerServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedMcpManagerServer) GetSession(context.Context, *GetSessionRequest) (*GetSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedMcpManagerServer) GetSessionServer(context.Context, *GetSessionRequest) (*GetServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionServer not implemented")
}
func (UnimplementedMcpManagerServer) ListRuns(context.Context, *ListRunsRequest) (*ListRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRuns not implemented")
}
func (UnimplementedMcpManagerServer) GetRun(context.Context, *GetRunRequest) (*GetRunResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRun not implemented")
}
func (UnimplementedMcpManagerServer) ListSessionErrors(context.Context, *ListSessionErrorsRequest) (*ListSessionErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessionErrors not implemented")
}
func (UnimplementedMcpManagerServer) ListSessionEvents(context.Context, *ListSessionEventsRequest) (*ListSessionEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessionEvents not implemented")
}
func (UnimplementedMcpManagerServer) ListSessionMessages(context.Context, *ListSessionMessagesRequest) (*ListSessionMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessionMessages not implemented")
}
func (UnimplementedMcpManagerServer) ListRunErrors(context.Context, *ListRunErrorsRequest) (*ListRunErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunErrors not implemented")
}
func (UnimplementedMcpManagerServer) ListRunEvents(context.Context, *ListRunEventsRequest) (*ListRunEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunEvents not implemented")
}
func (UnimplementedMcpManagerServer) ListRunMessages(context.Context, *ListRunMessagesRequest) (*ListRunMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRunMessages not implemented")
}
func (UnimplementedMcpManagerServer) GetError(context.Context, *GetErrorRequest) (*GetErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetError not implemented")
}
func (UnimplementedMcpManagerServer) GetEvent(context.Context, *GetEventRequest) (*GetEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvent not implemented")
}
func (UnimplementedMcpManagerServer) GetMessage(context.Context, *GetMessageRequest) (*GetMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedMcpManagerServer) ListRecentlyActiveRuns(context.Context, *ListRecentlyActiveRunsRequest) (*ListRecentlyActiveRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentlyActiveRuns not implemented")
}
func (UnimplementedMcpManagerServer) ListRecentlyActiveSessions(context.Context, *ListRecentlyActiveSessionsRequest) (*ListRecentlyActiveSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecentlyActiveSessions not implemented")
}
func (UnimplementedMcpManagerServer) GetServer(context.Context, *GetServerRequest) (*GetServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}
func (UnimplementedMcpManagerServer) ListServers(context.Context, *ListServersRequest) (*ListServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedMcpManagerServer) mustEmbedUnimplementedMcpManagerServer() {}
func (UnimplementedMcpManagerServer) testEmbeddedByValue()                    {}

// UnsafeMcpManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to McpManagerServer will
// result in compilation errors.
type UnsafeMcpManagerServer interface {
	mustEmbedUnimplementedMcpManagerServer()
}

func RegisterMcpManagerServer(s grpc.ServiceRegistrar, srv McpManagerServer) {
	// If the following call pancis, it indicates UnimplementedMcpManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&McpManager_ServiceDesc, srv)
}

func _McpManager_CheckActiveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckActiveSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).CheckActiveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_CheckActiveSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).CheckActiveSession(ctx, req.(*CheckActiveSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_DiscoverServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).DiscoverServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_DiscoverServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).DiscoverServer(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_DiscardSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscardSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).DiscardSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_DiscardSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).DiscardSession(ctx, req.(*DiscardSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_SendMcpMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SendMcpMessageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(McpManagerServer).SendMcpMessage(m, &grpc.GenericServerStream[SendMcpMessageRequest, McpConnectionStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpManager_SendMcpMessageServer = grpc.ServerStreamingServer[McpConnectionStreamResponse]

func _McpManager_StreamMcpMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamMcpMessagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(McpManagerServer).StreamMcpMessages(m, &grpc.GenericServerStream[StreamMcpMessagesRequest, McpConnectionStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type McpManager_StreamMcpMessagesServer = grpc.ServerStreamingServer[McpConnectionStreamResponse]

func _McpManager_GetServerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).GetServerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_GetServerInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).GetServerInfo(ctx, req.(*GetServerInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListManagers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workerBroker.ListManagersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListManagers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListManagers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListManagers(ctx, req.(*workerBroker.ListManagersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_GetSessionServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).GetSessionServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_GetSessionServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).GetSessionServer(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListRuns(ctx, req.(*ListRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_GetRun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRunRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).GetRun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_GetRun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).GetRun(ctx, req.(*GetRunRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListSessionErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListSessionErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListSessionErrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListSessionErrors(ctx, req.(*ListSessionErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListSessionEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListSessionEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListSessionEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListSessionEvents(ctx, req.(*ListSessionEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListSessionMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListSessionMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListSessionMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListSessionMessages(ctx, req.(*ListSessionMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListRunErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListRunErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListRunErrors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListRunErrors(ctx, req.(*ListRunErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListRunEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListRunEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListRunEvents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListRunEvents(ctx, req.(*ListRunEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListRunMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRunMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListRunMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListRunMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListRunMessages(ctx, req.(*ListRunMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_GetError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).GetError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_GetError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).GetError(ctx, req.(*GetErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_GetEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).GetEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_GetEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).GetEvent(ctx, req.(*GetEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListRecentlyActiveRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecentlyActiveRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListRecentlyActiveRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListRecentlyActiveRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListRecentlyActiveRuns(ctx, req.(*ListRecentlyActiveRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListRecentlyActiveSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecentlyActiveSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListRecentlyActiveSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListRecentlyActiveSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListRecentlyActiveSessions(ctx, req.(*ListRecentlyActiveSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).GetServer(ctx, req.(*GetServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _McpManager_ListServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(McpManagerServer).ListServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: McpManager_ListServers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(McpManagerServer).ListServers(ctx, req.(*ListServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// McpManager_ServiceDesc is the grpc.ServiceDesc for McpManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var McpManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "broker.manager.McpManager",
	HandlerType: (*McpManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckActiveSession",
			Handler:    _McpManager_CheckActiveSession_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _McpManager_CreateSession_Handler,
		},
		{
			MethodName: "DiscoverServer",
			Handler:    _McpManager_DiscoverServer_Handler,
		},
		{
			MethodName: "DiscardSession",
			Handler:    _McpManager_DiscardSession_Handler,
		},
		{
			MethodName: "GetServerInfo",
			Handler:    _McpManager_GetServerInfo_Handler,
		},
		{
			MethodName: "ListManagers",
			Handler:    _McpManager_ListManagers_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _McpManager_ListWorkers_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _McpManager_ListSessions_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _McpManager_GetSession_Handler,
		},
		{
			MethodName: "GetSessionServer",
			Handler:    _McpManager_GetSessionServer_Handler,
		},
		{
			MethodName: "ListRuns",
			Handler:    _McpManager_ListRuns_Handler,
		},
		{
			MethodName: "GetRun",
			Handler:    _McpManager_GetRun_Handler,
		},
		{
			MethodName: "ListSessionErrors",
			Handler:    _McpManager_ListSessionErrors_Handler,
		},
		{
			MethodName: "ListSessionEvents",
			Handler:    _McpManager_ListSessionEvents_Handler,
		},
		{
			MethodName: "ListSessionMessages",
			Handler:    _McpManager_ListSessionMessages_Handler,
		},
		{
			MethodName: "ListRunErrors",
			Handler:    _McpManager_ListRunErrors_Handler,
		},
		{
			MethodName: "ListRunEvents",
			Handler:    _McpManager_ListRunEvents_Handler,
		},
		{
			MethodName: "ListRunMessages",
			Handler:    _McpManager_ListRunMessages_Handler,
		},
		{
			MethodName: "GetError",
			Handler:    _McpManager_GetError_Handler,
		},
		{
			MethodName: "GetEvent",
			Handler:    _McpManager_GetEvent_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _McpManager_GetMessage_Handler,
		},
		{
			MethodName: "ListRecentlyActiveRuns",
			Handler:    _McpManager_ListRecentlyActiveRuns_Handler,
		},
		{
			MethodName: "ListRecentlyActiveSessions",
			Handler:    _McpManager_ListRecentlyActiveSessions_Handler,
		},
		{
			MethodName: "GetServer",
			Handler:    _McpManager_GetServer_Handler,
		},
		{
			MethodName: "ListServers",
			Handler:    _McpManager_ListServers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMcpMessage",
			Handler:       _McpManager_SendMcpMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamMcpMessages",
			Handler:       _McpManager_StreamMcpMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "manager.proto",
}
