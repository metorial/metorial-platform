// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: manager.proto

package manager

import (
	mcp "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/mcp"
	runner "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/runner"
	workerBroker "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/workerBroker"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSessionRequest_SessionType int32

const (
	CreateSessionRequest_runner CreateSessionRequest_SessionType = 0
)

// Enum value maps for CreateSessionRequest_SessionType.
var (
	CreateSessionRequest_SessionType_name = map[int32]string{
		0: "runner",
	}
	CreateSessionRequest_SessionType_value = map[string]int32{
		"runner": 0,
	}
)

func (x CreateSessionRequest_SessionType) Enum() *CreateSessionRequest_SessionType {
	p := new(CreateSessionRequest_SessionType)
	*p = x
	return p
}

func (x CreateSessionRequest_SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateSessionRequest_SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[0].Descriptor()
}

func (CreateSessionRequest_SessionType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[0]
}

func (x CreateSessionRequest_SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateSessionRequest_SessionType.Descriptor instead.
func (CreateSessionRequest_SessionType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0, 0}
}

type Launcher_LauncherType int32

const (
	Launcher_deno Launcher_LauncherType = 0
)

// Enum value maps for Launcher_LauncherType.
var (
	Launcher_LauncherType_name = map[int32]string{
		0: "deno",
	}
	Launcher_LauncherType_value = map[string]int32{
		"deno": 0,
	}
)

func (x Launcher_LauncherType) Enum() *Launcher_LauncherType {
	p := new(Launcher_LauncherType)
	*p = x
	return p
}

func (x Launcher_LauncherType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Launcher_LauncherType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[1].Descriptor()
}

func (Launcher_LauncherType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[1]
}

func (x Launcher_LauncherType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Launcher_LauncherType.Descriptor instead.
func (Launcher_LauncherType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1, 0}
}

type SendMcpMessageResponse_ResponseType int32

const (
	SendMcpMessageResponse_error   SendMcpMessageResponse_ResponseType = 0
	SendMcpMessageResponse_message SendMcpMessageResponse_ResponseType = 1
)

// Enum value maps for SendMcpMessageResponse_ResponseType.
var (
	SendMcpMessageResponse_ResponseType_name = map[int32]string{
		0: "error",
		1: "message",
	}
	SendMcpMessageResponse_ResponseType_value = map[string]int32{
		"error":   0,
		"message": 1,
	}
)

func (x SendMcpMessageResponse_ResponseType) Enum() *SendMcpMessageResponse_ResponseType {
	p := new(SendMcpMessageResponse_ResponseType)
	*p = x
	return p
}

func (x SendMcpMessageResponse_ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SendMcpMessageResponse_ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[2].Descriptor()
}

func (SendMcpMessageResponse_ResponseType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[2]
}

func (x SendMcpMessageResponse_ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SendMcpMessageResponse_ResponseType.Descriptor instead.
func (SendMcpMessageResponse_ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{6, 0}
}

type StreamMcpMessagesResponse_ResponseType int32

const (
	StreamMcpMessagesResponse_error   StreamMcpMessagesResponse_ResponseType = 0
	StreamMcpMessagesResponse_message StreamMcpMessagesResponse_ResponseType = 1
)

// Enum value maps for StreamMcpMessagesResponse_ResponseType.
var (
	StreamMcpMessagesResponse_ResponseType_name = map[int32]string{
		0: "error",
		1: "message",
	}
	StreamMcpMessagesResponse_ResponseType_value = map[string]int32{
		"error":   0,
		"message": 1,
	}
)

func (x StreamMcpMessagesResponse_ResponseType) Enum() *StreamMcpMessagesResponse_ResponseType {
	p := new(StreamMcpMessagesResponse_ResponseType)
	*p = x
	return p
}

func (x StreamMcpMessagesResponse_ResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamMcpMessagesResponse_ResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[3].Descriptor()
}

func (StreamMcpMessagesResponse_ResponseType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[3]
}

func (x StreamMcpMessagesResponse_ResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamMcpMessagesResponse_ResponseType.Descriptor instead.
func (StreamMcpMessagesResponse_ResponseType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{8, 0}
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	SessionId     string                           `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type          CreateSessionRequest_SessionType `protobuf:"varint,2,opt,name=type,proto3,enum=broker.manager.CreateSessionRequest_SessionType" json:"type,omitempty"`
	Config        *SessionConfig                   `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	McpClient     *mcp.McpParticipant              `protobuf:"bytes,4,opt,name=mcp_client,json=mcpClient,proto3" json:"mcp_client,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionRequest) GetType() CreateSessionRequest_SessionType {
	if x != nil {
		return x.Type
	}
	return CreateSessionRequest_runner
}

func (x *CreateSessionRequest) GetConfig() *SessionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateSessionRequest) GetMcpClient() *mcp.McpParticipant {
	if x != nil {
		return x.McpClient
	}
	return nil
}

type Launcher struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LauncherType  Launcher_LauncherType  `protobuf:"varint,1,opt,name=launcher_type,json=launcherType,proto3,enum=broker.manager.Launcher_LauncherType" json:"launcher_type,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	JsonConfig    string                 `protobuf:"bytes,3,opt,name=json_config,json=jsonConfig,proto3" json:"json_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Launcher) Reset() {
	*x = Launcher{}
	mi := &file_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Launcher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Launcher) ProtoMessage() {}

func (x *Launcher) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Launcher.ProtoReflect.Descriptor instead.
func (*Launcher) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1}
}

func (x *Launcher) GetLauncherType() Launcher_LauncherType {
	if x != nil {
		return x.LauncherType
	}
	return Launcher_deno
}

func (x *Launcher) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Launcher) GetJsonConfig() string {
	if x != nil {
		return x.JsonConfig
	}
	return ""
}

type RunConfigWithLauncher struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Container     *runner.RunConfigContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Launcher      *Launcher                  `protobuf:"bytes,2,opt,name=launcher,proto3" json:"launcher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfigWithLauncher) Reset() {
	*x = RunConfigWithLauncher{}
	mi := &file_manager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfigWithLauncher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfigWithLauncher) ProtoMessage() {}

func (x *RunConfigWithLauncher) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfigWithLauncher.ProtoReflect.Descriptor instead.
func (*RunConfigWithLauncher) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{2}
}

func (x *RunConfigWithLauncher) GetContainer() *runner.RunConfigContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *RunConfigWithLauncher) GetLauncher() *Launcher {
	if x != nil {
		return x.Launcher
	}
	return nil
}

type SessionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ConfigType:
	//
	//	*SessionConfig_RunConfigWithLauncher
	//	*SessionConfig_RunConfigWithContainerArguments
	ConfigType    isSessionConfig_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionConfig) Reset() {
	*x = SessionConfig{}
	mi := &file_manager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionConfig) ProtoMessage() {}

func (x *SessionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionConfig.ProtoReflect.Descriptor instead.
func (*SessionConfig) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{3}
}

func (x *SessionConfig) GetConfigType() isSessionConfig_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *SessionConfig) GetRunConfigWithLauncher() *RunConfigWithLauncher {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_RunConfigWithLauncher); ok {
			return x.RunConfigWithLauncher
		}
	}
	return nil
}

func (x *SessionConfig) GetRunConfigWithContainerArguments() *runner.RunConfig {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_RunConfigWithContainerArguments); ok {
			return x.RunConfigWithContainerArguments
		}
	}
	return nil
}

type isSessionConfig_ConfigType interface {
	isSessionConfig_ConfigType()
}

type SessionConfig_RunConfigWithLauncher struct {
	RunConfigWithLauncher *RunConfigWithLauncher `protobuf:"bytes,1,opt,name=run_config_with_launcher,json=runConfigWithLauncher,proto3,oneof"`
}

type SessionConfig_RunConfigWithContainerArguments struct {
	RunConfigWithContainerArguments *runner.RunConfig `protobuf:"bytes,2,opt,name=run_config_with_container_arguments,json=runConfigWithContainerArguments,proto3,oneof"`
}

func (*SessionConfig_RunConfigWithLauncher) isSessionConfig_ConfigType() {}

func (*SessionConfig_RunConfigWithContainerArguments) isSessionConfig_ConfigType() {}

type CreateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_manager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{4}
}

type SendMcpMessageRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionId        string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	McpMessages      []*mcp.McpMessageRaw   `protobuf:"bytes,2,rep,name=mcp_messages,json=mcpMessages,proto3" json:"mcp_messages,omitempty"`
	IncludeResponses bool                   `protobuf:"varint,3,opt,name=include_responses,json=includeResponses,proto3" json:"include_responses,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SendMcpMessageRequest) Reset() {
	*x = SendMcpMessageRequest{}
	mi := &file_manager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMcpMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMcpMessageRequest) ProtoMessage() {}

func (x *SendMcpMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMcpMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMcpMessageRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{5}
}

func (x *SendMcpMessageRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendMcpMessageRequest) GetMcpMessages() []*mcp.McpMessageRaw {
	if x != nil {
		return x.McpMessages
	}
	return nil
}

func (x *SendMcpMessageRequest) GetIncludeResponses() bool {
	if x != nil {
		return x.IncludeResponses
	}
	return false
}

type SendMcpMessageResponse struct {
	state              protoimpl.MessageState              `protogen:"open.v1"`
	ResponseType       SendMcpMessageResponse_ResponseType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=broker.manager.SendMcpMessageResponse_ResponseType" json:"response_type,omitempty"`
	McpResponseMessage *mcp.McpMessage                     `protobuf:"bytes,2,opt,name=mcp_response_message,json=mcpResponseMessage,proto3" json:"mcp_response_message,omitempty"`
	McpError           *mcp.McpError                       `protobuf:"bytes,3,opt,name=mcp_error,json=mcpError,proto3" json:"mcp_error,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SendMcpMessageResponse) Reset() {
	*x = SendMcpMessageResponse{}
	mi := &file_manager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMcpMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMcpMessageResponse) ProtoMessage() {}

func (x *SendMcpMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMcpMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMcpMessageResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{6}
}

func (x *SendMcpMessageResponse) GetResponseType() SendMcpMessageResponse_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return SendMcpMessageResponse_error
}

func (x *SendMcpMessageResponse) GetMcpResponseMessage() *mcp.McpMessage {
	if x != nil {
		return x.McpResponseMessage
	}
	return nil
}

func (x *SendMcpMessageResponse) GetMcpError() *mcp.McpError {
	if x != nil {
		return x.McpError
	}
	return nil
}

type StreamMcpMessagesRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionId        string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OnlyMessageTypes []mcp.McpMessageType   `protobuf:"varint,2,rep,packed,name=only_message_types,json=onlyMessageTypes,proto3,enum=broker.mcp.McpMessageType" json:"only_message_types,omitempty"` // Optional, if empty, all message types are streamed
	OnlyIds          []string               `protobuf:"bytes,3,rep,name=only_ids,json=onlyIds,proto3" json:"only_ids,omitempty"`                                                                     // Optional, if empty, all messages are streamed
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StreamMcpMessagesRequest) Reset() {
	*x = StreamMcpMessagesRequest{}
	mi := &file_manager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMcpMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMcpMessagesRequest) ProtoMessage() {}

func (x *StreamMcpMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMcpMessagesRequest.ProtoReflect.Descriptor instead.
func (*StreamMcpMessagesRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{7}
}

func (x *StreamMcpMessagesRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamMcpMessagesRequest) GetOnlyMessageTypes() []mcp.McpMessageType {
	if x != nil {
		return x.OnlyMessageTypes
	}
	return nil
}

func (x *StreamMcpMessagesRequest) GetOnlyIds() []string {
	if x != nil {
		return x.OnlyIds
	}
	return nil
}

type StreamMcpMessagesResponse struct {
	state              protoimpl.MessageState                 `protogen:"open.v1"`
	ResponseType       StreamMcpMessagesResponse_ResponseType `protobuf:"varint,1,opt,name=response_type,json=responseType,proto3,enum=broker.manager.StreamMcpMessagesResponse_ResponseType" json:"response_type,omitempty"`
	McpResponseMessage *mcp.McpMessage                        `protobuf:"bytes,2,opt,name=mcp_response_message,json=mcpResponseMessage,proto3" json:"mcp_response_message,omitempty"`
	McpError           *mcp.McpError                          `protobuf:"bytes,3,opt,name=mcp_error,json=mcpError,proto3" json:"mcp_error,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *StreamMcpMessagesResponse) Reset() {
	*x = StreamMcpMessagesResponse{}
	mi := &file_manager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMcpMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMcpMessagesResponse) ProtoMessage() {}

func (x *StreamMcpMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMcpMessagesResponse.ProtoReflect.Descriptor instead.
func (*StreamMcpMessagesResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{8}
}

func (x *StreamMcpMessagesResponse) GetResponseType() StreamMcpMessagesResponse_ResponseType {
	if x != nil {
		return x.ResponseType
	}
	return StreamMcpMessagesResponse_error
}

func (x *StreamMcpMessagesResponse) GetMcpResponseMessage() *mcp.McpMessage {
	if x != nil {
		return x.McpResponseMessage
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetMcpError() *mcp.McpError {
	if x != nil {
		return x.McpError
	}
	return nil
}

type GetServerInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServerInfoRequest) Reset() {
	*x = GetServerInfoRequest{}
	mi := &file_manager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerInfoRequest) ProtoMessage() {}

func (x *GetServerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerInfoRequest.ProtoReflect.Descriptor instead.
func (*GetServerInfoRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{9}
}

func (x *GetServerInfoRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ListWorkersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkersRequest) Reset() {
	*x = ListWorkersRequest{}
	mi := &file_manager_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersRequest) ProtoMessage() {}

func (x *ListWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersRequest.ProtoReflect.Descriptor instead.
func (*ListWorkersRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{10}
}

type ListWorkersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workers       []*WorkerInfo          `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkersResponse) Reset() {
	*x = ListWorkersResponse{}
	mi := &file_manager_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersResponse) ProtoMessage() {}

func (x *ListWorkersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersResponse.ProtoReflect.Descriptor instead.
func (*ListWorkersResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{11}
}

func (x *ListWorkersResponse) GetWorkers() []*WorkerInfo {
	if x != nil {
		return x.Workers
	}
	return nil
}

type WorkerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	AcceptingRuns bool                   `protobuf:"varint,3,opt,name=accepting_runs,json=acceptingRuns,proto3" json:"accepting_runs,omitempty"`
	Healthy       bool                   `protobuf:"varint,4,opt,name=healthy,proto3" json:"healthy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	mi := &file_manager_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{12}
}

func (x *WorkerInfo) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WorkerInfo) GetAcceptingRuns() bool {
	if x != nil {
		return x.AcceptingRuns
	}
	return false
}

func (x *WorkerInfo) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

type DiscardSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscardSessionRequest) Reset() {
	*x = DiscardSessionRequest{}
	mi := &file_manager_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscardSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardSessionRequest) ProtoMessage() {}

func (x *DiscardSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardSessionRequest.ProtoReflect.Descriptor instead.
func (*DiscardSessionRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{13}
}

func (x *DiscardSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type DiscardSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscardSessionResponse) Reset() {
	*x = DiscardSessionResponse{}
	mi := &file_manager_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscardSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardSessionResponse) ProtoMessage() {}

func (x *DiscardSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardSessionResponse.ProtoReflect.Descriptor instead.
func (*DiscardSessionResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{14}
}

var File_manager_proto protoreflect.FileDescriptor

const file_manager_proto_rawDesc = "" +
	"\n" +
	"\rmanager.proto\x12\x0ebroker.manager\x1a\frunner.proto\x1a\tmcp.proto\x1a\x12workerBroker.proto\"\x88\x02\n" +
	"\x14CreateSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12D\n" +
	"\x04type\x18\x02 \x01(\x0e20.broker.manager.CreateSessionRequest.SessionTypeR\x04type\x125\n" +
	"\x06config\x18\x03 \x01(\v2\x1d.broker.manager.SessionConfigR\x06config\x129\n" +
	"\n" +
	"mcp_client\x18\x04 \x01(\v2\x1a.broker.mcp.McpParticipantR\tmcpClient\"\x19\n" +
	"\vSessionType\x12\n" +
	"\n" +
	"\x06runner\x10\x00\"\xa5\x01\n" +
	"\bLauncher\x12J\n" +
	"\rlauncher_type\x18\x01 \x01(\x0e2%.broker.manager.Launcher.LauncherTypeR\flauncherType\x12\x12\n" +
	"\x04code\x18\x02 \x01(\tR\x04code\x12\x1f\n" +
	"\vjson_config\x18\x03 \x01(\tR\n" +
	"jsonConfig\"\x18\n" +
	"\fLauncherType\x12\b\n" +
	"\x04deno\x10\x00\"\x8e\x01\n" +
	"\x15RunConfigWithLauncher\x12?\n" +
	"\tcontainer\x18\x01 \x01(\v2!.broker.runner.RunConfigContainerR\tcontainer\x124\n" +
	"\blauncher\x18\x02 \x01(\v2\x18.broker.manager.LauncherR\blauncher\"\xea\x01\n" +
	"\rSessionConfig\x12`\n" +
	"\x18run_config_with_launcher\x18\x01 \x01(\v2%.broker.manager.RunConfigWithLauncherH\x00R\x15runConfigWithLauncher\x12h\n" +
	"#run_config_with_container_arguments\x18\x02 \x01(\v2\x18.broker.runner.RunConfigH\x00R\x1frunConfigWithContainerArgumentsB\r\n" +
	"\vconfig_type\"\x17\n" +
	"\x15CreateSessionResponse\"\xa1\x01\n" +
	"\x15SendMcpMessageRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12<\n" +
	"\fmcp_messages\x18\x02 \x03(\v2\x19.broker.mcp.McpMessageRawR\vmcpMessages\x12+\n" +
	"\x11include_responses\x18\x03 \x01(\bR\x10includeResponses\"\x97\x02\n" +
	"\x16SendMcpMessageResponse\x12X\n" +
	"\rresponse_type\x18\x01 \x01(\x0e23.broker.manager.SendMcpMessageResponse.ResponseTypeR\fresponseType\x12H\n" +
	"\x14mcp_response_message\x18\x02 \x01(\v2\x16.broker.mcp.McpMessageR\x12mcpResponseMessage\x121\n" +
	"\tmcp_error\x18\x03 \x01(\v2\x14.broker.mcp.McpErrorR\bmcpError\"&\n" +
	"\fResponseType\x12\t\n" +
	"\x05error\x10\x00\x12\v\n" +
	"\amessage\x10\x01\"\x9e\x01\n" +
	"\x18StreamMcpMessagesRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12H\n" +
	"\x12only_message_types\x18\x02 \x03(\x0e2\x1a.broker.mcp.McpMessageTypeR\x10onlyMessageTypes\x12\x19\n" +
	"\bonly_ids\x18\x03 \x03(\tR\aonlyIds\"\x9d\x02\n" +
	"\x19StreamMcpMessagesResponse\x12[\n" +
	"\rresponse_type\x18\x01 \x01(\x0e26.broker.manager.StreamMcpMessagesResponse.ResponseTypeR\fresponseType\x12H\n" +
	"\x14mcp_response_message\x18\x02 \x01(\v2\x16.broker.mcp.McpMessageR\x12mcpResponseMessage\x121\n" +
	"\tmcp_error\x18\x03 \x01(\v2\x14.broker.mcp.McpErrorR\bmcpError\"&\n" +
	"\fResponseType\x12\t\n" +
	"\x05error\x10\x00\x12\v\n" +
	"\amessage\x10\x01\"5\n" +
	"\x14GetServerInfoRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"\x14\n" +
	"\x12ListWorkersRequest\"K\n" +
	"\x13ListWorkersResponse\x124\n" +
	"\aworkers\x18\x01 \x03(\v2\x1a.broker.manager.WorkerInfoR\aworkers\"\x84\x01\n" +
	"\n" +
	"WorkerInfo\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12%\n" +
	"\x0eaccepting_runs\x18\x03 \x01(\bR\racceptingRuns\x12\x18\n" +
	"\ahealthy\x18\x04 \x01(\bR\ahealthy\"6\n" +
	"\x15DiscardSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"\x18\n" +
	"\x16DiscardSessionResponse2\xaa\x05\n" +
	"\n" +
	"McpManager\x12\\\n" +
	"\rCreateSession\x12$.broker.manager.CreateSessionRequest\x1a%.broker.manager.CreateSessionResponse\x12a\n" +
	"\x0eSendMcpMessage\x12%.broker.manager.SendMcpMessageRequest\x1a&.broker.manager.SendMcpMessageResponse0\x01\x12j\n" +
	"\x11StreamMcpMessages\x12(.broker.manager.StreamMcpMessagesRequest\x1a).broker.manager.StreamMcpMessagesResponse0\x01\x12Q\n" +
	"\rGetServerInfo\x12$.broker.manager.GetServerInfoRequest\x1a\x1a.broker.mcp.McpParticipant\x12_\n" +
	"\x0eDiscardSession\x12%.broker.manager.DiscardSessionRequest\x1a&.broker.manager.DiscardSessionResponse\x12c\n" +
	"\fListManagers\x12(.broker.workerBroker.ListManagersRequest\x1a).broker.workerBroker.ListManagersResponse\x12V\n" +
	"\vListWorkers\x12\".broker.manager.ListWorkersRequest\x1a#.broker.manager.ListWorkersResponseBHZFgithub.com/metorial/metorial/mcp-engine/gen/mcp-engine/manager;managerb\x06proto3"

var (
	file_manager_proto_rawDescOnce sync.Once
	file_manager_proto_rawDescData []byte
)

func file_manager_proto_rawDescGZIP() []byte {
	file_manager_proto_rawDescOnce.Do(func() {
		file_manager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_manager_proto_rawDesc), len(file_manager_proto_rawDesc)))
	})
	return file_manager_proto_rawDescData
}

var file_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_manager_proto_goTypes = []any{
	(CreateSessionRequest_SessionType)(0),       // 0: broker.manager.CreateSessionRequest.SessionType
	(Launcher_LauncherType)(0),                  // 1: broker.manager.Launcher.LauncherType
	(SendMcpMessageResponse_ResponseType)(0),    // 2: broker.manager.SendMcpMessageResponse.ResponseType
	(StreamMcpMessagesResponse_ResponseType)(0), // 3: broker.manager.StreamMcpMessagesResponse.ResponseType
	(*CreateSessionRequest)(nil),                // 4: broker.manager.CreateSessionRequest
	(*Launcher)(nil),                            // 5: broker.manager.Launcher
	(*RunConfigWithLauncher)(nil),               // 6: broker.manager.RunConfigWithLauncher
	(*SessionConfig)(nil),                       // 7: broker.manager.SessionConfig
	(*CreateSessionResponse)(nil),               // 8: broker.manager.CreateSessionResponse
	(*SendMcpMessageRequest)(nil),               // 9: broker.manager.SendMcpMessageRequest
	(*SendMcpMessageResponse)(nil),              // 10: broker.manager.SendMcpMessageResponse
	(*StreamMcpMessagesRequest)(nil),            // 11: broker.manager.StreamMcpMessagesRequest
	(*StreamMcpMessagesResponse)(nil),           // 12: broker.manager.StreamMcpMessagesResponse
	(*GetServerInfoRequest)(nil),                // 13: broker.manager.GetServerInfoRequest
	(*ListWorkersRequest)(nil),                  // 14: broker.manager.ListWorkersRequest
	(*ListWorkersResponse)(nil),                 // 15: broker.manager.ListWorkersResponse
	(*WorkerInfo)(nil),                          // 16: broker.manager.WorkerInfo
	(*DiscardSessionRequest)(nil),               // 17: broker.manager.DiscardSessionRequest
	(*DiscardSessionResponse)(nil),              // 18: broker.manager.DiscardSessionResponse
	(*mcp.McpParticipant)(nil),                  // 19: broker.mcp.McpParticipant
	(*runner.RunConfigContainer)(nil),           // 20: broker.runner.RunConfigContainer
	(*runner.RunConfig)(nil),                    // 21: broker.runner.RunConfig
	(*mcp.McpMessageRaw)(nil),                   // 22: broker.mcp.McpMessageRaw
	(*mcp.McpMessage)(nil),                      // 23: broker.mcp.McpMessage
	(*mcp.McpError)(nil),                        // 24: broker.mcp.McpError
	(mcp.McpMessageType)(0),                     // 25: broker.mcp.McpMessageType
	(*workerBroker.ListManagersRequest)(nil),    // 26: broker.workerBroker.ListManagersRequest
	(*workerBroker.ListManagersResponse)(nil),   // 27: broker.workerBroker.ListManagersResponse
}
var file_manager_proto_depIdxs = []int32{
	0,  // 0: broker.manager.CreateSessionRequest.type:type_name -> broker.manager.CreateSessionRequest.SessionType
	7,  // 1: broker.manager.CreateSessionRequest.config:type_name -> broker.manager.SessionConfig
	19, // 2: broker.manager.CreateSessionRequest.mcp_client:type_name -> broker.mcp.McpParticipant
	1,  // 3: broker.manager.Launcher.launcher_type:type_name -> broker.manager.Launcher.LauncherType
	20, // 4: broker.manager.RunConfigWithLauncher.container:type_name -> broker.runner.RunConfigContainer
	5,  // 5: broker.manager.RunConfigWithLauncher.launcher:type_name -> broker.manager.Launcher
	6,  // 6: broker.manager.SessionConfig.run_config_with_launcher:type_name -> broker.manager.RunConfigWithLauncher
	21, // 7: broker.manager.SessionConfig.run_config_with_container_arguments:type_name -> broker.runner.RunConfig
	22, // 8: broker.manager.SendMcpMessageRequest.mcp_messages:type_name -> broker.mcp.McpMessageRaw
	2,  // 9: broker.manager.SendMcpMessageResponse.response_type:type_name -> broker.manager.SendMcpMessageResponse.ResponseType
	23, // 10: broker.manager.SendMcpMessageResponse.mcp_response_message:type_name -> broker.mcp.McpMessage
	24, // 11: broker.manager.SendMcpMessageResponse.mcp_error:type_name -> broker.mcp.McpError
	25, // 12: broker.manager.StreamMcpMessagesRequest.only_message_types:type_name -> broker.mcp.McpMessageType
	3,  // 13: broker.manager.StreamMcpMessagesResponse.response_type:type_name -> broker.manager.StreamMcpMessagesResponse.ResponseType
	23, // 14: broker.manager.StreamMcpMessagesResponse.mcp_response_message:type_name -> broker.mcp.McpMessage
	24, // 15: broker.manager.StreamMcpMessagesResponse.mcp_error:type_name -> broker.mcp.McpError
	16, // 16: broker.manager.ListWorkersResponse.workers:type_name -> broker.manager.WorkerInfo
	4,  // 17: broker.manager.McpManager.CreateSession:input_type -> broker.manager.CreateSessionRequest
	9,  // 18: broker.manager.McpManager.SendMcpMessage:input_type -> broker.manager.SendMcpMessageRequest
	11, // 19: broker.manager.McpManager.StreamMcpMessages:input_type -> broker.manager.StreamMcpMessagesRequest
	13, // 20: broker.manager.McpManager.GetServerInfo:input_type -> broker.manager.GetServerInfoRequest
	17, // 21: broker.manager.McpManager.DiscardSession:input_type -> broker.manager.DiscardSessionRequest
	26, // 22: broker.manager.McpManager.ListManagers:input_type -> broker.workerBroker.ListManagersRequest
	14, // 23: broker.manager.McpManager.ListWorkers:input_type -> broker.manager.ListWorkersRequest
	8,  // 24: broker.manager.McpManager.CreateSession:output_type -> broker.manager.CreateSessionResponse
	10, // 25: broker.manager.McpManager.SendMcpMessage:output_type -> broker.manager.SendMcpMessageResponse
	12, // 26: broker.manager.McpManager.StreamMcpMessages:output_type -> broker.manager.StreamMcpMessagesResponse
	19, // 27: broker.manager.McpManager.GetServerInfo:output_type -> broker.mcp.McpParticipant
	18, // 28: broker.manager.McpManager.DiscardSession:output_type -> broker.manager.DiscardSessionResponse
	27, // 29: broker.manager.McpManager.ListManagers:output_type -> broker.workerBroker.ListManagersResponse
	15, // 30: broker.manager.McpManager.ListWorkers:output_type -> broker.manager.ListWorkersResponse
	24, // [24:31] is the sub-list for method output_type
	17, // [17:24] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_manager_proto_init() }
func file_manager_proto_init() {
	if File_manager_proto != nil {
		return
	}
	file_manager_proto_msgTypes[3].OneofWrappers = []any{
		(*SessionConfig_RunConfigWithLauncher)(nil),
		(*SessionConfig_RunConfigWithContainerArguments)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_manager_proto_rawDesc), len(file_manager_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_manager_proto_goTypes,
		DependencyIndexes: file_manager_proto_depIdxs,
		EnumInfos:         file_manager_proto_enumTypes,
		MessageInfos:      file_manager_proto_msgTypes,
	}.Build()
	File_manager_proto = out.File
	file_manager_proto_goTypes = nil
	file_manager_proto_depIdxs = nil
}
