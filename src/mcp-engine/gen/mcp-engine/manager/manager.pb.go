// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: manager.proto

package manager

import (
	launcher "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/launcher"
	mcp "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/mcp"
	runner "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/runner"
	workerBroker "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/workerBroker"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateSessionRequest_SessionType int32

const (
	CreateSessionRequest_runner CreateSessionRequest_SessionType = 0
)

// Enum value maps for CreateSessionRequest_SessionType.
var (
	CreateSessionRequest_SessionType_name = map[int32]string{
		0: "runner",
	}
	CreateSessionRequest_SessionType_value = map[string]int32{
		"runner": 0,
	}
)

func (x CreateSessionRequest_SessionType) Enum() *CreateSessionRequest_SessionType {
	p := new(CreateSessionRequest_SessionType)
	*p = x
	return p
}

func (x CreateSessionRequest_SessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateSessionRequest_SessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[0].Descriptor()
}

func (CreateSessionRequest_SessionType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[0]
}

func (x CreateSessionRequest_SessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateSessionRequest_SessionType.Descriptor instead.
func (CreateSessionRequest_SessionType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0, 0}
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	SessionId     string                           `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type          CreateSessionRequest_SessionType `protobuf:"varint,2,opt,name=type,proto3,enum=broker.manager.CreateSessionRequest_SessionType" json:"type,omitempty"`
	Config        *SessionConfig                   `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	McpClient     *mcp.McpParticipant              `protobuf:"bytes,4,opt,name=mcp_client,json=mcpClient,proto3" json:"mcp_client,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionRequest) GetType() CreateSessionRequest_SessionType {
	if x != nil {
		return x.Type
	}
	return CreateSessionRequest_runner
}

func (x *CreateSessionRequest) GetConfig() *SessionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateSessionRequest) GetMcpClient() *mcp.McpParticipant {
	if x != nil {
		return x.McpClient
	}
	return nil
}

type RunConfigWithLauncher struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Container     *runner.RunConfigContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Launcher      *launcher.LauncherConfig   `protobuf:"bytes,2,opt,name=launcher,proto3" json:"launcher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunConfigWithLauncher) Reset() {
	*x = RunConfigWithLauncher{}
	mi := &file_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunConfigWithLauncher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunConfigWithLauncher) ProtoMessage() {}

func (x *RunConfigWithLauncher) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunConfigWithLauncher.ProtoReflect.Descriptor instead.
func (*RunConfigWithLauncher) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1}
}

func (x *RunConfigWithLauncher) GetContainer() *runner.RunConfigContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *RunConfigWithLauncher) GetLauncher() *launcher.LauncherConfig {
	if x != nil {
		return x.Launcher
	}
	return nil
}

type SessionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ConfigType:
	//
	//	*SessionConfig_RunConfigWithLauncher
	//	*SessionConfig_RunConfigWithContainerArguments
	ConfigType    isSessionConfig_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionConfig) Reset() {
	*x = SessionConfig{}
	mi := &file_manager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionConfig) ProtoMessage() {}

func (x *SessionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionConfig.ProtoReflect.Descriptor instead.
func (*SessionConfig) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{2}
}

func (x *SessionConfig) GetConfigType() isSessionConfig_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *SessionConfig) GetRunConfigWithLauncher() *RunConfigWithLauncher {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_RunConfigWithLauncher); ok {
			return x.RunConfigWithLauncher
		}
	}
	return nil
}

func (x *SessionConfig) GetRunConfigWithContainerArguments() *runner.RunConfig {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_RunConfigWithContainerArguments); ok {
			return x.RunConfigWithContainerArguments
		}
	}
	return nil
}

type isSessionConfig_ConfigType interface {
	isSessionConfig_ConfigType()
}

type SessionConfig_RunConfigWithLauncher struct {
	RunConfigWithLauncher *RunConfigWithLauncher `protobuf:"bytes,1,opt,name=run_config_with_launcher,json=runConfigWithLauncher,proto3,oneof"`
}

type SessionConfig_RunConfigWithContainerArguments struct {
	RunConfigWithContainerArguments *runner.RunConfig `protobuf:"bytes,2,opt,name=run_config_with_container_arguments,json=runConfigWithContainerArguments,proto3,oneof"`
}

func (*SessionConfig_RunConfigWithLauncher) isSessionConfig_ConfigType() {}

func (*SessionConfig_RunConfigWithContainerArguments) isSessionConfig_ConfigType() {}

type CreateSessionResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	SessionId         string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	InternalSessionId string                 `protobuf:"bytes,2,opt,name=internal_session_id,json=internalSessionId,proto3" json:"internal_session_id,omitempty"` // Internal ID used by the MCP Engine
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_manager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{3}
}

func (x *CreateSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionResponse) GetInternalSessionId() string {
	if x != nil {
		return x.InternalSessionId
	}
	return ""
}

type SendMcpMessageRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionId        string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	McpMessages      []*mcp.McpMessageRaw   `protobuf:"bytes,2,rep,name=mcp_messages,json=mcpMessages,proto3" json:"mcp_messages,omitempty"`
	IncludeResponses bool                   `protobuf:"varint,3,opt,name=include_responses,json=includeResponses,proto3" json:"include_responses,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SendMcpMessageRequest) Reset() {
	*x = SendMcpMessageRequest{}
	mi := &file_manager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMcpMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMcpMessageRequest) ProtoMessage() {}

func (x *SendMcpMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMcpMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMcpMessageRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{4}
}

func (x *SendMcpMessageRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendMcpMessageRequest) GetMcpMessages() []*mcp.McpMessageRaw {
	if x != nil {
		return x.McpMessages
	}
	return nil
}

func (x *SendMcpMessageRequest) GetIncludeResponses() bool {
	if x != nil {
		return x.IncludeResponses
	}
	return false
}

type SendMcpMessageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SendMcpMessageResponse_McpMessage
	//	*SendMcpMessageResponse_McpError
	//	*SendMcpMessageResponse_SessionEvent
	Response      isSendMcpMessageResponse_Response `protobuf_oneof:"response"`
	IsReplay      bool                              `protobuf:"varint,10,opt,name=isReplay,proto3" json:"isReplay,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMcpMessageResponse) Reset() {
	*x = SendMcpMessageResponse{}
	mi := &file_manager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMcpMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMcpMessageResponse) ProtoMessage() {}

func (x *SendMcpMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMcpMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMcpMessageResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{5}
}

func (x *SendMcpMessageResponse) GetResponse() isSendMcpMessageResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SendMcpMessageResponse) GetMcpMessage() *mcp.McpMessage {
	if x != nil {
		if x, ok := x.Response.(*SendMcpMessageResponse_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *SendMcpMessageResponse) GetMcpError() *mcp.McpError {
	if x != nil {
		if x, ok := x.Response.(*SendMcpMessageResponse_McpError); ok {
			return x.McpError
		}
	}
	return nil
}

func (x *SendMcpMessageResponse) GetSessionEvent() *SessionEvent {
	if x != nil {
		if x, ok := x.Response.(*SendMcpMessageResponse_SessionEvent); ok {
			return x.SessionEvent
		}
	}
	return nil
}

func (x *SendMcpMessageResponse) GetIsReplay() bool {
	if x != nil {
		return x.IsReplay
	}
	return false
}

type isSendMcpMessageResponse_Response interface {
	isSendMcpMessageResponse_Response()
}

type SendMcpMessageResponse_McpMessage struct {
	McpMessage *mcp.McpMessage `protobuf:"bytes,1,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type SendMcpMessageResponse_McpError struct {
	McpError *mcp.McpError `protobuf:"bytes,2,opt,name=mcp_error,json=mcpError,proto3,oneof"`
}

type SendMcpMessageResponse_SessionEvent struct {
	SessionEvent *SessionEvent `protobuf:"bytes,3,opt,name=session_event,json=sessionEvent,proto3,oneof"`
}

func (*SendMcpMessageResponse_McpMessage) isSendMcpMessageResponse_Response() {}

func (*SendMcpMessageResponse_McpError) isSendMcpMessageResponse_Response() {}

func (*SendMcpMessageResponse_SessionEvent) isSendMcpMessageResponse_Response() {}

type StreamMcpMessagesRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionId        string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OnlyMessageTypes []mcp.McpMessageType   `protobuf:"varint,2,rep,packed,name=only_message_types,json=onlyMessageTypes,proto3,enum=broker.mcp.McpMessageType" json:"only_message_types,omitempty"` // Optional, if empty, all message types are streamed
	OnlyIds          []string               `protobuf:"bytes,3,rep,name=only_ids,json=onlyIds,proto3" json:"only_ids,omitempty"`                                                                     // Optional, if empty, all messages are streamed
	ReplayAfterUuid  string                 `protobuf:"bytes,4,opt,name=replay_after_uuid,json=replayAfterUuid,proto3" json:"replay_after_uuid,omitempty"`                                           // Include messages after this UUID, useful for resuming streams
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StreamMcpMessagesRequest) Reset() {
	*x = StreamMcpMessagesRequest{}
	mi := &file_manager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMcpMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMcpMessagesRequest) ProtoMessage() {}

func (x *StreamMcpMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMcpMessagesRequest.ProtoReflect.Descriptor instead.
func (*StreamMcpMessagesRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{6}
}

func (x *StreamMcpMessagesRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamMcpMessagesRequest) GetOnlyMessageTypes() []mcp.McpMessageType {
	if x != nil {
		return x.OnlyMessageTypes
	}
	return nil
}

func (x *StreamMcpMessagesRequest) GetOnlyIds() []string {
	if x != nil {
		return x.OnlyIds
	}
	return nil
}

func (x *StreamMcpMessagesRequest) GetReplayAfterUuid() string {
	if x != nil {
		return x.ReplayAfterUuid
	}
	return ""
}

type SessionEventStartConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEventStartConnection) Reset() {
	*x = SessionEventStartConnection{}
	mi := &file_manager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEventStartConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEventStartConnection) ProtoMessage() {}

func (x *SessionEventStartConnection) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEventStartConnection.ProtoReflect.Descriptor instead.
func (*SessionEventStartConnection) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{7}
}

func (x *SessionEventStartConnection) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type SessionEventStopConnection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConnectionId  string                 `protobuf:"bytes,1,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEventStopConnection) Reset() {
	*x = SessionEventStopConnection{}
	mi := &file_manager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEventStopConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEventStopConnection) ProtoMessage() {}

func (x *SessionEventStopConnection) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEventStopConnection.ProtoReflect.Descriptor instead.
func (*SessionEventStopConnection) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{8}
}

func (x *SessionEventStopConnection) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type SessionEventSessionDiscarded struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEventSessionDiscarded) Reset() {
	*x = SessionEventSessionDiscarded{}
	mi := &file_manager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEventSessionDiscarded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEventSessionDiscarded) ProtoMessage() {}

func (x *SessionEventSessionDiscarded) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEventSessionDiscarded.ProtoReflect.Descriptor instead.
func (*SessionEventSessionDiscarded) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{9}
}

type SessionEventSessionStopped struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEventSessionStopped) Reset() {
	*x = SessionEventSessionStopped{}
	mi := &file_manager_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEventSessionStopped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEventSessionStopped) ProtoMessage() {}

func (x *SessionEventSessionStopped) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEventSessionStopped.ProtoReflect.Descriptor instead.
func (*SessionEventSessionStopped) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{10}
}

type SessionEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*SessionEvent_StartConnection
	//	*SessionEvent_StopConnection
	//	*SessionEvent_SessionDiscarded
	//	*SessionEvent_SessionStopped
	Event         isSessionEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEvent) Reset() {
	*x = SessionEvent{}
	mi := &file_manager_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEvent) ProtoMessage() {}

func (x *SessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEvent.ProtoReflect.Descriptor instead.
func (*SessionEvent) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{11}
}

func (x *SessionEvent) GetEvent() isSessionEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *SessionEvent) GetStartConnection() *SessionEventStartConnection {
	if x != nil {
		if x, ok := x.Event.(*SessionEvent_StartConnection); ok {
			return x.StartConnection
		}
	}
	return nil
}

func (x *SessionEvent) GetStopConnection() *SessionEventStopConnection {
	if x != nil {
		if x, ok := x.Event.(*SessionEvent_StopConnection); ok {
			return x.StopConnection
		}
	}
	return nil
}

func (x *SessionEvent) GetSessionDiscarded() *SessionEventSessionDiscarded {
	if x != nil {
		if x, ok := x.Event.(*SessionEvent_SessionDiscarded); ok {
			return x.SessionDiscarded
		}
	}
	return nil
}

func (x *SessionEvent) GetSessionStopped() *SessionEventSessionStopped {
	if x != nil {
		if x, ok := x.Event.(*SessionEvent_SessionStopped); ok {
			return x.SessionStopped
		}
	}
	return nil
}

type isSessionEvent_Event interface {
	isSessionEvent_Event()
}

type SessionEvent_StartConnection struct {
	StartConnection *SessionEventStartConnection `protobuf:"bytes,1,opt,name=start_connection,json=startConnection,proto3,oneof"`
}

type SessionEvent_StopConnection struct {
	StopConnection *SessionEventStopConnection `protobuf:"bytes,2,opt,name=stop_connection,json=stopConnection,proto3,oneof"`
}

type SessionEvent_SessionDiscarded struct {
	SessionDiscarded *SessionEventSessionDiscarded `protobuf:"bytes,3,opt,name=session_discarded,json=sessionDiscarded,proto3,oneof"`
}

type SessionEvent_SessionStopped struct {
	SessionStopped *SessionEventSessionStopped `protobuf:"bytes,4,opt,name=session_stopped,json=sessionStopped,proto3,oneof"`
}

func (*SessionEvent_StartConnection) isSessionEvent_Event() {}

func (*SessionEvent_StopConnection) isSessionEvent_Event() {}

func (*SessionEvent_SessionDiscarded) isSessionEvent_Event() {}

func (*SessionEvent_SessionStopped) isSessionEvent_Event() {}

type StreamMcpMessagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*StreamMcpMessagesResponse_McpMessage
	//	*StreamMcpMessagesResponse_McpError
	//	*StreamMcpMessagesResponse_McpOutput
	//	*StreamMcpMessagesResponse_SessionEvent
	Response      isStreamMcpMessagesResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMcpMessagesResponse) Reset() {
	*x = StreamMcpMessagesResponse{}
	mi := &file_manager_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMcpMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMcpMessagesResponse) ProtoMessage() {}

func (x *StreamMcpMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMcpMessagesResponse.ProtoReflect.Descriptor instead.
func (*StreamMcpMessagesResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{12}
}

func (x *StreamMcpMessagesResponse) GetResponse() isStreamMcpMessagesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetMcpMessage() *mcp.McpMessage {
	if x != nil {
		if x, ok := x.Response.(*StreamMcpMessagesResponse_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetMcpError() *mcp.McpError {
	if x != nil {
		if x, ok := x.Response.(*StreamMcpMessagesResponse_McpError); ok {
			return x.McpError
		}
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetMcpOutput() *mcp.McpOutput {
	if x != nil {
		if x, ok := x.Response.(*StreamMcpMessagesResponse_McpOutput); ok {
			return x.McpOutput
		}
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetSessionEvent() *SessionEvent {
	if x != nil {
		if x, ok := x.Response.(*StreamMcpMessagesResponse_SessionEvent); ok {
			return x.SessionEvent
		}
	}
	return nil
}

type isStreamMcpMessagesResponse_Response interface {
	isStreamMcpMessagesResponse_Response()
}

type StreamMcpMessagesResponse_McpMessage struct {
	McpMessage *mcp.McpMessage `protobuf:"bytes,1,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type StreamMcpMessagesResponse_McpError struct {
	McpError *mcp.McpError `protobuf:"bytes,2,opt,name=mcp_error,json=mcpError,proto3,oneof"`
}

type StreamMcpMessagesResponse_McpOutput struct {
	McpOutput *mcp.McpOutput `protobuf:"bytes,3,opt,name=mcp_output,json=mcpOutput,proto3,oneof"`
}

type StreamMcpMessagesResponse_SessionEvent struct {
	SessionEvent *SessionEvent `protobuf:"bytes,4,opt,name=session_event,json=sessionEvent,proto3,oneof"`
}

func (*StreamMcpMessagesResponse_McpMessage) isStreamMcpMessagesResponse_Response() {}

func (*StreamMcpMessagesResponse_McpError) isStreamMcpMessagesResponse_Response() {}

func (*StreamMcpMessagesResponse_McpOutput) isStreamMcpMessagesResponse_Response() {}

func (*StreamMcpMessagesResponse_SessionEvent) isStreamMcpMessagesResponse_Response() {}

type GetServerInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServerInfoRequest) Reset() {
	*x = GetServerInfoRequest{}
	mi := &file_manager_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerInfoRequest) ProtoMessage() {}

func (x *GetServerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerInfoRequest.ProtoReflect.Descriptor instead.
func (*GetServerInfoRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{13}
}

func (x *GetServerInfoRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ListWorkersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkersRequest) Reset() {
	*x = ListWorkersRequest{}
	mi := &file_manager_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersRequest) ProtoMessage() {}

func (x *ListWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersRequest.ProtoReflect.Descriptor instead.
func (*ListWorkersRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{14}
}

type ListWorkersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workers       []*WorkerInfo          `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkersResponse) Reset() {
	*x = ListWorkersResponse{}
	mi := &file_manager_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersResponse) ProtoMessage() {}

func (x *ListWorkersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersResponse.ProtoReflect.Descriptor instead.
func (*ListWorkersResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{15}
}

func (x *ListWorkersResponse) GetWorkers() []*WorkerInfo {
	if x != nil {
		return x.Workers
	}
	return nil
}

type WorkerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	AcceptingRuns bool                   `protobuf:"varint,3,opt,name=accepting_runs,json=acceptingRuns,proto3" json:"accepting_runs,omitempty"`
	Healthy       bool                   `protobuf:"varint,4,opt,name=healthy,proto3" json:"healthy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	mi := &file_manager_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{16}
}

func (x *WorkerInfo) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WorkerInfo) GetAcceptingRuns() bool {
	if x != nil {
		return x.AcceptingRuns
	}
	return false
}

func (x *WorkerInfo) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

type DiscardSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscardSessionRequest) Reset() {
	*x = DiscardSessionRequest{}
	mi := &file_manager_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscardSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardSessionRequest) ProtoMessage() {}

func (x *DiscardSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardSessionRequest.ProtoReflect.Descriptor instead.
func (*DiscardSessionRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{17}
}

func (x *DiscardSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type DiscardSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscardSessionResponse) Reset() {
	*x = DiscardSessionResponse{}
	mi := &file_manager_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscardSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardSessionResponse) ProtoMessage() {}

func (x *DiscardSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardSessionResponse.ProtoReflect.Descriptor instead.
func (*DiscardSessionResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{18}
}

var File_manager_proto protoreflect.FileDescriptor

const file_manager_proto_rawDesc = "" +
	"\n" +
	"\rmanager.proto\x12\x0ebroker.manager\x1a\frunner.proto\x1a\tmcp.proto\x1a\x12workerBroker.proto\x1a\x0elauncher.proto\"\x88\x02\n" +
	"\x14CreateSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12D\n" +
	"\x04type\x18\x02 \x01(\x0e20.broker.manager.CreateSessionRequest.SessionTypeR\x04type\x125\n" +
	"\x06config\x18\x03 \x01(\v2\x1d.broker.manager.SessionConfigR\x06config\x129\n" +
	"\n" +
	"mcp_client\x18\x04 \x01(\v2\x1a.broker.mcp.McpParticipantR\tmcpClient\"\x19\n" +
	"\vSessionType\x12\n" +
	"\n" +
	"\x06runner\x10\x00\"\x95\x01\n" +
	"\x15RunConfigWithLauncher\x12?\n" +
	"\tcontainer\x18\x01 \x01(\v2!.broker.runner.RunConfigContainerR\tcontainer\x12;\n" +
	"\blauncher\x18\x02 \x01(\v2\x1f.broker.launcher.LauncherConfigR\blauncher\"\xea\x01\n" +
	"\rSessionConfig\x12`\n" +
	"\x18run_config_with_launcher\x18\x01 \x01(\v2%.broker.manager.RunConfigWithLauncherH\x00R\x15runConfigWithLauncher\x12h\n" +
	"#run_config_with_container_arguments\x18\x02 \x01(\v2\x18.broker.runner.RunConfigH\x00R\x1frunConfigWithContainerArgumentsB\r\n" +
	"\vconfig_type\"f\n" +
	"\x15CreateSessionResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12.\n" +
	"\x13internal_session_id\x18\x02 \x01(\tR\x11internalSessionId\"\xa1\x01\n" +
	"\x15SendMcpMessageRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12<\n" +
	"\fmcp_messages\x18\x02 \x03(\v2\x19.broker.mcp.McpMessageRawR\vmcpMessages\x12+\n" +
	"\x11include_responses\x18\x03 \x01(\bR\x10includeResponses\"\xf5\x01\n" +
	"\x16SendMcpMessageResponse\x129\n" +
	"\vmcp_message\x18\x01 \x01(\v2\x16.broker.mcp.McpMessageH\x00R\n" +
	"mcpMessage\x123\n" +
	"\tmcp_error\x18\x02 \x01(\v2\x14.broker.mcp.McpErrorH\x00R\bmcpError\x12C\n" +
	"\rsession_event\x18\x03 \x01(\v2\x1c.broker.manager.SessionEventH\x00R\fsessionEvent\x12\x1a\n" +
	"\bisReplay\x18\n" +
	" \x01(\bR\bisReplayB\n" +
	"\n" +
	"\bresponse\"\xca\x01\n" +
	"\x18StreamMcpMessagesRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12H\n" +
	"\x12only_message_types\x18\x02 \x03(\x0e2\x1a.broker.mcp.McpMessageTypeR\x10onlyMessageTypes\x12\x19\n" +
	"\bonly_ids\x18\x03 \x03(\tR\aonlyIds\x12*\n" +
	"\x11replay_after_uuid\x18\x04 \x01(\tR\x0freplayAfterUuid\"B\n" +
	"\x1bSessionEventStartConnection\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\"A\n" +
	"\x1aSessionEventStopConnection\x12#\n" +
	"\rconnection_id\x18\x01 \x01(\tR\fconnectionId\"\x1e\n" +
	"\x1cSessionEventSessionDiscarded\"\x1c\n" +
	"\x1aSessionEventSessionStopped\"\xfc\x02\n" +
	"\fSessionEvent\x12X\n" +
	"\x10start_connection\x18\x01 \x01(\v2+.broker.manager.SessionEventStartConnectionH\x00R\x0fstartConnection\x12U\n" +
	"\x0fstop_connection\x18\x02 \x01(\v2*.broker.manager.SessionEventStopConnectionH\x00R\x0estopConnection\x12[\n" +
	"\x11session_discarded\x18\x03 \x01(\v2,.broker.manager.SessionEventSessionDiscardedH\x00R\x10sessionDiscarded\x12U\n" +
	"\x0fsession_stopped\x18\x04 \x01(\v2*.broker.manager.SessionEventSessionStoppedH\x00R\x0esessionStoppedB\a\n" +
	"\x05event\"\x94\x02\n" +
	"\x19StreamMcpMessagesResponse\x129\n" +
	"\vmcp_message\x18\x01 \x01(\v2\x16.broker.mcp.McpMessageH\x00R\n" +
	"mcpMessage\x123\n" +
	"\tmcp_error\x18\x02 \x01(\v2\x14.broker.mcp.McpErrorH\x00R\bmcpError\x126\n" +
	"\n" +
	"mcp_output\x18\x03 \x01(\v2\x15.broker.mcp.McpOutputH\x00R\tmcpOutput\x12C\n" +
	"\rsession_event\x18\x04 \x01(\v2\x1c.broker.manager.SessionEventH\x00R\fsessionEventB\n" +
	"\n" +
	"\bresponse\"5\n" +
	"\x14GetServerInfoRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"\x14\n" +
	"\x12ListWorkersRequest\"K\n" +
	"\x13ListWorkersResponse\x124\n" +
	"\aworkers\x18\x01 \x03(\v2\x1a.broker.manager.WorkerInfoR\aworkers\"\x84\x01\n" +
	"\n" +
	"WorkerInfo\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12%\n" +
	"\x0eaccepting_runs\x18\x03 \x01(\bR\racceptingRuns\x12\x18\n" +
	"\ahealthy\x18\x04 \x01(\bR\ahealthy\"6\n" +
	"\x15DiscardSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"\x18\n" +
	"\x16DiscardSessionResponse2\xaa\x05\n" +
	"\n" +
	"McpManager\x12\\\n" +
	"\rCreateSession\x12$.broker.manager.CreateSessionRequest\x1a%.broker.manager.CreateSessionResponse\x12a\n" +
	"\x0eSendMcpMessage\x12%.broker.manager.SendMcpMessageRequest\x1a&.broker.manager.SendMcpMessageResponse0\x01\x12j\n" +
	"\x11StreamMcpMessages\x12(.broker.manager.StreamMcpMessagesRequest\x1a).broker.manager.StreamMcpMessagesResponse0\x01\x12Q\n" +
	"\rGetServerInfo\x12$.broker.manager.GetServerInfoRequest\x1a\x1a.broker.mcp.McpParticipant\x12_\n" +
	"\x0eDiscardSession\x12%.broker.manager.DiscardSessionRequest\x1a&.broker.manager.DiscardSessionResponse\x12c\n" +
	"\fListManagers\x12(.broker.workerBroker.ListManagersRequest\x1a).broker.workerBroker.ListManagersResponse\x12V\n" +
	"\vListWorkers\x12\".broker.manager.ListWorkersRequest\x1a#.broker.manager.ListWorkersResponseBHZFgithub.com/metorial/metorial/mcp-engine/gen/mcp-engine/manager;managerb\x06proto3"

var (
	file_manager_proto_rawDescOnce sync.Once
	file_manager_proto_rawDescData []byte
)

func file_manager_proto_rawDescGZIP() []byte {
	file_manager_proto_rawDescOnce.Do(func() {
		file_manager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_manager_proto_rawDesc), len(file_manager_proto_rawDesc)))
	})
	return file_manager_proto_rawDescData
}

var file_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_manager_proto_goTypes = []any{
	(CreateSessionRequest_SessionType)(0),     // 0: broker.manager.CreateSessionRequest.SessionType
	(*CreateSessionRequest)(nil),              // 1: broker.manager.CreateSessionRequest
	(*RunConfigWithLauncher)(nil),             // 2: broker.manager.RunConfigWithLauncher
	(*SessionConfig)(nil),                     // 3: broker.manager.SessionConfig
	(*CreateSessionResponse)(nil),             // 4: broker.manager.CreateSessionResponse
	(*SendMcpMessageRequest)(nil),             // 5: broker.manager.SendMcpMessageRequest
	(*SendMcpMessageResponse)(nil),            // 6: broker.manager.SendMcpMessageResponse
	(*StreamMcpMessagesRequest)(nil),          // 7: broker.manager.StreamMcpMessagesRequest
	(*SessionEventStartConnection)(nil),       // 8: broker.manager.SessionEventStartConnection
	(*SessionEventStopConnection)(nil),        // 9: broker.manager.SessionEventStopConnection
	(*SessionEventSessionDiscarded)(nil),      // 10: broker.manager.SessionEventSessionDiscarded
	(*SessionEventSessionStopped)(nil),        // 11: broker.manager.SessionEventSessionStopped
	(*SessionEvent)(nil),                      // 12: broker.manager.SessionEvent
	(*StreamMcpMessagesResponse)(nil),         // 13: broker.manager.StreamMcpMessagesResponse
	(*GetServerInfoRequest)(nil),              // 14: broker.manager.GetServerInfoRequest
	(*ListWorkersRequest)(nil),                // 15: broker.manager.ListWorkersRequest
	(*ListWorkersResponse)(nil),               // 16: broker.manager.ListWorkersResponse
	(*WorkerInfo)(nil),                        // 17: broker.manager.WorkerInfo
	(*DiscardSessionRequest)(nil),             // 18: broker.manager.DiscardSessionRequest
	(*DiscardSessionResponse)(nil),            // 19: broker.manager.DiscardSessionResponse
	(*mcp.McpParticipant)(nil),                // 20: broker.mcp.McpParticipant
	(*runner.RunConfigContainer)(nil),         // 21: broker.runner.RunConfigContainer
	(*launcher.LauncherConfig)(nil),           // 22: broker.launcher.LauncherConfig
	(*runner.RunConfig)(nil),                  // 23: broker.runner.RunConfig
	(*mcp.McpMessageRaw)(nil),                 // 24: broker.mcp.McpMessageRaw
	(*mcp.McpMessage)(nil),                    // 25: broker.mcp.McpMessage
	(*mcp.McpError)(nil),                      // 26: broker.mcp.McpError
	(mcp.McpMessageType)(0),                   // 27: broker.mcp.McpMessageType
	(*mcp.McpOutput)(nil),                     // 28: broker.mcp.McpOutput
	(*workerBroker.ListManagersRequest)(nil),  // 29: broker.workerBroker.ListManagersRequest
	(*workerBroker.ListManagersResponse)(nil), // 30: broker.workerBroker.ListManagersResponse
}
var file_manager_proto_depIdxs = []int32{
	0,  // 0: broker.manager.CreateSessionRequest.type:type_name -> broker.manager.CreateSessionRequest.SessionType
	3,  // 1: broker.manager.CreateSessionRequest.config:type_name -> broker.manager.SessionConfig
	20, // 2: broker.manager.CreateSessionRequest.mcp_client:type_name -> broker.mcp.McpParticipant
	21, // 3: broker.manager.RunConfigWithLauncher.container:type_name -> broker.runner.RunConfigContainer
	22, // 4: broker.manager.RunConfigWithLauncher.launcher:type_name -> broker.launcher.LauncherConfig
	2,  // 5: broker.manager.SessionConfig.run_config_with_launcher:type_name -> broker.manager.RunConfigWithLauncher
	23, // 6: broker.manager.SessionConfig.run_config_with_container_arguments:type_name -> broker.runner.RunConfig
	24, // 7: broker.manager.SendMcpMessageRequest.mcp_messages:type_name -> broker.mcp.McpMessageRaw
	25, // 8: broker.manager.SendMcpMessageResponse.mcp_message:type_name -> broker.mcp.McpMessage
	26, // 9: broker.manager.SendMcpMessageResponse.mcp_error:type_name -> broker.mcp.McpError
	12, // 10: broker.manager.SendMcpMessageResponse.session_event:type_name -> broker.manager.SessionEvent
	27, // 11: broker.manager.StreamMcpMessagesRequest.only_message_types:type_name -> broker.mcp.McpMessageType
	8,  // 12: broker.manager.SessionEvent.start_connection:type_name -> broker.manager.SessionEventStartConnection
	9,  // 13: broker.manager.SessionEvent.stop_connection:type_name -> broker.manager.SessionEventStopConnection
	10, // 14: broker.manager.SessionEvent.session_discarded:type_name -> broker.manager.SessionEventSessionDiscarded
	11, // 15: broker.manager.SessionEvent.session_stopped:type_name -> broker.manager.SessionEventSessionStopped
	25, // 16: broker.manager.StreamMcpMessagesResponse.mcp_message:type_name -> broker.mcp.McpMessage
	26, // 17: broker.manager.StreamMcpMessagesResponse.mcp_error:type_name -> broker.mcp.McpError
	28, // 18: broker.manager.StreamMcpMessagesResponse.mcp_output:type_name -> broker.mcp.McpOutput
	12, // 19: broker.manager.StreamMcpMessagesResponse.session_event:type_name -> broker.manager.SessionEvent
	17, // 20: broker.manager.ListWorkersResponse.workers:type_name -> broker.manager.WorkerInfo
	1,  // 21: broker.manager.McpManager.CreateSession:input_type -> broker.manager.CreateSessionRequest
	5,  // 22: broker.manager.McpManager.SendMcpMessage:input_type -> broker.manager.SendMcpMessageRequest
	7,  // 23: broker.manager.McpManager.StreamMcpMessages:input_type -> broker.manager.StreamMcpMessagesRequest
	14, // 24: broker.manager.McpManager.GetServerInfo:input_type -> broker.manager.GetServerInfoRequest
	18, // 25: broker.manager.McpManager.DiscardSession:input_type -> broker.manager.DiscardSessionRequest
	29, // 26: broker.manager.McpManager.ListManagers:input_type -> broker.workerBroker.ListManagersRequest
	15, // 27: broker.manager.McpManager.ListWorkers:input_type -> broker.manager.ListWorkersRequest
	4,  // 28: broker.manager.McpManager.CreateSession:output_type -> broker.manager.CreateSessionResponse
	6,  // 29: broker.manager.McpManager.SendMcpMessage:output_type -> broker.manager.SendMcpMessageResponse
	13, // 30: broker.manager.McpManager.StreamMcpMessages:output_type -> broker.manager.StreamMcpMessagesResponse
	20, // 31: broker.manager.McpManager.GetServerInfo:output_type -> broker.mcp.McpParticipant
	19, // 32: broker.manager.McpManager.DiscardSession:output_type -> broker.manager.DiscardSessionResponse
	30, // 33: broker.manager.McpManager.ListManagers:output_type -> broker.workerBroker.ListManagersResponse
	16, // 34: broker.manager.McpManager.ListWorkers:output_type -> broker.manager.ListWorkersResponse
	28, // [28:35] is the sub-list for method output_type
	21, // [21:28] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_manager_proto_init() }
func file_manager_proto_init() {
	if File_manager_proto != nil {
		return
	}
	file_manager_proto_msgTypes[2].OneofWrappers = []any{
		(*SessionConfig_RunConfigWithLauncher)(nil),
		(*SessionConfig_RunConfigWithContainerArguments)(nil),
	}
	file_manager_proto_msgTypes[5].OneofWrappers = []any{
		(*SendMcpMessageResponse_McpMessage)(nil),
		(*SendMcpMessageResponse_McpError)(nil),
		(*SendMcpMessageResponse_SessionEvent)(nil),
	}
	file_manager_proto_msgTypes[11].OneofWrappers = []any{
		(*SessionEvent_StartConnection)(nil),
		(*SessionEvent_StopConnection)(nil),
		(*SessionEvent_SessionDiscarded)(nil),
		(*SessionEvent_SessionStopped)(nil),
	}
	file_manager_proto_msgTypes[12].OneofWrappers = []any{
		(*StreamMcpMessagesResponse_McpMessage)(nil),
		(*StreamMcpMessagesResponse_McpError)(nil),
		(*StreamMcpMessagesResponse_McpOutput)(nil),
		(*StreamMcpMessagesResponse_SessionEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_manager_proto_rawDesc), len(file_manager_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_manager_proto_goTypes,
		DependencyIndexes: file_manager_proto_depIdxs,
		EnumInfos:         file_manager_proto_enumTypes,
		MessageInfos:      file_manager_proto_msgTypes,
	}.Build()
	File_manager_proto = out.File
	file_manager_proto_goTypes = nil
	file_manager_proto_depIdxs = nil
}
