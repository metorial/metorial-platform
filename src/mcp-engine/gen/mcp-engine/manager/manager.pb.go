// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.31.1
// source: manager.proto

package manager

import (
	launcher "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/launcher"
	mcp "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/mcp"
	remote "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/remote"
	runner "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/runner"
	workerBroker "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/workerBroker"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EngineSessionStatus int32

const (
	EngineSessionStatus_session_status_active  EngineSessionStatus = 0
	EngineSessionStatus_session_status_closed  EngineSessionStatus = 1
	EngineSessionStatus_session_status_expired EngineSessionStatus = 2
	EngineSessionStatus_session_status_error   EngineSessionStatus = 3
	EngineSessionStatus_session_status_unknown EngineSessionStatus = 4
)

// Enum value maps for EngineSessionStatus.
var (
	EngineSessionStatus_name = map[int32]string{
		0: "session_status_active",
		1: "session_status_closed",
		2: "session_status_expired",
		3: "session_status_error",
		4: "session_status_unknown",
	}
	EngineSessionStatus_value = map[string]int32{
		"session_status_active":  0,
		"session_status_closed":  1,
		"session_status_expired": 2,
		"session_status_error":   3,
		"session_status_unknown": 4,
	}
)

func (x EngineSessionStatus) Enum() *EngineSessionStatus {
	p := new(EngineSessionStatus)
	*p = x
	return p
}

func (x EngineSessionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngineSessionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[0].Descriptor()
}

func (EngineSessionStatus) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[0]
}

func (x EngineSessionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngineSessionStatus.Descriptor instead.
func (EngineSessionStatus) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

type EngineSessionType int32

const (
	EngineSessionType_session_type_unknown EngineSessionType = 0
	EngineSessionType_session_type_runner  EngineSessionType = 1
	EngineSessionType_session_type_remote  EngineSessionType = 2
)

// Enum value maps for EngineSessionType.
var (
	EngineSessionType_name = map[int32]string{
		0: "session_type_unknown",
		1: "session_type_runner",
		2: "session_type_remote",
	}
	EngineSessionType_value = map[string]int32{
		"session_type_unknown": 0,
		"session_type_runner":  1,
		"session_type_remote":  2,
	}
)

func (x EngineSessionType) Enum() *EngineSessionType {
	p := new(EngineSessionType)
	*p = x
	return p
}

func (x EngineSessionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngineSessionType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[1].Descriptor()
}

func (EngineSessionType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[1]
}

func (x EngineSessionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngineSessionType.Descriptor instead.
func (EngineSessionType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1}
}

type EngineRunStatus int32

const (
	EngineRunStatus_run_status_active  EngineRunStatus = 0
	EngineRunStatus_run_status_closed  EngineRunStatus = 1
	EngineRunStatus_run_status_expired EngineRunStatus = 2
	EngineRunStatus_run_status_error   EngineRunStatus = 3
	EngineRunStatus_run_status_unknown EngineRunStatus = 4
)

// Enum value maps for EngineRunStatus.
var (
	EngineRunStatus_name = map[int32]string{
		0: "run_status_active",
		1: "run_status_closed",
		2: "run_status_expired",
		3: "run_status_error",
		4: "run_status_unknown",
	}
	EngineRunStatus_value = map[string]int32{
		"run_status_active":  0,
		"run_status_closed":  1,
		"run_status_expired": 2,
		"run_status_error":   3,
		"run_status_unknown": 4,
	}
)

func (x EngineRunStatus) Enum() *EngineRunStatus {
	p := new(EngineRunStatus)
	*p = x
	return p
}

func (x EngineRunStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngineRunStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[2].Descriptor()
}

func (EngineRunStatus) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[2]
}

func (x EngineRunStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngineRunStatus.Descriptor instead.
func (EngineRunStatus) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{2}
}

type EngineRunType int32

const (
	EngineRunType_run_type_unknown EngineRunType = 0
	EngineRunType_run_type_runner  EngineRunType = 1
	EngineRunType_run_type_remote  EngineRunType = 2
)

// Enum value maps for EngineRunType.
var (
	EngineRunType_name = map[int32]string{
		0: "run_type_unknown",
		1: "run_type_runner",
		2: "run_type_remote",
	}
	EngineRunType_value = map[string]int32{
		"run_type_unknown": 0,
		"run_type_runner":  1,
		"run_type_remote":  2,
	}
)

func (x EngineRunType) Enum() *EngineRunType {
	p := new(EngineRunType)
	*p = x
	return p
}

func (x EngineRunType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngineRunType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[3].Descriptor()
}

func (EngineRunType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[3]
}

func (x EngineRunType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngineRunType.Descriptor instead.
func (EngineRunType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{3}
}

type EngineSessionEventType int32

const (
	EngineSessionEventType_session_event_type_output  EngineSessionEventType = 0
	EngineSessionEventType_session_event_type_error   EngineSessionEventType = 1
	EngineSessionEventType_session_event_type_log     EngineSessionEventType = 2
	EngineSessionEventType_session_event_type_unknown EngineSessionEventType = 3
)

// Enum value maps for EngineSessionEventType.
var (
	EngineSessionEventType_name = map[int32]string{
		0: "session_event_type_output",
		1: "session_event_type_error",
		2: "session_event_type_log",
		3: "session_event_type_unknown",
	}
	EngineSessionEventType_value = map[string]int32{
		"session_event_type_output":  0,
		"session_event_type_error":   1,
		"session_event_type_log":     2,
		"session_event_type_unknown": 3,
	}
)

func (x EngineSessionEventType) Enum() *EngineSessionEventType {
	p := new(EngineSessionEventType)
	*p = x
	return p
}

func (x EngineSessionEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngineSessionEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[4].Descriptor()
}

func (EngineSessionEventType) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[4]
}

func (x EngineSessionEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngineSessionEventType.Descriptor instead.
func (EngineSessionEventType) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{4}
}

type SessionMessageSender int32

const (
	SessionMessageSender_session_message_sender_unknown SessionMessageSender = 0
	SessionMessageSender_session_message_sender_client  SessionMessageSender = 1
	SessionMessageSender_session_message_sender_server  SessionMessageSender = 2
)

// Enum value maps for SessionMessageSender.
var (
	SessionMessageSender_name = map[int32]string{
		0: "session_message_sender_unknown",
		1: "session_message_sender_client",
		2: "session_message_sender_server",
	}
	SessionMessageSender_value = map[string]int32{
		"session_message_sender_unknown": 0,
		"session_message_sender_client":  1,
		"session_message_sender_server":  2,
	}
)

func (x SessionMessageSender) Enum() *SessionMessageSender {
	p := new(SessionMessageSender)
	*p = x
	return p
}

func (x SessionMessageSender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionMessageSender) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[5].Descriptor()
}

func (SessionMessageSender) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[5]
}

func (x SessionMessageSender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionMessageSender.Descriptor instead.
func (SessionMessageSender) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{5}
}

type ListPaginationOrder int32

const (
	ListPaginationOrder_list_cursor_order_asc  ListPaginationOrder = 0
	ListPaginationOrder_list_cursor_order_desc ListPaginationOrder = 1
)

// Enum value maps for ListPaginationOrder.
var (
	ListPaginationOrder_name = map[int32]string{
		0: "list_cursor_order_asc",
		1: "list_cursor_order_desc",
	}
	ListPaginationOrder_value = map[string]int32{
		"list_cursor_order_asc":  0,
		"list_cursor_order_desc": 1,
	}
)

func (x ListPaginationOrder) Enum() *ListPaginationOrder {
	p := new(ListPaginationOrder)
	*p = x
	return p
}

func (x ListPaginationOrder) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListPaginationOrder) Descriptor() protoreflect.EnumDescriptor {
	return file_manager_proto_enumTypes[6].Descriptor()
}

func (ListPaginationOrder) Type() protoreflect.EnumType {
	return &file_manager_proto_enumTypes[6]
}

func (x ListPaginationOrder) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListPaginationOrder.Descriptor instead.
func (ListPaginationOrder) EnumDescriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{6}
}

type CreateSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Config        *SessionConfig         `protobuf:"bytes,3,opt,name=config,proto3" json:"config,omitempty"`
	McpClient     *mcp.McpParticipant    `protobuf:"bytes,4,opt,name=mcp_client,json=mcpClient,proto3" json:"mcp_client,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionRequest) Reset() {
	*x = CreateSessionRequest{}
	mi := &file_manager_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionRequest) ProtoMessage() {}

func (x *CreateSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateSessionRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{0}
}

func (x *CreateSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionRequest) GetConfig() *SessionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateSessionRequest) GetMcpClient() *mcp.McpParticipant {
	if x != nil {
		return x.McpClient
	}
	return nil
}

type ContainerRunConfigWithLauncher struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Container     *runner.RunConfigContainer `protobuf:"bytes,1,opt,name=container,proto3" json:"container,omitempty"`
	Launcher      *launcher.LauncherConfig   `protobuf:"bytes,2,opt,name=launcher,proto3" json:"launcher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ContainerRunConfigWithLauncher) Reset() {
	*x = ContainerRunConfigWithLauncher{}
	mi := &file_manager_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerRunConfigWithLauncher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerRunConfigWithLauncher) ProtoMessage() {}

func (x *ContainerRunConfigWithLauncher) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerRunConfigWithLauncher.ProtoReflect.Descriptor instead.
func (*ContainerRunConfigWithLauncher) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{1}
}

func (x *ContainerRunConfigWithLauncher) GetContainer() *runner.RunConfigContainer {
	if x != nil {
		return x.Container
	}
	return nil
}

func (x *ContainerRunConfigWithLauncher) GetLauncher() *launcher.LauncherConfig {
	if x != nil {
		return x.Launcher
	}
	return nil
}

type RemoteRunConfigWithLauncher struct {
	state         protoimpl.MessageState        `protogen:"open.v1"`
	Server        *remote.RunConfigRemoteServer `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Launcher      *launcher.LauncherConfig      `protobuf:"bytes,2,opt,name=launcher,proto3" json:"launcher,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoteRunConfigWithLauncher) Reset() {
	*x = RemoteRunConfigWithLauncher{}
	mi := &file_manager_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoteRunConfigWithLauncher) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteRunConfigWithLauncher) ProtoMessage() {}

func (x *RemoteRunConfigWithLauncher) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteRunConfigWithLauncher.ProtoReflect.Descriptor instead.
func (*RemoteRunConfigWithLauncher) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{2}
}

func (x *RemoteRunConfigWithLauncher) GetServer() *remote.RunConfigRemoteServer {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *RemoteRunConfigWithLauncher) GetLauncher() *launcher.LauncherConfig {
	if x != nil {
		return x.Launcher
	}
	return nil
}

type SessionConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ConfigType:
	//
	//	*SessionConfig_ContainerRunConfigWithLauncher
	//	*SessionConfig_ContainerRunConfigWithContainerArguments
	//	*SessionConfig_RemoteRunConfigWithLauncher
	//	*SessionConfig_RemoteRunConfigWithServer
	ConfigType    isSessionConfig_ConfigType `protobuf_oneof:"config_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionConfig) Reset() {
	*x = SessionConfig{}
	mi := &file_manager_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionConfig) ProtoMessage() {}

func (x *SessionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionConfig.ProtoReflect.Descriptor instead.
func (*SessionConfig) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{3}
}

func (x *SessionConfig) GetConfigType() isSessionConfig_ConfigType {
	if x != nil {
		return x.ConfigType
	}
	return nil
}

func (x *SessionConfig) GetContainerRunConfigWithLauncher() *ContainerRunConfigWithLauncher {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_ContainerRunConfigWithLauncher); ok {
			return x.ContainerRunConfigWithLauncher
		}
	}
	return nil
}

func (x *SessionConfig) GetContainerRunConfigWithContainerArguments() *runner.RunConfig {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_ContainerRunConfigWithContainerArguments); ok {
			return x.ContainerRunConfigWithContainerArguments
		}
	}
	return nil
}

func (x *SessionConfig) GetRemoteRunConfigWithLauncher() *RemoteRunConfigWithLauncher {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_RemoteRunConfigWithLauncher); ok {
			return x.RemoteRunConfigWithLauncher
		}
	}
	return nil
}

func (x *SessionConfig) GetRemoteRunConfigWithServer() *remote.RunConfig {
	if x != nil {
		if x, ok := x.ConfigType.(*SessionConfig_RemoteRunConfigWithServer); ok {
			return x.RemoteRunConfigWithServer
		}
	}
	return nil
}

type isSessionConfig_ConfigType interface {
	isSessionConfig_ConfigType()
}

type SessionConfig_ContainerRunConfigWithLauncher struct {
	ContainerRunConfigWithLauncher *ContainerRunConfigWithLauncher `protobuf:"bytes,1,opt,name=container_run_config_with_launcher,json=containerRunConfigWithLauncher,proto3,oneof"`
}

type SessionConfig_ContainerRunConfigWithContainerArguments struct {
	ContainerRunConfigWithContainerArguments *runner.RunConfig `protobuf:"bytes,2,opt,name=container_run_config_with_container_arguments,json=containerRunConfigWithContainerArguments,proto3,oneof"`
}

type SessionConfig_RemoteRunConfigWithLauncher struct {
	RemoteRunConfigWithLauncher *RemoteRunConfigWithLauncher `protobuf:"bytes,3,opt,name=remote_run_config_with_launcher,json=remoteRunConfigWithLauncher,proto3,oneof"`
}

type SessionConfig_RemoteRunConfigWithServer struct {
	RemoteRunConfigWithServer *remote.RunConfig `protobuf:"bytes,4,opt,name=remote_run_config_with_server,json=remoteRunConfigWithServer,proto3,oneof"`
}

func (*SessionConfig_ContainerRunConfigWithLauncher) isSessionConfig_ConfigType() {}

func (*SessionConfig_ContainerRunConfigWithContainerArguments) isSessionConfig_ConfigType() {}

func (*SessionConfig_RemoteRunConfigWithLauncher) isSessionConfig_ConfigType() {}

func (*SessionConfig_RemoteRunConfigWithServer) isSessionConfig_ConfigType() {}

type CreateSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateSessionResponse) Reset() {
	*x = CreateSessionResponse{}
	mi := &file_manager_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{4}
}

func (x *CreateSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type SendMcpMessageRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionId        string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	McpMessages      []*mcp.McpMessageRaw   `protobuf:"bytes,2,rep,name=mcp_messages,json=mcpMessages,proto3" json:"mcp_messages,omitempty"`
	IncludeResponses bool                   `protobuf:"varint,3,opt,name=include_responses,json=includeResponses,proto3" json:"include_responses,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *SendMcpMessageRequest) Reset() {
	*x = SendMcpMessageRequest{}
	mi := &file_manager_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMcpMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMcpMessageRequest) ProtoMessage() {}

func (x *SendMcpMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMcpMessageRequest.ProtoReflect.Descriptor instead.
func (*SendMcpMessageRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{5}
}

func (x *SendMcpMessageRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *SendMcpMessageRequest) GetMcpMessages() []*mcp.McpMessageRaw {
	if x != nil {
		return x.McpMessages
	}
	return nil
}

func (x *SendMcpMessageRequest) GetIncludeResponses() bool {
	if x != nil {
		return x.IncludeResponses
	}
	return false
}

type SendMcpMessageResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*SendMcpMessageResponse_McpMessage
	//	*SendMcpMessageResponse_McpError
	//	*SendMcpMessageResponse_SessionEvent
	Response      isSendMcpMessageResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendMcpMessageResponse) Reset() {
	*x = SendMcpMessageResponse{}
	mi := &file_manager_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendMcpMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMcpMessageResponse) ProtoMessage() {}

func (x *SendMcpMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMcpMessageResponse.ProtoReflect.Descriptor instead.
func (*SendMcpMessageResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{6}
}

func (x *SendMcpMessageResponse) GetResponse() isSendMcpMessageResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *SendMcpMessageResponse) GetMcpMessage() *mcp.McpMessage {
	if x != nil {
		if x, ok := x.Response.(*SendMcpMessageResponse_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *SendMcpMessageResponse) GetMcpError() *mcp.McpError {
	if x != nil {
		if x, ok := x.Response.(*SendMcpMessageResponse_McpError); ok {
			return x.McpError
		}
	}
	return nil
}

func (x *SendMcpMessageResponse) GetSessionEvent() *SessionEvent {
	if x != nil {
		if x, ok := x.Response.(*SendMcpMessageResponse_SessionEvent); ok {
			return x.SessionEvent
		}
	}
	return nil
}

type isSendMcpMessageResponse_Response interface {
	isSendMcpMessageResponse_Response()
}

type SendMcpMessageResponse_McpMessage struct {
	McpMessage *mcp.McpMessage `protobuf:"bytes,1,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type SendMcpMessageResponse_McpError struct {
	McpError *mcp.McpError `protobuf:"bytes,2,opt,name=mcp_error,json=mcpError,proto3,oneof"`
}

type SendMcpMessageResponse_SessionEvent struct {
	SessionEvent *SessionEvent `protobuf:"bytes,3,opt,name=session_event,json=sessionEvent,proto3,oneof"`
}

func (*SendMcpMessageResponse_McpMessage) isSendMcpMessageResponse_Response() {}

func (*SendMcpMessageResponse_McpError) isSendMcpMessageResponse_Response() {}

func (*SendMcpMessageResponse_SessionEvent) isSendMcpMessageResponse_Response() {}

type StreamMcpMessagesRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SessionId        string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	OnlyMessageTypes []mcp.McpMessageType   `protobuf:"varint,2,rep,packed,name=only_message_types,json=onlyMessageTypes,proto3,enum=broker.mcp.McpMessageType" json:"only_message_types,omitempty"` // Optional, if empty, all message types are streamed
	OnlyIds          []string               `protobuf:"bytes,3,rep,name=only_ids,json=onlyIds,proto3" json:"only_ids,omitempty"`                                                                     // Optional, if empty, all messages are streamed
	ReplayAfterUuid  string                 `protobuf:"bytes,4,opt,name=replay_after_uuid,json=replayAfterUuid,proto3" json:"replay_after_uuid,omitempty"`                                           // Include messages after this UUID, useful for resuming streams
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *StreamMcpMessagesRequest) Reset() {
	*x = StreamMcpMessagesRequest{}
	mi := &file_manager_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMcpMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMcpMessagesRequest) ProtoMessage() {}

func (x *StreamMcpMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMcpMessagesRequest.ProtoReflect.Descriptor instead.
func (*StreamMcpMessagesRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{7}
}

func (x *StreamMcpMessagesRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *StreamMcpMessagesRequest) GetOnlyMessageTypes() []mcp.McpMessageType {
	if x != nil {
		return x.OnlyMessageTypes
	}
	return nil
}

func (x *StreamMcpMessagesRequest) GetOnlyIds() []string {
	if x != nil {
		return x.OnlyIds
	}
	return nil
}

func (x *StreamMcpMessagesRequest) GetReplayAfterUuid() string {
	if x != nil {
		return x.ReplayAfterUuid
	}
	return ""
}

type SessionEventInfoRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           *EngineSessionRun      `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEventInfoRun) Reset() {
	*x = SessionEventInfoRun{}
	mi := &file_manager_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEventInfoRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEventInfoRun) ProtoMessage() {}

func (x *SessionEventInfoRun) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEventInfoRun.ProtoReflect.Descriptor instead.
func (*SessionEventInfoRun) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{8}
}

func (x *SessionEventInfoRun) GetRun() *EngineSessionRun {
	if x != nil {
		return x.Run
	}
	return nil
}

type SessionEventInfoSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Session       *EngineSession         `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEventInfoSession) Reset() {
	*x = SessionEventInfoSession{}
	mi := &file_manager_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEventInfoSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEventInfoSession) ProtoMessage() {}

func (x *SessionEventInfoSession) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEventInfoSession.ProtoReflect.Descriptor instead.
func (*SessionEventInfoSession) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{9}
}

func (x *SessionEventInfoSession) GetSession() *EngineSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type SessionEventStartRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           *EngineSessionRun      `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEventStartRun) Reset() {
	*x = SessionEventStartRun{}
	mi := &file_manager_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEventStartRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEventStartRun) ProtoMessage() {}

func (x *SessionEventStartRun) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEventStartRun.ProtoReflect.Descriptor instead.
func (*SessionEventStartRun) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{10}
}

func (x *SessionEventStartRun) GetRun() *EngineSessionRun {
	if x != nil {
		return x.Run
	}
	return nil
}

type SessionEventStopRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Run           *EngineSessionRun      `protobuf:"bytes,1,opt,name=run,proto3" json:"run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEventStopRun) Reset() {
	*x = SessionEventStopRun{}
	mi := &file_manager_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEventStopRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEventStopRun) ProtoMessage() {}

func (x *SessionEventStopRun) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEventStopRun.ProtoReflect.Descriptor instead.
func (*SessionEventStopRun) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{11}
}

func (x *SessionEventStopRun) GetRun() *EngineSessionRun {
	if x != nil {
		return x.Run
	}
	return nil
}

type SessionEvent struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Event:
	//
	//	*SessionEvent_StartRun
	//	*SessionEvent_StopRun
	//	*SessionEvent_InfoRun
	//	*SessionEvent_InfoSession
	Event         isSessionEvent_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SessionEvent) Reset() {
	*x = SessionEvent{}
	mi := &file_manager_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEvent) ProtoMessage() {}

func (x *SessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEvent.ProtoReflect.Descriptor instead.
func (*SessionEvent) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{12}
}

func (x *SessionEvent) GetEvent() isSessionEvent_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *SessionEvent) GetStartRun() *SessionEventStartRun {
	if x != nil {
		if x, ok := x.Event.(*SessionEvent_StartRun); ok {
			return x.StartRun
		}
	}
	return nil
}

func (x *SessionEvent) GetStopRun() *SessionEventStopRun {
	if x != nil {
		if x, ok := x.Event.(*SessionEvent_StopRun); ok {
			return x.StopRun
		}
	}
	return nil
}

func (x *SessionEvent) GetInfoRun() *SessionEventInfoRun {
	if x != nil {
		if x, ok := x.Event.(*SessionEvent_InfoRun); ok {
			return x.InfoRun
		}
	}
	return nil
}

func (x *SessionEvent) GetInfoSession() *SessionEventInfoSession {
	if x != nil {
		if x, ok := x.Event.(*SessionEvent_InfoSession); ok {
			return x.InfoSession
		}
	}
	return nil
}

type isSessionEvent_Event interface {
	isSessionEvent_Event()
}

type SessionEvent_StartRun struct {
	StartRun *SessionEventStartRun `protobuf:"bytes,1,opt,name=start_run,json=startRun,proto3,oneof"`
}

type SessionEvent_StopRun struct {
	StopRun *SessionEventStopRun `protobuf:"bytes,2,opt,name=stop_run,json=stopRun,proto3,oneof"`
}

type SessionEvent_InfoRun struct {
	InfoRun *SessionEventInfoRun `protobuf:"bytes,3,opt,name=info_run,json=infoRun,proto3,oneof"`
}

type SessionEvent_InfoSession struct {
	InfoSession *SessionEventInfoSession `protobuf:"bytes,4,opt,name=info_session,json=infoSession,proto3,oneof"`
}

func (*SessionEvent_StartRun) isSessionEvent_Event() {}

func (*SessionEvent_StopRun) isSessionEvent_Event() {}

func (*SessionEvent_InfoRun) isSessionEvent_Event() {}

func (*SessionEvent_InfoSession) isSessionEvent_Event() {}

type StreamMcpMessagesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*StreamMcpMessagesResponse_McpMessage
	//	*StreamMcpMessagesResponse_McpError
	//	*StreamMcpMessagesResponse_McpOutput
	//	*StreamMcpMessagesResponse_SessionEvent
	Response      isStreamMcpMessagesResponse_Response `protobuf_oneof:"response"`
	IsReplay      bool                                 `protobuf:"varint,10,opt,name=isReplay,proto3" json:"isReplay,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMcpMessagesResponse) Reset() {
	*x = StreamMcpMessagesResponse{}
	mi := &file_manager_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMcpMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMcpMessagesResponse) ProtoMessage() {}

func (x *StreamMcpMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMcpMessagesResponse.ProtoReflect.Descriptor instead.
func (*StreamMcpMessagesResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{13}
}

func (x *StreamMcpMessagesResponse) GetResponse() isStreamMcpMessagesResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetMcpMessage() *mcp.McpMessage {
	if x != nil {
		if x, ok := x.Response.(*StreamMcpMessagesResponse_McpMessage); ok {
			return x.McpMessage
		}
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetMcpError() *mcp.McpError {
	if x != nil {
		if x, ok := x.Response.(*StreamMcpMessagesResponse_McpError); ok {
			return x.McpError
		}
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetMcpOutput() *mcp.McpOutput {
	if x != nil {
		if x, ok := x.Response.(*StreamMcpMessagesResponse_McpOutput); ok {
			return x.McpOutput
		}
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetSessionEvent() *SessionEvent {
	if x != nil {
		if x, ok := x.Response.(*StreamMcpMessagesResponse_SessionEvent); ok {
			return x.SessionEvent
		}
	}
	return nil
}

func (x *StreamMcpMessagesResponse) GetIsReplay() bool {
	if x != nil {
		return x.IsReplay
	}
	return false
}

type isStreamMcpMessagesResponse_Response interface {
	isStreamMcpMessagesResponse_Response()
}

type StreamMcpMessagesResponse_McpMessage struct {
	McpMessage *mcp.McpMessage `protobuf:"bytes,1,opt,name=mcp_message,json=mcpMessage,proto3,oneof"`
}

type StreamMcpMessagesResponse_McpError struct {
	McpError *mcp.McpError `protobuf:"bytes,2,opt,name=mcp_error,json=mcpError,proto3,oneof"`
}

type StreamMcpMessagesResponse_McpOutput struct {
	McpOutput *mcp.McpOutput `protobuf:"bytes,3,opt,name=mcp_output,json=mcpOutput,proto3,oneof"`
}

type StreamMcpMessagesResponse_SessionEvent struct {
	SessionEvent *SessionEvent `protobuf:"bytes,4,opt,name=session_event,json=sessionEvent,proto3,oneof"`
}

func (*StreamMcpMessagesResponse_McpMessage) isStreamMcpMessagesResponse_Response() {}

func (*StreamMcpMessagesResponse_McpError) isStreamMcpMessagesResponse_Response() {}

func (*StreamMcpMessagesResponse_McpOutput) isStreamMcpMessagesResponse_Response() {}

func (*StreamMcpMessagesResponse_SessionEvent) isStreamMcpMessagesResponse_Response() {}

type GetServerInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetServerInfoRequest) Reset() {
	*x = GetServerInfoRequest{}
	mi := &file_manager_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerInfoRequest) ProtoMessage() {}

func (x *GetServerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerInfoRequest.ProtoReflect.Descriptor instead.
func (*GetServerInfoRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{14}
}

func (x *GetServerInfoRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type ListWorkersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkersRequest) Reset() {
	*x = ListWorkersRequest{}
	mi := &file_manager_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersRequest) ProtoMessage() {}

func (x *ListWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersRequest.ProtoReflect.Descriptor instead.
func (*ListWorkersRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{15}
}

type ListWorkersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Workers       []*WorkerInfo          `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListWorkersResponse) Reset() {
	*x = ListWorkersResponse{}
	mi := &file_manager_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersResponse) ProtoMessage() {}

func (x *ListWorkersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersResponse.ProtoReflect.Descriptor instead.
func (*ListWorkersResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{16}
}

func (x *ListWorkersResponse) GetWorkers() []*WorkerInfo {
	if x != nil {
		return x.Workers
	}
	return nil
}

type WorkerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WorkerId      string                 `protobuf:"bytes,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	AcceptingRuns bool                   `protobuf:"varint,3,opt,name=accepting_runs,json=acceptingRuns,proto3" json:"accepting_runs,omitempty"`
	Healthy       bool                   `protobuf:"varint,4,opt,name=healthy,proto3" json:"healthy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerInfo) Reset() {
	*x = WorkerInfo{}
	mi := &file_manager_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerInfo) ProtoMessage() {}

func (x *WorkerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerInfo.ProtoReflect.Descriptor instead.
func (*WorkerInfo) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{17}
}

func (x *WorkerInfo) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *WorkerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *WorkerInfo) GetAcceptingRuns() bool {
	if x != nil {
		return x.AcceptingRuns
	}
	return false
}

func (x *WorkerInfo) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

type DiscardSessionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SessionId     string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscardSessionRequest) Reset() {
	*x = DiscardSessionRequest{}
	mi := &file_manager_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscardSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardSessionRequest) ProtoMessage() {}

func (x *DiscardSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardSessionRequest.ProtoReflect.Descriptor instead.
func (*DiscardSessionRequest) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{18}
}

func (x *DiscardSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type DiscardSessionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiscardSessionResponse) Reset() {
	*x = DiscardSessionResponse{}
	mi := &file_manager_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiscardSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscardSessionResponse) ProtoMessage() {}

func (x *DiscardSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscardSessionResponse.ProtoReflect.Descriptor instead.
func (*DiscardSessionResponse) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{19}
}

type EngineSession struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExternalId    string                 `protobuf:"bytes,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Type          EngineSessionType      `protobuf:"varint,3,opt,name=type,proto3,enum=broker.manager.EngineSessionType" json:"type,omitempty"`
	Status        EngineSessionStatus    `protobuf:"varint,4,opt,name=status,proto3,enum=broker.manager.EngineSessionStatus" json:"status,omitempty"`
	HasError      bool                   `protobuf:"varint,12,opt,name=has_error,json=hasError,proto3" json:"has_error,omitempty"`
	McpClient     *mcp.McpParticipant    `protobuf:"bytes,5,opt,name=mcp_client,json=mcpClient,proto3" json:"mcp_client,omitempty"`
	McpServer     *mcp.McpParticipant    `protobuf:"bytes,6,opt,name=mcp_server,json=mcpServer,proto3" json:"mcp_server,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	StartedAt     int64                  `protobuf:"varint,9,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt       int64                  `protobuf:"varint,10,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	LastPingAt    int64                  `protobuf:"varint,11,opt,name=last_ping_at,json=lastPingAt,proto3" json:"last_ping_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EngineSession) Reset() {
	*x = EngineSession{}
	mi := &file_manager_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EngineSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSession) ProtoMessage() {}

func (x *EngineSession) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSession.ProtoReflect.Descriptor instead.
func (*EngineSession) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{20}
}

func (x *EngineSession) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EngineSession) GetExternalId() string {
	if x != nil {
		return x.ExternalId
	}
	return ""
}

func (x *EngineSession) GetType() EngineSessionType {
	if x != nil {
		return x.Type
	}
	return EngineSessionType_session_type_unknown
}

func (x *EngineSession) GetStatus() EngineSessionStatus {
	if x != nil {
		return x.Status
	}
	return EngineSessionStatus_session_status_active
}

func (x *EngineSession) GetHasError() bool {
	if x != nil {
		return x.HasError
	}
	return false
}

func (x *EngineSession) GetMcpClient() *mcp.McpParticipant {
	if x != nil {
		return x.McpClient
	}
	return nil
}

func (x *EngineSession) GetMcpServer() *mcp.McpParticipant {
	if x != nil {
		return x.McpServer
	}
	return nil
}

func (x *EngineSession) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *EngineSession) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *EngineSession) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *EngineSession) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *EngineSession) GetLastPingAt() int64 {
	if x != nil {
		return x.LastPingAt
	}
	return 0
}

type EngineSessionRun struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type          EngineRunType          `protobuf:"varint,3,opt,name=type,proto3,enum=broker.manager.EngineRunType" json:"type,omitempty"`
	Status        EngineRunStatus        `protobuf:"varint,4,opt,name=status,proto3,enum=broker.manager.EngineRunStatus" json:"status,omitempty"`
	HasError      bool                   `protobuf:"varint,5,opt,name=has_error,json=hasError,proto3" json:"has_error,omitempty"`
	WorkerId      string                 `protobuf:"bytes,6,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	CreatedAt     int64                  `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64                  `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	StartedAt     int64                  `protobuf:"varint,9,opt,name=started_at,json=startedAt,proto3" json:"started_at,omitempty"`
	EndedAt       int64                  `protobuf:"varint,10,opt,name=ended_at,json=endedAt,proto3" json:"ended_at,omitempty"`
	LastPingAt    int64                  `protobuf:"varint,11,opt,name=last_ping_at,json=lastPingAt,proto3" json:"last_ping_at,omitempty"`
	Session       *EngineSession         `protobuf:"bytes,12,opt,name=session,proto3" json:"session,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EngineSessionRun) Reset() {
	*x = EngineSessionRun{}
	mi := &file_manager_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EngineSessionRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSessionRun) ProtoMessage() {}

func (x *EngineSessionRun) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSessionRun.ProtoReflect.Descriptor instead.
func (*EngineSessionRun) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{21}
}

func (x *EngineSessionRun) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EngineSessionRun) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EngineSessionRun) GetType() EngineRunType {
	if x != nil {
		return x.Type
	}
	return EngineRunType_run_type_unknown
}

func (x *EngineSessionRun) GetStatus() EngineRunStatus {
	if x != nil {
		return x.Status
	}
	return EngineRunStatus_run_status_active
}

func (x *EngineSessionRun) GetHasError() bool {
	if x != nil {
		return x.HasError
	}
	return false
}

func (x *EngineSessionRun) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *EngineSessionRun) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *EngineSessionRun) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *EngineSessionRun) GetStartedAt() int64 {
	if x != nil {
		return x.StartedAt
	}
	return 0
}

func (x *EngineSessionRun) GetEndedAt() int64 {
	if x != nil {
		return x.EndedAt
	}
	return 0
}

func (x *EngineSessionRun) GetLastPingAt() int64 {
	if x != nil {
		return x.LastPingAt
	}
	return 0
}

func (x *EngineSessionRun) GetSession() *EngineSession {
	if x != nil {
		return x.Session
	}
	return nil
}

type EngineSessionError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RunId         string                 `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Run           *EngineSessionRun      `protobuf:"bytes,4,opt,name=run,proto3" json:"run,omitempty"`
	Session       *EngineSession         `protobuf:"bytes,10,opt,name=session,proto3" json:"session,omitempty"`
	ErrorCode     string                 `protobuf:"bytes,5,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	ErrorMessage  string                 `protobuf:"bytes,6,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	McpError      *mcp.McpError          `protobuf:"bytes,7,opt,name=mcp_error,json=mcpError,proto3" json:"mcp_error,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedAt     int64                  `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EngineSessionError) Reset() {
	*x = EngineSessionError{}
	mi := &file_manager_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EngineSessionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSessionError) ProtoMessage() {}

func (x *EngineSessionError) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSessionError.ProtoReflect.Descriptor instead.
func (*EngineSessionError) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{22}
}

func (x *EngineSessionError) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EngineSessionError) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EngineSessionError) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *EngineSessionError) GetRun() *EngineSessionRun {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *EngineSessionError) GetSession() *EngineSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *EngineSessionError) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *EngineSessionError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *EngineSessionError) GetMcpError() *mcp.McpError {
	if x != nil {
		return x.McpError
	}
	return nil
}

func (x *EngineSessionError) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EngineSessionError) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type EngineSessionEvent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SessionId     string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RunId         string                 `protobuf:"bytes,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	ErrorId       string                 `protobuf:"bytes,4,opt,name=error_id,json=errorId,proto3" json:"error_id,omitempty"`
	Type          EngineSessionEventType `protobuf:"varint,5,opt,name=type,proto3,enum=broker.manager.EngineSessionEventType" json:"type,omitempty"`
	Run           *EngineSessionRun      `protobuf:"bytes,6,opt,name=run,proto3" json:"run,omitempty"`
	Session       *EngineSession         `protobuf:"bytes,7,opt,name=session,proto3" json:"session,omitempty"`
	Error         *EngineSessionError    `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	Content       string                 `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	Lines         []string               `protobuf:"bytes,10,rep,name=lines,proto3" json:"lines,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,11,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedAt     int64                  `protobuf:"varint,12,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EngineSessionEvent) Reset() {
	*x = EngineSessionEvent{}
	mi := &file_manager_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EngineSessionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSessionEvent) ProtoMessage() {}

func (x *EngineSessionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSessionEvent.ProtoReflect.Descriptor instead.
func (*EngineSessionEvent) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{23}
}

func (x *EngineSessionEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EngineSessionEvent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EngineSessionEvent) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *EngineSessionEvent) GetErrorId() string {
	if x != nil {
		return x.ErrorId
	}
	return ""
}

func (x *EngineSessionEvent) GetType() EngineSessionEventType {
	if x != nil {
		return x.Type
	}
	return EngineSessionEventType_session_event_type_output
}

func (x *EngineSessionEvent) GetRun() *EngineSessionRun {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *EngineSessionEvent) GetSession() *EngineSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *EngineSessionEvent) GetError() *EngineSessionError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *EngineSessionEvent) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *EngineSessionEvent) GetLines() []string {
	if x != nil {
		return x.Lines
	}
	return nil
}

func (x *EngineSessionEvent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EngineSessionEvent) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type EngineSessionMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Index         int32                  `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Sender        SessionMessageSender   `protobuf:"varint,3,opt,name=sender,proto3,enum=broker.manager.SessionMessageSender" json:"sender,omitempty"`
	SessionId     string                 `protobuf:"bytes,4,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	RunId         string                 `protobuf:"bytes,5,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	Run           *EngineSessionRun      `protobuf:"bytes,6,opt,name=run,proto3" json:"run,omitempty"`
	Session       *EngineSession         `protobuf:"bytes,7,opt,name=session,proto3" json:"session,omitempty"`
	McpMessage    *mcp.McpMessage        `protobuf:"bytes,8,opt,name=mcp_message,json=mcpMessage,proto3" json:"mcp_message,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedAt     int64                  `protobuf:"varint,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EngineSessionMessage) Reset() {
	*x = EngineSessionMessage{}
	mi := &file_manager_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EngineSessionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineSessionMessage) ProtoMessage() {}

func (x *EngineSessionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineSessionMessage.ProtoReflect.Descriptor instead.
func (*EngineSessionMessage) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{24}
}

func (x *EngineSessionMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EngineSessionMessage) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *EngineSessionMessage) GetSender() SessionMessageSender {
	if x != nil {
		return x.Sender
	}
	return SessionMessageSender_session_message_sender_unknown
}

func (x *EngineSessionMessage) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EngineSessionMessage) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *EngineSessionMessage) GetRun() *EngineSessionRun {
	if x != nil {
		return x.Run
	}
	return nil
}

func (x *EngineSessionMessage) GetSession() *EngineSession {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *EngineSessionMessage) GetMcpMessage() *mcp.McpMessage {
	if x != nil {
		return x.McpMessage
	}
	return nil
}

func (x *EngineSessionMessage) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *EngineSessionMessage) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ListPagination struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AfterId       string                 `protobuf:"bytes,1,opt,name=after_id,json=afterId,proto3" json:"after_id,omitempty"`
	BeforeId      string                 `protobuf:"bytes,2,opt,name=before_id,json=beforeId,proto3" json:"before_id,omitempty"`
	Limit         int32                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Order         ListPaginationOrder    `protobuf:"varint,4,opt,name=order,proto3,enum=broker.manager.ListPaginationOrder" json:"order,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPagination) Reset() {
	*x = ListPagination{}
	mi := &file_manager_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPagination) ProtoMessage() {}

func (x *ListPagination) ProtoReflect() protoreflect.Message {
	mi := &file_manager_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPagination.ProtoReflect.Descriptor instead.
func (*ListPagination) Descriptor() ([]byte, []int) {
	return file_manager_proto_rawDescGZIP(), []int{25}
}

func (x *ListPagination) GetAfterId() string {
	if x != nil {
		return x.AfterId
	}
	return ""
}

func (x *ListPagination) GetBeforeId() string {
	if x != nil {
		return x.BeforeId
	}
	return ""
}

func (x *ListPagination) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListPagination) GetOrder() ListPaginationOrder {
	if x != nil {
		return x.Order
	}
	return ListPaginationOrder_list_cursor_order_asc
}

var File_manager_proto protoreflect.FileDescriptor

const file_manager_proto_rawDesc = "" +
	"\n" +
	"\rmanager.proto\x12\x0ebroker.manager\x1a\frunner.proto\x1a\tmcp.proto\x1a\x12workerBroker.proto\x1a\x0elauncher.proto\x1a\fremote.proto\"\xa7\x01\n" +
	"\x14CreateSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x125\n" +
	"\x06config\x18\x03 \x01(\v2\x1d.broker.manager.SessionConfigR\x06config\x129\n" +
	"\n" +
	"mcp_client\x18\x04 \x01(\v2\x1a.broker.mcp.McpParticipantR\tmcpClient\"\x9e\x01\n" +
	"\x1eContainerRunConfigWithLauncher\x12?\n" +
	"\tcontainer\x18\x01 \x01(\v2!.broker.runner.RunConfigContainerR\tcontainer\x12;\n" +
	"\blauncher\x18\x02 \x01(\v2\x1f.broker.launcher.LauncherConfigR\blauncher\"\x98\x01\n" +
	"\x1bRemoteRunConfigWithLauncher\x12<\n" +
	"\x06server\x18\x01 \x01(\v2$.broker.remote.RunConfigRemoteServerR\x06server\x12;\n" +
	"\blauncher\x18\x02 \x01(\v2\x1f.broker.launcher.LauncherConfigR\blauncher\"\xec\x03\n" +
	"\rSessionConfig\x12|\n" +
	"\"container_run_config_with_launcher\x18\x01 \x01(\v2..broker.manager.ContainerRunConfigWithLauncherH\x00R\x1econtainerRunConfigWithLauncher\x12{\n" +
	"-container_run_config_with_container_arguments\x18\x02 \x01(\v2\x18.broker.runner.RunConfigH\x00R(containerRunConfigWithContainerArguments\x12s\n" +
	"\x1fremote_run_config_with_launcher\x18\x03 \x01(\v2+.broker.manager.RemoteRunConfigWithLauncherH\x00R\x1bremoteRunConfigWithLauncher\x12\\\n" +
	"\x1dremote_run_config_with_server\x18\x04 \x01(\v2\x18.broker.remote.RunConfigH\x00R\x19remoteRunConfigWithServerB\r\n" +
	"\vconfig_type\"6\n" +
	"\x15CreateSessionResponse\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"\xa1\x01\n" +
	"\x15SendMcpMessageRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12<\n" +
	"\fmcp_messages\x18\x02 \x03(\v2\x19.broker.mcp.McpMessageRawR\vmcpMessages\x12+\n" +
	"\x11include_responses\x18\x03 \x01(\bR\x10includeResponses\"\xd9\x01\n" +
	"\x16SendMcpMessageResponse\x129\n" +
	"\vmcp_message\x18\x01 \x01(\v2\x16.broker.mcp.McpMessageH\x00R\n" +
	"mcpMessage\x123\n" +
	"\tmcp_error\x18\x02 \x01(\v2\x14.broker.mcp.McpErrorH\x00R\bmcpError\x12C\n" +
	"\rsession_event\x18\x03 \x01(\v2\x1c.broker.manager.SessionEventH\x00R\fsessionEventB\n" +
	"\n" +
	"\bresponse\"\xca\x01\n" +
	"\x18StreamMcpMessagesRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\x12H\n" +
	"\x12only_message_types\x18\x02 \x03(\x0e2\x1a.broker.mcp.McpMessageTypeR\x10onlyMessageTypes\x12\x19\n" +
	"\bonly_ids\x18\x03 \x03(\tR\aonlyIds\x12*\n" +
	"\x11replay_after_uuid\x18\x04 \x01(\tR\x0freplayAfterUuid\"I\n" +
	"\x13SessionEventInfoRun\x122\n" +
	"\x03run\x18\x01 \x01(\v2 .broker.manager.EngineSessionRunR\x03run\"R\n" +
	"\x17SessionEventInfoSession\x127\n" +
	"\asession\x18\x01 \x01(\v2\x1d.broker.manager.EngineSessionR\asession\"J\n" +
	"\x14SessionEventStartRun\x122\n" +
	"\x03run\x18\x01 \x01(\v2 .broker.manager.EngineSessionRunR\x03run\"I\n" +
	"\x13SessionEventStopRun\x122\n" +
	"\x03run\x18\x01 \x01(\v2 .broker.manager.EngineSessionRunR\x03run\"\xae\x02\n" +
	"\fSessionEvent\x12C\n" +
	"\tstart_run\x18\x01 \x01(\v2$.broker.manager.SessionEventStartRunH\x00R\bstartRun\x12@\n" +
	"\bstop_run\x18\x02 \x01(\v2#.broker.manager.SessionEventStopRunH\x00R\astopRun\x12@\n" +
	"\binfo_run\x18\x03 \x01(\v2#.broker.manager.SessionEventInfoRunH\x00R\ainfoRun\x12L\n" +
	"\finfo_session\x18\x04 \x01(\v2'.broker.manager.SessionEventInfoSessionH\x00R\vinfoSessionB\a\n" +
	"\x05event\"\xb0\x02\n" +
	"\x19StreamMcpMessagesResponse\x129\n" +
	"\vmcp_message\x18\x01 \x01(\v2\x16.broker.mcp.McpMessageH\x00R\n" +
	"mcpMessage\x123\n" +
	"\tmcp_error\x18\x02 \x01(\v2\x14.broker.mcp.McpErrorH\x00R\bmcpError\x126\n" +
	"\n" +
	"mcp_output\x18\x03 \x01(\v2\x15.broker.mcp.McpOutputH\x00R\tmcpOutput\x12C\n" +
	"\rsession_event\x18\x04 \x01(\v2\x1c.broker.manager.SessionEventH\x00R\fsessionEvent\x12\x1a\n" +
	"\bisReplay\x18\n" +
	" \x01(\bR\bisReplayB\n" +
	"\n" +
	"\bresponse\"5\n" +
	"\x14GetServerInfoRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"\x14\n" +
	"\x12ListWorkersRequest\"K\n" +
	"\x13ListWorkersResponse\x124\n" +
	"\aworkers\x18\x01 \x03(\v2\x1a.broker.manager.WorkerInfoR\aworkers\"\x84\x01\n" +
	"\n" +
	"WorkerInfo\x12\x1b\n" +
	"\tworker_id\x18\x01 \x01(\tR\bworkerId\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12%\n" +
	"\x0eaccepting_runs\x18\x03 \x01(\bR\racceptingRuns\x12\x18\n" +
	"\ahealthy\x18\x04 \x01(\bR\ahealthy\"6\n" +
	"\x15DiscardSessionRequest\x12\x1d\n" +
	"\n" +
	"session_id\x18\x01 \x01(\tR\tsessionId\"\x18\n" +
	"\x16DiscardSessionResponse\"\xe1\x03\n" +
	"\rEngineSession\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1f\n" +
	"\vexternal_id\x18\x02 \x01(\tR\n" +
	"externalId\x125\n" +
	"\x04type\x18\x03 \x01(\x0e2!.broker.manager.EngineSessionTypeR\x04type\x12;\n" +
	"\x06status\x18\x04 \x01(\x0e2#.broker.manager.EngineSessionStatusR\x06status\x12\x1b\n" +
	"\thas_error\x18\f \x01(\bR\bhasError\x129\n" +
	"\n" +
	"mcp_client\x18\x05 \x01(\v2\x1a.broker.mcp.McpParticipantR\tmcpClient\x129\n" +
	"\n" +
	"mcp_server\x18\x06 \x01(\v2\x1a.broker.mcp.McpParticipantR\tmcpServer\x12\x1d\n" +
	"\n" +
	"created_at\x18\a \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\b \x01(\x03R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"started_at\x18\t \x01(\x03R\tstartedAt\x12\x19\n" +
	"\bended_at\x18\n" +
	" \x01(\x03R\aendedAt\x12 \n" +
	"\flast_ping_at\x18\v \x01(\x03R\n" +
	"lastPingAt\"\xba\x03\n" +
	"\x10EngineSessionRun\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x121\n" +
	"\x04type\x18\x03 \x01(\x0e2\x1d.broker.manager.EngineRunTypeR\x04type\x127\n" +
	"\x06status\x18\x04 \x01(\x0e2\x1f.broker.manager.EngineRunStatusR\x06status\x12\x1b\n" +
	"\thas_error\x18\x05 \x01(\bR\bhasError\x12\x1b\n" +
	"\tworker_id\x18\x06 \x01(\tR\bworkerId\x12\x1d\n" +
	"\n" +
	"created_at\x18\a \x01(\x03R\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\b \x01(\x03R\tupdatedAt\x12\x1d\n" +
	"\n" +
	"started_at\x18\t \x01(\x03R\tstartedAt\x12\x19\n" +
	"\bended_at\x18\n" +
	" \x01(\x03R\aendedAt\x12 \n" +
	"\flast_ping_at\x18\v \x01(\x03R\n" +
	"lastPingAt\x127\n" +
	"\asession\x18\f \x01(\v2\x1d.broker.manager.EngineSessionR\asession\"\xe8\x03\n" +
	"\x12EngineSessionError\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x15\n" +
	"\x06run_id\x18\x03 \x01(\tR\x05runId\x122\n" +
	"\x03run\x18\x04 \x01(\v2 .broker.manager.EngineSessionRunR\x03run\x127\n" +
	"\asession\x18\n" +
	" \x01(\v2\x1d.broker.manager.EngineSessionR\asession\x12\x1d\n" +
	"\n" +
	"error_code\x18\x05 \x01(\tR\terrorCode\x12#\n" +
	"\rerror_message\x18\x06 \x01(\tR\ferrorMessage\x121\n" +
	"\tmcp_error\x18\a \x01(\v2\x14.broker.mcp.McpErrorR\bmcpError\x12L\n" +
	"\bmetadata\x18\b \x03(\v20.broker.manager.EngineSessionError.MetadataEntryR\bmetadata\x12\x1d\n" +
	"\n" +
	"created_at\x18\t \x01(\x03R\tcreatedAt\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb2\x04\n" +
	"\x12EngineSessionEvent\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x1d\n" +
	"\n" +
	"session_id\x18\x02 \x01(\tR\tsessionId\x12\x15\n" +
	"\x06run_id\x18\x03 \x01(\tR\x05runId\x12\x19\n" +
	"\berror_id\x18\x04 \x01(\tR\aerrorId\x12:\n" +
	"\x04type\x18\x05 \x01(\x0e2&.broker.manager.EngineSessionEventTypeR\x04type\x122\n" +
	"\x03run\x18\x06 \x01(\v2 .broker.manager.EngineSessionRunR\x03run\x127\n" +
	"\asession\x18\a \x01(\v2\x1d.broker.manager.EngineSessionR\asession\x128\n" +
	"\x05error\x18\b \x01(\v2\".broker.manager.EngineSessionErrorR\x05error\x12\x18\n" +
	"\acontent\x18\t \x01(\tR\acontent\x12\x14\n" +
	"\x05lines\x18\n" +
	" \x03(\tR\x05lines\x12L\n" +
	"\bmetadata\x18\v \x03(\v20.broker.manager.EngineSessionEvent.MetadataEntryR\bmetadata\x12\x1d\n" +
	"\n" +
	"created_at\x18\f \x01(\x03R\tcreatedAt\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x82\x04\n" +
	"\x14EngineSessionMessage\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05index\x18\x02 \x01(\x05R\x05index\x12<\n" +
	"\x06sender\x18\x03 \x01(\x0e2$.broker.manager.SessionMessageSenderR\x06sender\x12\x1d\n" +
	"\n" +
	"session_id\x18\x04 \x01(\tR\tsessionId\x12\x15\n" +
	"\x06run_id\x18\x05 \x01(\tR\x05runId\x122\n" +
	"\x03run\x18\x06 \x01(\v2 .broker.manager.EngineSessionRunR\x03run\x127\n" +
	"\asession\x18\a \x01(\v2\x1d.broker.manager.EngineSessionR\asession\x127\n" +
	"\vmcp_message\x18\b \x01(\v2\x16.broker.mcp.McpMessageR\n" +
	"mcpMessage\x12N\n" +
	"\bmetadata\x18\t \x03(\v22.broker.manager.EngineSessionMessage.MetadataEntryR\bmetadata\x12\x1d\n" +
	"\n" +
	"created_at\x18\n" +
	" \x01(\x03R\tcreatedAt\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x99\x01\n" +
	"\x0eListPagination\x12\x19\n" +
	"\bafter_id\x18\x01 \x01(\tR\aafterId\x12\x1b\n" +
	"\tbefore_id\x18\x02 \x01(\tR\bbeforeId\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x05R\x05limit\x129\n" +
	"\x05order\x18\x04 \x01(\x0e2#.broker.manager.ListPaginationOrderR\x05order*\x9d\x01\n" +
	"\x13EngineSessionStatus\x12\x19\n" +
	"\x15session_status_active\x10\x00\x12\x19\n" +
	"\x15session_status_closed\x10\x01\x12\x1a\n" +
	"\x16session_status_expired\x10\x02\x12\x18\n" +
	"\x14session_status_error\x10\x03\x12\x1a\n" +
	"\x16session_status_unknown\x10\x04*_\n" +
	"\x11EngineSessionType\x12\x18\n" +
	"\x14session_type_unknown\x10\x00\x12\x17\n" +
	"\x13session_type_runner\x10\x01\x12\x17\n" +
	"\x13session_type_remote\x10\x02*\x85\x01\n" +
	"\x0fEngineRunStatus\x12\x15\n" +
	"\x11run_status_active\x10\x00\x12\x15\n" +
	"\x11run_status_closed\x10\x01\x12\x16\n" +
	"\x12run_status_expired\x10\x02\x12\x14\n" +
	"\x10run_status_error\x10\x03\x12\x16\n" +
	"\x12run_status_unknown\x10\x04*O\n" +
	"\rEngineRunType\x12\x14\n" +
	"\x10run_type_unknown\x10\x00\x12\x13\n" +
	"\x0frun_type_runner\x10\x01\x12\x13\n" +
	"\x0frun_type_remote\x10\x02*\x91\x01\n" +
	"\x16EngineSessionEventType\x12\x1d\n" +
	"\x19session_event_type_output\x10\x00\x12\x1c\n" +
	"\x18session_event_type_error\x10\x01\x12\x1a\n" +
	"\x16session_event_type_log\x10\x02\x12\x1e\n" +
	"\x1asession_event_type_unknown\x10\x03*\x80\x01\n" +
	"\x14SessionMessageSender\x12\"\n" +
	"\x1esession_message_sender_unknown\x10\x00\x12!\n" +
	"\x1dsession_message_sender_client\x10\x01\x12!\n" +
	"\x1dsession_message_sender_server\x10\x02*L\n" +
	"\x13ListPaginationOrder\x12\x19\n" +
	"\x15list_cursor_order_asc\x10\x00\x12\x1a\n" +
	"\x16list_cursor_order_desc\x10\x012\xaa\x05\n" +
	"\n" +
	"McpManager\x12\\\n" +
	"\rCreateSession\x12$.broker.manager.CreateSessionRequest\x1a%.broker.manager.CreateSessionResponse\x12a\n" +
	"\x0eSendMcpMessage\x12%.broker.manager.SendMcpMessageRequest\x1a&.broker.manager.SendMcpMessageResponse0\x01\x12j\n" +
	"\x11StreamMcpMessages\x12(.broker.manager.StreamMcpMessagesRequest\x1a).broker.manager.StreamMcpMessagesResponse0\x01\x12Q\n" +
	"\rGetServerInfo\x12$.broker.manager.GetServerInfoRequest\x1a\x1a.broker.mcp.McpParticipant\x12_\n" +
	"\x0eDiscardSession\x12%.broker.manager.DiscardSessionRequest\x1a&.broker.manager.DiscardSessionResponse\x12c\n" +
	"\fListManagers\x12(.broker.workerBroker.ListManagersRequest\x1a).broker.workerBroker.ListManagersResponse\x12V\n" +
	"\vListWorkers\x12\".broker.manager.ListWorkersRequest\x1a#.broker.manager.ListWorkersResponseBHZFgithub.com/metorial/metorial/mcp-engine/gen/mcp-engine/manager;managerb\x06proto3"

var (
	file_manager_proto_rawDescOnce sync.Once
	file_manager_proto_rawDescData []byte
)

func file_manager_proto_rawDescGZIP() []byte {
	file_manager_proto_rawDescOnce.Do(func() {
		file_manager_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_manager_proto_rawDesc), len(file_manager_proto_rawDesc)))
	})
	return file_manager_proto_rawDescData
}

var file_manager_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_manager_proto_goTypes = []any{
	(EngineSessionStatus)(0),                  // 0: broker.manager.EngineSessionStatus
	(EngineSessionType)(0),                    // 1: broker.manager.EngineSessionType
	(EngineRunStatus)(0),                      // 2: broker.manager.EngineRunStatus
	(EngineRunType)(0),                        // 3: broker.manager.EngineRunType
	(EngineSessionEventType)(0),               // 4: broker.manager.EngineSessionEventType
	(SessionMessageSender)(0),                 // 5: broker.manager.SessionMessageSender
	(ListPaginationOrder)(0),                  // 6: broker.manager.ListPaginationOrder
	(*CreateSessionRequest)(nil),              // 7: broker.manager.CreateSessionRequest
	(*ContainerRunConfigWithLauncher)(nil),    // 8: broker.manager.ContainerRunConfigWithLauncher
	(*RemoteRunConfigWithLauncher)(nil),       // 9: broker.manager.RemoteRunConfigWithLauncher
	(*SessionConfig)(nil),                     // 10: broker.manager.SessionConfig
	(*CreateSessionResponse)(nil),             // 11: broker.manager.CreateSessionResponse
	(*SendMcpMessageRequest)(nil),             // 12: broker.manager.SendMcpMessageRequest
	(*SendMcpMessageResponse)(nil),            // 13: broker.manager.SendMcpMessageResponse
	(*StreamMcpMessagesRequest)(nil),          // 14: broker.manager.StreamMcpMessagesRequest
	(*SessionEventInfoRun)(nil),               // 15: broker.manager.SessionEventInfoRun
	(*SessionEventInfoSession)(nil),           // 16: broker.manager.SessionEventInfoSession
	(*SessionEventStartRun)(nil),              // 17: broker.manager.SessionEventStartRun
	(*SessionEventStopRun)(nil),               // 18: broker.manager.SessionEventStopRun
	(*SessionEvent)(nil),                      // 19: broker.manager.SessionEvent
	(*StreamMcpMessagesResponse)(nil),         // 20: broker.manager.StreamMcpMessagesResponse
	(*GetServerInfoRequest)(nil),              // 21: broker.manager.GetServerInfoRequest
	(*ListWorkersRequest)(nil),                // 22: broker.manager.ListWorkersRequest
	(*ListWorkersResponse)(nil),               // 23: broker.manager.ListWorkersResponse
	(*WorkerInfo)(nil),                        // 24: broker.manager.WorkerInfo
	(*DiscardSessionRequest)(nil),             // 25: broker.manager.DiscardSessionRequest
	(*DiscardSessionResponse)(nil),            // 26: broker.manager.DiscardSessionResponse
	(*EngineSession)(nil),                     // 27: broker.manager.EngineSession
	(*EngineSessionRun)(nil),                  // 28: broker.manager.EngineSessionRun
	(*EngineSessionError)(nil),                // 29: broker.manager.EngineSessionError
	(*EngineSessionEvent)(nil),                // 30: broker.manager.EngineSessionEvent
	(*EngineSessionMessage)(nil),              // 31: broker.manager.EngineSessionMessage
	(*ListPagination)(nil),                    // 32: broker.manager.ListPagination
	nil,                                       // 33: broker.manager.EngineSessionError.MetadataEntry
	nil,                                       // 34: broker.manager.EngineSessionEvent.MetadataEntry
	nil,                                       // 35: broker.manager.EngineSessionMessage.MetadataEntry
	(*mcp.McpParticipant)(nil),                // 36: broker.mcp.McpParticipant
	(*runner.RunConfigContainer)(nil),         // 37: broker.runner.RunConfigContainer
	(*launcher.LauncherConfig)(nil),           // 38: broker.launcher.LauncherConfig
	(*remote.RunConfigRemoteServer)(nil),      // 39: broker.remote.RunConfigRemoteServer
	(*runner.RunConfig)(nil),                  // 40: broker.runner.RunConfig
	(*remote.RunConfig)(nil),                  // 41: broker.remote.RunConfig
	(*mcp.McpMessageRaw)(nil),                 // 42: broker.mcp.McpMessageRaw
	(*mcp.McpMessage)(nil),                    // 43: broker.mcp.McpMessage
	(*mcp.McpError)(nil),                      // 44: broker.mcp.McpError
	(mcp.McpMessageType)(0),                   // 45: broker.mcp.McpMessageType
	(*mcp.McpOutput)(nil),                     // 46: broker.mcp.McpOutput
	(*workerBroker.ListManagersRequest)(nil),  // 47: broker.workerBroker.ListManagersRequest
	(*workerBroker.ListManagersResponse)(nil), // 48: broker.workerBroker.ListManagersResponse
}
var file_manager_proto_depIdxs = []int32{
	10, // 0: broker.manager.CreateSessionRequest.config:type_name -> broker.manager.SessionConfig
	36, // 1: broker.manager.CreateSessionRequest.mcp_client:type_name -> broker.mcp.McpParticipant
	37, // 2: broker.manager.ContainerRunConfigWithLauncher.container:type_name -> broker.runner.RunConfigContainer
	38, // 3: broker.manager.ContainerRunConfigWithLauncher.launcher:type_name -> broker.launcher.LauncherConfig
	39, // 4: broker.manager.RemoteRunConfigWithLauncher.server:type_name -> broker.remote.RunConfigRemoteServer
	38, // 5: broker.manager.RemoteRunConfigWithLauncher.launcher:type_name -> broker.launcher.LauncherConfig
	8,  // 6: broker.manager.SessionConfig.container_run_config_with_launcher:type_name -> broker.manager.ContainerRunConfigWithLauncher
	40, // 7: broker.manager.SessionConfig.container_run_config_with_container_arguments:type_name -> broker.runner.RunConfig
	9,  // 8: broker.manager.SessionConfig.remote_run_config_with_launcher:type_name -> broker.manager.RemoteRunConfigWithLauncher
	41, // 9: broker.manager.SessionConfig.remote_run_config_with_server:type_name -> broker.remote.RunConfig
	42, // 10: broker.manager.SendMcpMessageRequest.mcp_messages:type_name -> broker.mcp.McpMessageRaw
	43, // 11: broker.manager.SendMcpMessageResponse.mcp_message:type_name -> broker.mcp.McpMessage
	44, // 12: broker.manager.SendMcpMessageResponse.mcp_error:type_name -> broker.mcp.McpError
	19, // 13: broker.manager.SendMcpMessageResponse.session_event:type_name -> broker.manager.SessionEvent
	45, // 14: broker.manager.StreamMcpMessagesRequest.only_message_types:type_name -> broker.mcp.McpMessageType
	28, // 15: broker.manager.SessionEventInfoRun.run:type_name -> broker.manager.EngineSessionRun
	27, // 16: broker.manager.SessionEventInfoSession.session:type_name -> broker.manager.EngineSession
	28, // 17: broker.manager.SessionEventStartRun.run:type_name -> broker.manager.EngineSessionRun
	28, // 18: broker.manager.SessionEventStopRun.run:type_name -> broker.manager.EngineSessionRun
	17, // 19: broker.manager.SessionEvent.start_run:type_name -> broker.manager.SessionEventStartRun
	18, // 20: broker.manager.SessionEvent.stop_run:type_name -> broker.manager.SessionEventStopRun
	15, // 21: broker.manager.SessionEvent.info_run:type_name -> broker.manager.SessionEventInfoRun
	16, // 22: broker.manager.SessionEvent.info_session:type_name -> broker.manager.SessionEventInfoSession
	43, // 23: broker.manager.StreamMcpMessagesResponse.mcp_message:type_name -> broker.mcp.McpMessage
	44, // 24: broker.manager.StreamMcpMessagesResponse.mcp_error:type_name -> broker.mcp.McpError
	46, // 25: broker.manager.StreamMcpMessagesResponse.mcp_output:type_name -> broker.mcp.McpOutput
	19, // 26: broker.manager.StreamMcpMessagesResponse.session_event:type_name -> broker.manager.SessionEvent
	24, // 27: broker.manager.ListWorkersResponse.workers:type_name -> broker.manager.WorkerInfo
	1,  // 28: broker.manager.EngineSession.type:type_name -> broker.manager.EngineSessionType
	0,  // 29: broker.manager.EngineSession.status:type_name -> broker.manager.EngineSessionStatus
	36, // 30: broker.manager.EngineSession.mcp_client:type_name -> broker.mcp.McpParticipant
	36, // 31: broker.manager.EngineSession.mcp_server:type_name -> broker.mcp.McpParticipant
	3,  // 32: broker.manager.EngineSessionRun.type:type_name -> broker.manager.EngineRunType
	2,  // 33: broker.manager.EngineSessionRun.status:type_name -> broker.manager.EngineRunStatus
	27, // 34: broker.manager.EngineSessionRun.session:type_name -> broker.manager.EngineSession
	28, // 35: broker.manager.EngineSessionError.run:type_name -> broker.manager.EngineSessionRun
	27, // 36: broker.manager.EngineSessionError.session:type_name -> broker.manager.EngineSession
	44, // 37: broker.manager.EngineSessionError.mcp_error:type_name -> broker.mcp.McpError
	33, // 38: broker.manager.EngineSessionError.metadata:type_name -> broker.manager.EngineSessionError.MetadataEntry
	4,  // 39: broker.manager.EngineSessionEvent.type:type_name -> broker.manager.EngineSessionEventType
	28, // 40: broker.manager.EngineSessionEvent.run:type_name -> broker.manager.EngineSessionRun
	27, // 41: broker.manager.EngineSessionEvent.session:type_name -> broker.manager.EngineSession
	29, // 42: broker.manager.EngineSessionEvent.error:type_name -> broker.manager.EngineSessionError
	34, // 43: broker.manager.EngineSessionEvent.metadata:type_name -> broker.manager.EngineSessionEvent.MetadataEntry
	5,  // 44: broker.manager.EngineSessionMessage.sender:type_name -> broker.manager.SessionMessageSender
	28, // 45: broker.manager.EngineSessionMessage.run:type_name -> broker.manager.EngineSessionRun
	27, // 46: broker.manager.EngineSessionMessage.session:type_name -> broker.manager.EngineSession
	43, // 47: broker.manager.EngineSessionMessage.mcp_message:type_name -> broker.mcp.McpMessage
	35, // 48: broker.manager.EngineSessionMessage.metadata:type_name -> broker.manager.EngineSessionMessage.MetadataEntry
	6,  // 49: broker.manager.ListPagination.order:type_name -> broker.manager.ListPaginationOrder
	7,  // 50: broker.manager.McpManager.CreateSession:input_type -> broker.manager.CreateSessionRequest
	12, // 51: broker.manager.McpManager.SendMcpMessage:input_type -> broker.manager.SendMcpMessageRequest
	14, // 52: broker.manager.McpManager.StreamMcpMessages:input_type -> broker.manager.StreamMcpMessagesRequest
	21, // 53: broker.manager.McpManager.GetServerInfo:input_type -> broker.manager.GetServerInfoRequest
	25, // 54: broker.manager.McpManager.DiscardSession:input_type -> broker.manager.DiscardSessionRequest
	47, // 55: broker.manager.McpManager.ListManagers:input_type -> broker.workerBroker.ListManagersRequest
	22, // 56: broker.manager.McpManager.ListWorkers:input_type -> broker.manager.ListWorkersRequest
	11, // 57: broker.manager.McpManager.CreateSession:output_type -> broker.manager.CreateSessionResponse
	13, // 58: broker.manager.McpManager.SendMcpMessage:output_type -> broker.manager.SendMcpMessageResponse
	20, // 59: broker.manager.McpManager.StreamMcpMessages:output_type -> broker.manager.StreamMcpMessagesResponse
	36, // 60: broker.manager.McpManager.GetServerInfo:output_type -> broker.mcp.McpParticipant
	26, // 61: broker.manager.McpManager.DiscardSession:output_type -> broker.manager.DiscardSessionResponse
	48, // 62: broker.manager.McpManager.ListManagers:output_type -> broker.workerBroker.ListManagersResponse
	23, // 63: broker.manager.McpManager.ListWorkers:output_type -> broker.manager.ListWorkersResponse
	57, // [57:64] is the sub-list for method output_type
	50, // [50:57] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_manager_proto_init() }
func file_manager_proto_init() {
	if File_manager_proto != nil {
		return
	}
	file_manager_proto_msgTypes[3].OneofWrappers = []any{
		(*SessionConfig_ContainerRunConfigWithLauncher)(nil),
		(*SessionConfig_ContainerRunConfigWithContainerArguments)(nil),
		(*SessionConfig_RemoteRunConfigWithLauncher)(nil),
		(*SessionConfig_RemoteRunConfigWithServer)(nil),
	}
	file_manager_proto_msgTypes[6].OneofWrappers = []any{
		(*SendMcpMessageResponse_McpMessage)(nil),
		(*SendMcpMessageResponse_McpError)(nil),
		(*SendMcpMessageResponse_SessionEvent)(nil),
	}
	file_manager_proto_msgTypes[12].OneofWrappers = []any{
		(*SessionEvent_StartRun)(nil),
		(*SessionEvent_StopRun)(nil),
		(*SessionEvent_InfoRun)(nil),
		(*SessionEvent_InfoSession)(nil),
	}
	file_manager_proto_msgTypes[13].OneofWrappers = []any{
		(*StreamMcpMessagesResponse_McpMessage)(nil),
		(*StreamMcpMessagesResponse_McpError)(nil),
		(*StreamMcpMessagesResponse_McpOutput)(nil),
		(*StreamMcpMessagesResponse_SessionEvent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_manager_proto_rawDesc), len(file_manager_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_manager_proto_goTypes,
		DependencyIndexes: file_manager_proto_depIdxs,
		EnumInfos:         file_manager_proto_enumTypes,
		MessageInfos:      file_manager_proto_msgTypes,
	}.Build()
	File_manager_proto = out.File
	file_manager_proto_goTypes = nil
	file_manager_proto_depIdxs = nil
}
