syntax = "proto3";

package broker.remote;

option go_package = "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/remote;remote";

import "mcp.proto";
import "worker.proto";

service McpRemote {
  // rpc GetRemoteInfo(RemoteInfoRequest) returns (RemoteInfoResponse);
  rpc StreamMcpRun(stream RunRequest) returns (stream RunResponse);
}

message RemoteInfoRequest {}

message RemoteInfoResponse {
  string worker_id = 1;

  uint32 active_connections = 2;
  uint64 total_connections = 3;

  broker.worker.WorkerInfoResponse worker_info = 4;
}

message RunConfigRemoteServer {
  enum ServerProtocol {
    sse = 0; // Server-Sent Events
    streamable_http = 1; // Streamable HTTP
  }

  string server_uri = 1;
  ServerProtocol protocol = 2;
}

message RunConfigRemoteArguments {
  map<string, string> headers = 1;
  map<string, string> query = 2;
}

message RunConfig {
  RunConfigRemoteServer server = 1;
  RunConfigRemoteArguments arguments = 2;
}

message RunRequest {
  oneof type {
    RunRequestInit init = 1;
    RunRequestMcpMessage mcp_message = 2;
    RunRequestClose close = 3;
  }
}

message RunRequestInit {
  string connection_id = 1;
  RunConfig run_config = 2;
}

message RunRequestMcpMessage {
  broker.mcp.McpMessageRaw message = 1; 
}

message RunRequestClose {}

message RunResponse {
  oneof type {
    RunResponseMcpMessage mcp_message = 1;
    RunResponseInit init = 2;

    RunResponseOutput output = 3;
    RunResponseError error = 4;
    RunResponseClose close = 5;
  }
}

message RunResponseInit {}

message RunResponseMcpMessage {
  broker.mcp.McpMessage message = 1; 
}

message RunResponseError {
  broker.mcp.McpError mcp_error = 1;
}

message RunResponseOutput {
  broker.mcp.McpOutput mcp_output = 1;
}

message RunResponseClose {}
