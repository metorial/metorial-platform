syntax = "proto3";

package broker.manager;

option go_package = "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/manager;manager";

import "runner.proto";
import "mcp.proto";
import "workerBroker.proto";
import "launcher.proto";

service McpManager {
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc SendMcpMessage(SendMcpMessageRequest) returns (stream SendMcpMessageResponse);
  rpc StreamMcpMessages(StreamMcpMessagesRequest) returns (stream StreamMcpMessagesResponse);
  rpc GetServerInfo(GetServerInfoRequest) returns (broker.mcp.McpParticipant);
  rpc DiscardSession(DiscardSessionRequest) returns (DiscardSessionResponse);

  rpc ListManagers(broker.workerBroker.ListManagersRequest) returns (broker.workerBroker.ListManagersResponse);
  rpc ListWorkers(ListWorkersRequest) returns (ListWorkersResponse);
}

message CreateSessionRequest {
  enum SessionType {
    runner = 0;
  }

  string session_id = 1;
  SessionType type = 2;
  SessionConfig config = 3;
  broker.mcp.McpParticipant mcp_client = 4;
}

message RunConfigWithLauncher {
  broker.runner.RunConfigContainer container = 1;
  broker.launcher.LauncherConfig launcher = 2;
}

message SessionConfig {
  oneof config_type {
    RunConfigWithLauncher run_config_with_launcher = 1;
    broker.runner.RunConfig run_config_with_container_arguments = 2;
  }
}

message CreateSessionResponse {
  string session_id = 1;
  string internal_session_id = 2; // Internal ID used by the MCP Engine
}

message SendMcpMessageRequest {
  string session_id = 1;
  repeated broker.mcp.McpMessageRaw mcp_messages = 2;
  bool include_responses = 3;
}

message SendMcpMessageResponse {
  oneof response {
    broker.mcp.McpMessage mcp_message = 1; 
    broker.mcp.McpError mcp_error = 2;
    SessionEvent session_event = 3;
  }
}

message StreamMcpMessagesRequest {
  string session_id = 1;
  repeated broker.mcp.McpMessageType only_message_types = 2; // Optional, if empty, all message types are streamed
  repeated string only_ids = 3; // Optional, if empty, all messages are streamed
}

message SessionEventStartConnection {
  string connection_id = 1;
}

message SessionEventStopConnection {
  string connection_id = 1;
}

message SessionEventSessionDiscarded {}

message SessionEventSessionStopped {}

message SessionEvent {
  oneof event {
    SessionEventStartConnection start_connection = 1;
    SessionEventStopConnection stop_connection = 2;
    SessionEventSessionDiscarded session_discarded = 3;
    SessionEventSessionStopped session_stopped = 4;
  }
}

message StreamMcpMessagesResponse {
  oneof response {
    broker.mcp.McpMessage mcp_message = 1; 
    broker.mcp.McpError mcp_error = 2;
    broker.mcp.McpOutput mcp_output = 3;
    SessionEvent session_event = 4;
  }
}

message GetServerInfoRequest {
  string session_id = 1;
}

message ListWorkersRequest {}

message ListWorkersResponse {
  repeated WorkerInfo workers = 1;
}

message WorkerInfo {
  string worker_id = 1;
  string address = 2;
  bool accepting_runs = 3;
  bool healthy = 4;
}

message DiscardSessionRequest {
  string session_id = 1;
}

message DiscardSessionResponse {}
