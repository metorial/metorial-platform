syntax = "proto3";

package broker.manager;

option go_package = "github.com/metorial/metorial/mcp-engine/gen/mcp-engine/manager;manager";

import "runner.proto";
import "mcp.proto";
import "workerBroker.proto";
import "launcher.proto";
import "remote.proto";

service McpManager {
  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
  rpc SendMcpMessage(SendMcpMessageRequest) returns (stream SendMcpMessageResponse);
  rpc StreamMcpMessages(StreamMcpMessagesRequest) returns (stream StreamMcpMessagesResponse);
  rpc GetServerInfo(GetServerInfoRequest) returns (broker.mcp.McpParticipant);
  rpc DiscardSession(DiscardSessionRequest) returns (DiscardSessionResponse);

  rpc ListManagers(broker.workerBroker.ListManagersRequest) returns (broker.workerBroker.ListManagersResponse);
  rpc ListWorkers(ListWorkersRequest) returns (ListWorkersResponse);
}

message CreateSessionRequest {
  string session_id = 1;
  SessionConfig config = 3;
  broker.mcp.McpParticipant mcp_client = 4;
}

message ContainerRunConfigWithLauncher {
  broker.runner.RunConfigContainer container = 1;
  broker.launcher.LauncherConfig launcher = 2;
}

message RemoteRunConfigWithLauncher {
  broker.remote.RunConfigRemoteServer server = 1;
  broker.launcher.LauncherConfig launcher = 2;
}

message SessionConfig {
  oneof config_type {
    ContainerRunConfigWithLauncher container_run_config_with_launcher = 1;
    broker.runner.RunConfig container_run_config_with_container_arguments = 2;

    RemoteRunConfigWithLauncher remote_run_config_with_launcher = 3;
    broker.remote.RunConfig remote_run_config_with_server = 4;
  }
}

message CreateSessionResponse {
  string session_id = 1;
  string internal_session_id = 2; // Internal ID used by the MCP Engine
}

message SendMcpMessageRequest {
  string session_id = 1;
  repeated broker.mcp.McpMessageRaw mcp_messages = 2;
  bool include_responses = 3;
}

message SendMcpMessageResponse {
  oneof response {
    broker.mcp.McpMessage mcp_message = 1; 
    broker.mcp.McpError mcp_error = 2;
    SessionEvent session_event = 3;
  }
}

message StreamMcpMessagesRequest {
  string session_id = 1;
  repeated broker.mcp.McpMessageType only_message_types = 2; // Optional, if empty, all message types are streamed
  repeated string only_ids = 3; // Optional, if empty, all messages are streamed
  string replay_after_uuid = 4; // Include messages after this UUID, useful for resuming streams
}

message SessionEventStartConnection {
  string connection_id = 1;
}

message SessionEventStopConnection {
  string connection_id = 1;
}

message SessionEventSessionDiscarded {}

message SessionEventSessionStopped {}

message SessionEvent {
  oneof event {
    SessionEventStartConnection start_connection = 1;
    SessionEventStopConnection stop_connection = 2;
    SessionEventSessionDiscarded session_discarded = 3;
    SessionEventSessionStopped session_stopped = 4;
  }
}

message StreamMcpMessagesResponse {
  oneof response {
    broker.mcp.McpMessage mcp_message = 1; 
    broker.mcp.McpError mcp_error = 2;
    broker.mcp.McpOutput mcp_output = 3;
    SessionEvent session_event = 4;
  }

  bool isReplay = 10;
}

message GetServerInfoRequest {
  string session_id = 1;
}

message ListWorkersRequest {}

message ListWorkersResponse {
  repeated WorkerInfo workers = 1;
}

message WorkerInfo {
  string worker_id = 1;
  string address = 2;
  bool accepting_runs = 3;
  bool healthy = 4;
}

message DiscardSessionRequest {
  string session_id = 1;
}

message DiscardSessionResponse {}

enum EngineSessionStatus {
  session_status_active = 0;
  session_status_closed = 1;
  session_status_expired = 2;
  session_status_error = 3;
  session_status_unknown = 4;
}

enum EngineSessionType {
  session_type_unknown = 0;
  session_type_runner = 1;
  session_type_remote = 2;
}

message EngineSession {
  string id = 1;
  string external_id = 2;

  EngineSessionType type = 3;
  EngineSessionStatus status = 4;
  bool has_error = 12;

  broker.mcp.McpParticipant mcp_client = 5;
  broker.mcp.McpParticipant mcp_server = 6;

  int64 created_at = 7; 
  int64 updated_at = 8; 
  int64 started_at = 9; 
  int64 ended_at = 10;
  int64 last_ping_at = 11; 
}

enum EngineConnectionStatus {
  connection_status_active = 0;
  connection_status_closed = 1;
  connection_status_expired = 2;
  connection_status_error = 3;
  connection_status_unknown = 4;
}

enum EngineConnectionType {
  connection_type_unknown = 0;
  connection_type_runner = 1;
  connection_type_remote = 2;
}

message EngineSessionConnection {
  string id = 1;
  string session_id = 2;

  EngineConnectionType type = 3;
  EngineConnectionStatus status = 4;
  bool has_error = 5;

  string worker_id = 6;

  int64 created_at = 7;
  int64 updated_at = 8;
  int64 started_at = 9;
  int64 ended_at = 10;
  int64 last_ping_at = 11;

  EngineSession session = 12;
}

message EngineSessionError {
  string id = 1;
  string session_id = 2;
  string connection_id = 3;

  EngineSessionConnection connection = 4;
  EngineSession session = 10;

  string error_code = 5;
  string error_message = 6;

  broker.mcp.McpError mcp_error = 7;
  map<string, string> metadata = 8;

  int64 created_at = 9;
}

enum EngineSessionEventType {
  session_event_type_output = 0;
  session_event_type_error = 1;
  session_event_type_log = 2;
  session_event_type_unknown = 3;
}

message EngineSessionEvent {
  string id = 1;

  string session_id = 2;
  string connection_id = 3;
  string error_id = 4;

  EngineSessionEventType type = 5;

  EngineSessionConnection connection = 6;
  EngineSession session = 7;

  EngineSessionError error = 8;

  string content = 9;
  repeated string lines = 10;
  map<string, string> metadata = 11;

  int64 created_at = 12;
}

enum SessionMessageSender {
  session_message_sender_unknown = 0;
  session_message_sender_client = 1;
  session_message_sender_server = 2;
}

message EngineSessionMessage {
  string id = 1;
  int32 index = 2;
  SessionMessageSender sender = 3;

  string session_id = 4;
  string connection_id = 5;

  EngineSessionConnection connection = 6;
  EngineSession session = 7;

  broker.mcp.McpMessage mcp_message = 8;
  map<string, string> metadata = 9;

  int64 created_at = 10;
}