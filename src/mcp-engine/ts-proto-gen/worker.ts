// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: worker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";

export const protobufPackage = "broker.worker";

export enum WorkerType {
  mcp_runner = 0,
  mcp_remote = 1,
  launcher = 10,
  UNRECOGNIZED = -1,
}

export function workerTypeFromJSON(object: any): WorkerType {
  switch (object) {
    case 0:
    case "mcp_runner":
      return WorkerType.mcp_runner;
    case 1:
    case "mcp_remote":
      return WorkerType.mcp_remote;
    case 10:
    case "launcher":
      return WorkerType.launcher;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkerType.UNRECOGNIZED;
  }
}

export function workerTypeToJSON(object: WorkerType): string {
  switch (object) {
    case WorkerType.mcp_runner:
      return "mcp_runner";
    case WorkerType.mcp_remote:
      return "mcp_remote";
    case WorkerType.launcher:
      return "launcher";
    case WorkerType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WorkerStatus {
  healthy = 0,
  unhealthy = 1,
  UNRECOGNIZED = -1,
}

export function workerStatusFromJSON(object: any): WorkerStatus {
  switch (object) {
    case 0:
    case "healthy":
      return WorkerStatus.healthy;
    case 1:
    case "unhealthy":
      return WorkerStatus.unhealthy;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkerStatus.UNRECOGNIZED;
  }
}

export function workerStatusToJSON(object: WorkerStatus): string {
  switch (object) {
    case WorkerStatus.healthy:
      return "healthy";
    case WorkerStatus.unhealthy:
      return "unhealthy";
    case WorkerStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WorkerAcceptingJobs {
  accepting = 0,
  not_accepting = 1,
  UNRECOGNIZED = -1,
}

export function workerAcceptingJobsFromJSON(object: any): WorkerAcceptingJobs {
  switch (object) {
    case 0:
    case "accepting":
      return WorkerAcceptingJobs.accepting;
    case 1:
    case "not_accepting":
      return WorkerAcceptingJobs.not_accepting;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkerAcceptingJobs.UNRECOGNIZED;
  }
}

export function workerAcceptingJobsToJSON(object: WorkerAcceptingJobs): string {
  switch (object) {
    case WorkerAcceptingJobs.accepting:
      return "accepting";
    case WorkerAcceptingJobs.not_accepting:
      return "not_accepting";
    case WorkerAcceptingJobs.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface WorkerInfoRequest {
}

export interface WorkerInfoResponse {
  workerId: string;
  startTime: Long;
  acceptingJobs: WorkerAcceptingJobs;
  status: WorkerStatus;
  workerType: WorkerType;
}

export interface WorkerHealthRequest {
}

function createBaseWorkerInfoRequest(): WorkerInfoRequest {
  return {};
}

export const WorkerInfoRequest: MessageFns<WorkerInfoRequest> = {
  encode(_: WorkerInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WorkerInfoRequest {
    return {};
  },

  toJSON(_: WorkerInfoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<WorkerInfoRequest>): WorkerInfoRequest {
    return WorkerInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<WorkerInfoRequest>): WorkerInfoRequest {
    const message = createBaseWorkerInfoRequest();
    return message;
  },
};

function createBaseWorkerInfoResponse(): WorkerInfoResponse {
  return { workerId: "", startTime: Long.ZERO, acceptingJobs: 0, status: 0, workerType: 0 };
}

export const WorkerInfoResponse: MessageFns<WorkerInfoResponse> = {
  encode(message: WorkerInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workerId !== "") {
      writer.uint32(10).string(message.workerId);
    }
    if (!message.startTime.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.startTime.toString());
    }
    if (message.acceptingJobs !== 0) {
      writer.uint32(24).int32(message.acceptingJobs);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.workerType !== 0) {
      writer.uint32(40).int32(message.workerType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startTime = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.acceptingJobs = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.workerType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerInfoResponse {
    return {
      workerId: isSet(object.workerId) ? globalThis.String(object.workerId) : "",
      startTime: isSet(object.startTime) ? Long.fromValue(object.startTime) : Long.ZERO,
      acceptingJobs: isSet(object.acceptingJobs) ? workerAcceptingJobsFromJSON(object.acceptingJobs) : 0,
      status: isSet(object.status) ? workerStatusFromJSON(object.status) : 0,
      workerType: isSet(object.workerType) ? workerTypeFromJSON(object.workerType) : 0,
    };
  },

  toJSON(message: WorkerInfoResponse): unknown {
    const obj: any = {};
    if (message.workerId !== "") {
      obj.workerId = message.workerId;
    }
    if (!message.startTime.equals(Long.ZERO)) {
      obj.startTime = (message.startTime || Long.ZERO).toString();
    }
    if (message.acceptingJobs !== 0) {
      obj.acceptingJobs = workerAcceptingJobsToJSON(message.acceptingJobs);
    }
    if (message.status !== 0) {
      obj.status = workerStatusToJSON(message.status);
    }
    if (message.workerType !== 0) {
      obj.workerType = workerTypeToJSON(message.workerType);
    }
    return obj;
  },

  create(base?: DeepPartial<WorkerInfoResponse>): WorkerInfoResponse {
    return WorkerInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkerInfoResponse>): WorkerInfoResponse {
    const message = createBaseWorkerInfoResponse();
    message.workerId = object.workerId ?? "";
    message.startTime = (object.startTime !== undefined && object.startTime !== null)
      ? Long.fromValue(object.startTime)
      : Long.ZERO;
    message.acceptingJobs = object.acceptingJobs ?? 0;
    message.status = object.status ?? 0;
    message.workerType = object.workerType ?? 0;
    return message;
  },
};

function createBaseWorkerHealthRequest(): WorkerHealthRequest {
  return {};
}

export const WorkerHealthRequest: MessageFns<WorkerHealthRequest> = {
  encode(_: WorkerHealthRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerHealthRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerHealthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): WorkerHealthRequest {
    return {};
  },

  toJSON(_: WorkerHealthRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<WorkerHealthRequest>): WorkerHealthRequest {
    return WorkerHealthRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<WorkerHealthRequest>): WorkerHealthRequest {
    const message = createBaseWorkerHealthRequest();
    return message;
  },
};

export type WorkerService = typeof WorkerService;
export const WorkerService = {
  getWorkerInfo: {
    path: "/broker.worker.Worker/GetWorkerInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: WorkerInfoRequest): Buffer => Buffer.from(WorkerInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): WorkerInfoRequest => WorkerInfoRequest.decode(value),
    responseSerialize: (value: WorkerInfoResponse): Buffer => Buffer.from(WorkerInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): WorkerInfoResponse => WorkerInfoResponse.decode(value),
  },
  streamWorkerHealth: {
    path: "/broker.worker.Worker/StreamWorkerHealth",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: WorkerHealthRequest): Buffer => Buffer.from(WorkerHealthRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): WorkerHealthRequest => WorkerHealthRequest.decode(value),
    responseSerialize: (value: WorkerInfoResponse): Buffer => Buffer.from(WorkerInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): WorkerInfoResponse => WorkerInfoResponse.decode(value),
  },
} as const;

export interface WorkerServer extends UntypedServiceImplementation {
  getWorkerInfo: handleUnaryCall<WorkerInfoRequest, WorkerInfoResponse>;
  streamWorkerHealth: handleServerStreamingCall<WorkerHealthRequest, WorkerInfoResponse>;
}

export interface WorkerClient extends Client {
  getWorkerInfo(
    request: WorkerInfoRequest,
    callback: (error: ServiceError | null, response: WorkerInfoResponse) => void,
  ): ClientUnaryCall;
  getWorkerInfo(
    request: WorkerInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: WorkerInfoResponse) => void,
  ): ClientUnaryCall;
  getWorkerInfo(
    request: WorkerInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: WorkerInfoResponse) => void,
  ): ClientUnaryCall;
  streamWorkerHealth(
    request: WorkerHealthRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<WorkerInfoResponse>;
  streamWorkerHealth(
    request: WorkerHealthRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<WorkerInfoResponse>;
}

export const WorkerClient = makeGenericClientConstructor(WorkerService, "broker.worker.Worker") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): WorkerClient;
  service: typeof WorkerService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
