// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v6.31.1
// source: launcher.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";

export const protobufPackage = "broker.launcher";

export interface LauncherConfig {
  launcherType: LauncherConfig_LauncherType;
  code: string;
  jsonConfig: string;
}

export enum LauncherConfig_LauncherType {
  deno = 0,
  UNRECOGNIZED = -1,
}

export function launcherConfig_LauncherTypeFromJSON(object: any): LauncherConfig_LauncherType {
  switch (object) {
    case 0:
    case "deno":
      return LauncherConfig_LauncherType.deno;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LauncherConfig_LauncherType.UNRECOGNIZED;
  }
}

export function launcherConfig_LauncherTypeToJSON(object: LauncherConfig_LauncherType): string {
  switch (object) {
    case LauncherConfig_LauncherType.deno:
      return "deno";
    case LauncherConfig_LauncherType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface RunLauncherRequest {
  config: LauncherConfig | undefined;
}

export interface RunLauncherResponse {
  type: RunLauncherResponse_Type;
  jsonOutput: string;
  errorMessage: string;
}

export enum RunLauncherResponse_Type {
  error = 0,
  success = 1,
  UNRECOGNIZED = -1,
}

export function runLauncherResponse_TypeFromJSON(object: any): RunLauncherResponse_Type {
  switch (object) {
    case 0:
    case "error":
      return RunLauncherResponse_Type.error;
    case 1:
    case "success":
      return RunLauncherResponse_Type.success;
    case -1:
    case "UNRECOGNIZED":
    default:
      return RunLauncherResponse_Type.UNRECOGNIZED;
  }
}

export function runLauncherResponse_TypeToJSON(object: RunLauncherResponse_Type): string {
  switch (object) {
    case RunLauncherResponse_Type.error:
      return "error";
    case RunLauncherResponse_Type.success:
      return "success";
    case RunLauncherResponse_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseLauncherConfig(): LauncherConfig {
  return { launcherType: 0, code: "", jsonConfig: "" };
}

export const LauncherConfig: MessageFns<LauncherConfig> = {
  encode(message: LauncherConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.launcherType !== 0) {
      writer.uint32(8).int32(message.launcherType);
    }
    if (message.code !== "") {
      writer.uint32(18).string(message.code);
    }
    if (message.jsonConfig !== "") {
      writer.uint32(26).string(message.jsonConfig);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LauncherConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLauncherConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.launcherType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.jsonConfig = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LauncherConfig {
    return {
      launcherType: isSet(object.launcherType) ? launcherConfig_LauncherTypeFromJSON(object.launcherType) : 0,
      code: isSet(object.code) ? globalThis.String(object.code) : "",
      jsonConfig: isSet(object.jsonConfig) ? globalThis.String(object.jsonConfig) : "",
    };
  },

  toJSON(message: LauncherConfig): unknown {
    const obj: any = {};
    if (message.launcherType !== 0) {
      obj.launcherType = launcherConfig_LauncherTypeToJSON(message.launcherType);
    }
    if (message.code !== "") {
      obj.code = message.code;
    }
    if (message.jsonConfig !== "") {
      obj.jsonConfig = message.jsonConfig;
    }
    return obj;
  },

  create(base?: DeepPartial<LauncherConfig>): LauncherConfig {
    return LauncherConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LauncherConfig>): LauncherConfig {
    const message = createBaseLauncherConfig();
    message.launcherType = object.launcherType ?? 0;
    message.code = object.code ?? "";
    message.jsonConfig = object.jsonConfig ?? "";
    return message;
  },
};

function createBaseRunLauncherRequest(): RunLauncherRequest {
  return { config: undefined };
}

export const RunLauncherRequest: MessageFns<RunLauncherRequest> = {
  encode(message: RunLauncherRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.config !== undefined) {
      LauncherConfig.encode(message.config, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunLauncherRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunLauncherRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.config = LauncherConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunLauncherRequest {
    return { config: isSet(object.config) ? LauncherConfig.fromJSON(object.config) : undefined };
  },

  toJSON(message: RunLauncherRequest): unknown {
    const obj: any = {};
    if (message.config !== undefined) {
      obj.config = LauncherConfig.toJSON(message.config);
    }
    return obj;
  },

  create(base?: DeepPartial<RunLauncherRequest>): RunLauncherRequest {
    return RunLauncherRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunLauncherRequest>): RunLauncherRequest {
    const message = createBaseRunLauncherRequest();
    message.config = (object.config !== undefined && object.config !== null)
      ? LauncherConfig.fromPartial(object.config)
      : undefined;
    return message;
  },
};

function createBaseRunLauncherResponse(): RunLauncherResponse {
  return { type: 0, jsonOutput: "", errorMessage: "" };
}

export const RunLauncherResponse: MessageFns<RunLauncherResponse> = {
  encode(message: RunLauncherResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.jsonOutput !== "") {
      writer.uint32(18).string(message.jsonOutput);
    }
    if (message.errorMessage !== "") {
      writer.uint32(26).string(message.errorMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RunLauncherResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRunLauncherResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.jsonOutput = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.errorMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RunLauncherResponse {
    return {
      type: isSet(object.type) ? runLauncherResponse_TypeFromJSON(object.type) : 0,
      jsonOutput: isSet(object.jsonOutput) ? globalThis.String(object.jsonOutput) : "",
      errorMessage: isSet(object.errorMessage) ? globalThis.String(object.errorMessage) : "",
    };
  },

  toJSON(message: RunLauncherResponse): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = runLauncherResponse_TypeToJSON(message.type);
    }
    if (message.jsonOutput !== "") {
      obj.jsonOutput = message.jsonOutput;
    }
    if (message.errorMessage !== "") {
      obj.errorMessage = message.errorMessage;
    }
    return obj;
  },

  create(base?: DeepPartial<RunLauncherResponse>): RunLauncherResponse {
    return RunLauncherResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RunLauncherResponse>): RunLauncherResponse {
    const message = createBaseRunLauncherResponse();
    message.type = object.type ?? 0;
    message.jsonOutput = object.jsonOutput ?? "";
    message.errorMessage = object.errorMessage ?? "";
    return message;
  },
};

export type LauncherService = typeof LauncherService;
export const LauncherService = {
  runLauncher: {
    path: "/broker.launcher.Launcher/RunLauncher",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RunLauncherRequest): Buffer => Buffer.from(RunLauncherRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RunLauncherRequest => RunLauncherRequest.decode(value),
    responseSerialize: (value: RunLauncherResponse): Buffer => Buffer.from(RunLauncherResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RunLauncherResponse => RunLauncherResponse.decode(value),
  },
} as const;

export interface LauncherServer extends UntypedServiceImplementation {
  runLauncher: handleUnaryCall<RunLauncherRequest, RunLauncherResponse>;
}

export interface LauncherClient extends Client {
  runLauncher(
    request: RunLauncherRequest,
    callback: (error: ServiceError | null, response: RunLauncherResponse) => void,
  ): ClientUnaryCall;
  runLauncher(
    request: RunLauncherRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RunLauncherResponse) => void,
  ): ClientUnaryCall;
  runLauncher(
    request: RunLauncherRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RunLauncherResponse) => void,
  ): ClientUnaryCall;
}

export const LauncherClient = makeGenericClientConstructor(LauncherService, "broker.launcher.Launcher") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): LauncherClient;
  service: typeof LauncherService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
