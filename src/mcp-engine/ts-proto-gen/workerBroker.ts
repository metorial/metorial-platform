// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: workerBroker.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import Long from "long";
import { WorkerType, workerTypeFromJSON, workerTypeToJSON } from "./worker";

export const protobufPackage = "broker.workerBroker";

export interface ListManagersRequest {
}

export interface ListManagersResponse {
  managers: Manager[];
}

export interface Manager {
  id: string;
  address: string;
}

export interface RegisterWorkerRequest {
  workerId: string;
  address: string;
  workerType: WorkerType;
}

export interface RegisterWorkerResponse {
}

export interface GetManagerInfoRequest {
}

export interface GetManagerInfoResponse {
  id: string;
  address: string;
}

function createBaseListManagersRequest(): ListManagersRequest {
  return {};
}

export const ListManagersRequest: MessageFns<ListManagersRequest> = {
  encode(_: ListManagersRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListManagersRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListManagersRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListManagersRequest {
    return {};
  },

  toJSON(_: ListManagersRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<ListManagersRequest>): ListManagersRequest {
    return ListManagersRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<ListManagersRequest>): ListManagersRequest {
    const message = createBaseListManagersRequest();
    return message;
  },
};

function createBaseListManagersResponse(): ListManagersResponse {
  return { managers: [] };
}

export const ListManagersResponse: MessageFns<ListManagersResponse> = {
  encode(message: ListManagersResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.managers) {
      Manager.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListManagersResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListManagersResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.managers.push(Manager.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListManagersResponse {
    return {
      managers: globalThis.Array.isArray(object?.managers) ? object.managers.map((e: any) => Manager.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListManagersResponse): unknown {
    const obj: any = {};
    if (message.managers?.length) {
      obj.managers = message.managers.map((e) => Manager.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListManagersResponse>): ListManagersResponse {
    return ListManagersResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListManagersResponse>): ListManagersResponse {
    const message = createBaseListManagersResponse();
    message.managers = object.managers?.map((e) => Manager.fromPartial(e)) || [];
    return message;
  },
};

function createBaseManager(): Manager {
  return { id: "", address: "" };
}

export const Manager: MessageFns<Manager> = {
  encode(message: Manager, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Manager {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseManager();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Manager {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: Manager): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<Manager>): Manager {
    return Manager.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Manager>): Manager {
    const message = createBaseManager();
    message.id = object.id ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseRegisterWorkerRequest(): RegisterWorkerRequest {
  return { workerId: "", address: "", workerType: 0 };
}

export const RegisterWorkerRequest: MessageFns<RegisterWorkerRequest> = {
  encode(message: RegisterWorkerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workerId !== "") {
      writer.uint32(10).string(message.workerId);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    if (message.workerType !== 0) {
      writer.uint32(24).int32(message.workerType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterWorkerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterWorkerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.workerType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterWorkerRequest {
    return {
      workerId: isSet(object.workerId) ? globalThis.String(object.workerId) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      workerType: isSet(object.workerType) ? workerTypeFromJSON(object.workerType) : 0,
    };
  },

  toJSON(message: RegisterWorkerRequest): unknown {
    const obj: any = {};
    if (message.workerId !== "") {
      obj.workerId = message.workerId;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.workerType !== 0) {
      obj.workerType = workerTypeToJSON(message.workerType);
    }
    return obj;
  },

  create(base?: DeepPartial<RegisterWorkerRequest>): RegisterWorkerRequest {
    return RegisterWorkerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegisterWorkerRequest>): RegisterWorkerRequest {
    const message = createBaseRegisterWorkerRequest();
    message.workerId = object.workerId ?? "";
    message.address = object.address ?? "";
    message.workerType = object.workerType ?? 0;
    return message;
  },
};

function createBaseRegisterWorkerResponse(): RegisterWorkerResponse {
  return {};
}

export const RegisterWorkerResponse: MessageFns<RegisterWorkerResponse> = {
  encode(_: RegisterWorkerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterWorkerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterWorkerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RegisterWorkerResponse {
    return {};
  },

  toJSON(_: RegisterWorkerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<RegisterWorkerResponse>): RegisterWorkerResponse {
    return RegisterWorkerResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<RegisterWorkerResponse>): RegisterWorkerResponse {
    const message = createBaseRegisterWorkerResponse();
    return message;
  },
};

function createBaseGetManagerInfoRequest(): GetManagerInfoRequest {
  return {};
}

export const GetManagerInfoRequest: MessageFns<GetManagerInfoRequest> = {
  encode(_: GetManagerInfoRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetManagerInfoRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetManagerInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetManagerInfoRequest {
    return {};
  },

  toJSON(_: GetManagerInfoRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetManagerInfoRequest>): GetManagerInfoRequest {
    return GetManagerInfoRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetManagerInfoRequest>): GetManagerInfoRequest {
    const message = createBaseGetManagerInfoRequest();
    return message;
  },
};

function createBaseGetManagerInfoResponse(): GetManagerInfoResponse {
  return { id: "", address: "" };
}

export const GetManagerInfoResponse: MessageFns<GetManagerInfoResponse> = {
  encode(message: GetManagerInfoResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.address !== "") {
      writer.uint32(18).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetManagerInfoResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetManagerInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetManagerInfoResponse {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
    };
  },

  toJSON(message: GetManagerInfoResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create(base?: DeepPartial<GetManagerInfoResponse>): GetManagerInfoResponse {
    return GetManagerInfoResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetManagerInfoResponse>): GetManagerInfoResponse {
    const message = createBaseGetManagerInfoResponse();
    message.id = object.id ?? "";
    message.address = object.address ?? "";
    return message;
  },
};

export type McpWorkerBrokerService = typeof McpWorkerBrokerService;
export const McpWorkerBrokerService = {
  listManagers: {
    path: "/broker.workerBroker.McpWorkerBroker/ListManagers",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListManagersRequest): Buffer => Buffer.from(ListManagersRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListManagersRequest => ListManagersRequest.decode(value),
    responseSerialize: (value: ListManagersResponse): Buffer =>
      Buffer.from(ListManagersResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListManagersResponse => ListManagersResponse.decode(value),
  },
  registerWorker: {
    path: "/broker.workerBroker.McpWorkerBroker/RegisterWorker",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RegisterWorkerRequest): Buffer =>
      Buffer.from(RegisterWorkerRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RegisterWorkerRequest => RegisterWorkerRequest.decode(value),
    responseSerialize: (value: RegisterWorkerResponse): Buffer =>
      Buffer.from(RegisterWorkerResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RegisterWorkerResponse => RegisterWorkerResponse.decode(value),
  },
  getManagerInfo: {
    path: "/broker.workerBroker.McpWorkerBroker/GetManagerInfo",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetManagerInfoRequest): Buffer =>
      Buffer.from(GetManagerInfoRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetManagerInfoRequest => GetManagerInfoRequest.decode(value),
    responseSerialize: (value: GetManagerInfoResponse): Buffer =>
      Buffer.from(GetManagerInfoResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetManagerInfoResponse => GetManagerInfoResponse.decode(value),
  },
} as const;

export interface McpWorkerBrokerServer extends UntypedServiceImplementation {
  listManagers: handleUnaryCall<ListManagersRequest, ListManagersResponse>;
  registerWorker: handleUnaryCall<RegisterWorkerRequest, RegisterWorkerResponse>;
  getManagerInfo: handleUnaryCall<GetManagerInfoRequest, GetManagerInfoResponse>;
}

export interface McpWorkerBrokerClient extends Client {
  listManagers(
    request: ListManagersRequest,
    callback: (error: ServiceError | null, response: ListManagersResponse) => void,
  ): ClientUnaryCall;
  listManagers(
    request: ListManagersRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListManagersResponse) => void,
  ): ClientUnaryCall;
  listManagers(
    request: ListManagersRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListManagersResponse) => void,
  ): ClientUnaryCall;
  registerWorker(
    request: RegisterWorkerRequest,
    callback: (error: ServiceError | null, response: RegisterWorkerResponse) => void,
  ): ClientUnaryCall;
  registerWorker(
    request: RegisterWorkerRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RegisterWorkerResponse) => void,
  ): ClientUnaryCall;
  registerWorker(
    request: RegisterWorkerRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RegisterWorkerResponse) => void,
  ): ClientUnaryCall;
  getManagerInfo(
    request: GetManagerInfoRequest,
    callback: (error: ServiceError | null, response: GetManagerInfoResponse) => void,
  ): ClientUnaryCall;
  getManagerInfo(
    request: GetManagerInfoRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetManagerInfoResponse) => void,
  ): ClientUnaryCall;
  getManagerInfo(
    request: GetManagerInfoRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetManagerInfoResponse) => void,
  ): ClientUnaryCall;
}

export const McpWorkerBrokerClient = makeGenericClientConstructor(
  McpWorkerBrokerService,
  "broker.workerBroker.McpWorkerBroker",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): McpWorkerBrokerClient;
  service: typeof McpWorkerBrokerService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
