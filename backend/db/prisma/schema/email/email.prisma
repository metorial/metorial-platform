model OutgoingEmail {
  oid BigInt @id @default(autoincrement())
  id  String

  numberOfDestinations          Int
  numberOfDestinationsCompleted Int

  identityId Int
  identity   EmailIdentity @relation(fields: [identityId], references: [oid], onDelete: Cascade)

  values Json

  subject String

  createdAt DateTime @default(now())

  content      OutgoingEmailContent?
  destinations OutgoingEmailDestination[]
}

enum OutgoingEmailDestinationStatus {
  pending
  sent
  retry
  failed
}

model OutgoingEmailDestination {
  id     BigInt                         @id @default(autoincrement())
  status OutgoingEmailDestinationStatus

  emailId BigInt
  email   OutgoingEmail @relation(fields: [emailId], references: [oid], onDelete: Cascade)

  destination String

  OutgoingEmailSend OutgoingEmailSend[]
}

model OutgoingEmailContent {
  emailId BigInt        @id
  email   OutgoingEmail @relation(fields: [emailId], references: [oid], onDelete: Cascade)

  html    String
  text    String
  subject String
}

enum OutgoingEmailSendStatus {
  success
  failed
}

model OutgoingEmailSend {
  id     BigInt                  @id @default(autoincrement())
  status OutgoingEmailSendStatus

  destinationId BigInt
  destination   OutgoingEmailDestination @relation(fields: [destinationId], references: [id], onDelete: Cascade)

  result Json

  createdAt DateTime @default(now())
}
